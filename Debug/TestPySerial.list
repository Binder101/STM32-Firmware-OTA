
TestPySerial.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003c30  080000c0  080000c0  000010c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000ec  08003cf0  08003cf0  00004cf0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003ddc  08003ddc  00005070  2**0
                  CONTENTS, READONLY
  4 .ARM          00000000  08003ddc  08003ddc  00005070  2**0
                  CONTENTS, READONLY
  5 .preinit_array 00000000  08003ddc  08003ddc  00005070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003ddc  08003ddc  00004ddc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08003de0  08003de0  00004de0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000070  20000000  08003de4  00005000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000308  20000070  08003e54  00005070  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000378  08003e54  00005378  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00005070  2**0
                  CONTENTS, READONLY
 12 .debug_info   00009d3b  00000000  00000000  00005098  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001953  00000000  00000000  0000edd3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000007e8  00000000  00000000  00010728  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000610  00000000  00000000  00010f10  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00015990  00000000  00000000  00011520  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000a456  00000000  00000000  00026eb0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00083717  00000000  00000000  00031306  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000b4a1d  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000022d8  00000000  00000000  000b4a60  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000070  00000000  00000000  000b6d38  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	@ (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	@ (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	@ (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000070 	.word	0x20000070
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08003cd8 	.word	0x08003cd8

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	@ (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	@ (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	@ (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			@ (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000074 	.word	0x20000074
 8000104:	08003cd8 	.word	0x08003cd8

08000108 <__gnu_thumb1_case_shi>:
 8000108:	b403      	push	{r0, r1}
 800010a:	4671      	mov	r1, lr
 800010c:	0849      	lsrs	r1, r1, #1
 800010e:	0040      	lsls	r0, r0, #1
 8000110:	0049      	lsls	r1, r1, #1
 8000112:	5e09      	ldrsh	r1, [r1, r0]
 8000114:	0049      	lsls	r1, r1, #1
 8000116:	448e      	add	lr, r1
 8000118:	bc03      	pop	{r0, r1}
 800011a:	4770      	bx	lr

0800011c <__udivsi3>:
 800011c:	2200      	movs	r2, #0
 800011e:	0843      	lsrs	r3, r0, #1
 8000120:	428b      	cmp	r3, r1
 8000122:	d374      	bcc.n	800020e <__udivsi3+0xf2>
 8000124:	0903      	lsrs	r3, r0, #4
 8000126:	428b      	cmp	r3, r1
 8000128:	d35f      	bcc.n	80001ea <__udivsi3+0xce>
 800012a:	0a03      	lsrs	r3, r0, #8
 800012c:	428b      	cmp	r3, r1
 800012e:	d344      	bcc.n	80001ba <__udivsi3+0x9e>
 8000130:	0b03      	lsrs	r3, r0, #12
 8000132:	428b      	cmp	r3, r1
 8000134:	d328      	bcc.n	8000188 <__udivsi3+0x6c>
 8000136:	0c03      	lsrs	r3, r0, #16
 8000138:	428b      	cmp	r3, r1
 800013a:	d30d      	bcc.n	8000158 <__udivsi3+0x3c>
 800013c:	22ff      	movs	r2, #255	@ 0xff
 800013e:	0209      	lsls	r1, r1, #8
 8000140:	ba12      	rev	r2, r2
 8000142:	0c03      	lsrs	r3, r0, #16
 8000144:	428b      	cmp	r3, r1
 8000146:	d302      	bcc.n	800014e <__udivsi3+0x32>
 8000148:	1212      	asrs	r2, r2, #8
 800014a:	0209      	lsls	r1, r1, #8
 800014c:	d065      	beq.n	800021a <__udivsi3+0xfe>
 800014e:	0b03      	lsrs	r3, r0, #12
 8000150:	428b      	cmp	r3, r1
 8000152:	d319      	bcc.n	8000188 <__udivsi3+0x6c>
 8000154:	e000      	b.n	8000158 <__udivsi3+0x3c>
 8000156:	0a09      	lsrs	r1, r1, #8
 8000158:	0bc3      	lsrs	r3, r0, #15
 800015a:	428b      	cmp	r3, r1
 800015c:	d301      	bcc.n	8000162 <__udivsi3+0x46>
 800015e:	03cb      	lsls	r3, r1, #15
 8000160:	1ac0      	subs	r0, r0, r3
 8000162:	4152      	adcs	r2, r2
 8000164:	0b83      	lsrs	r3, r0, #14
 8000166:	428b      	cmp	r3, r1
 8000168:	d301      	bcc.n	800016e <__udivsi3+0x52>
 800016a:	038b      	lsls	r3, r1, #14
 800016c:	1ac0      	subs	r0, r0, r3
 800016e:	4152      	adcs	r2, r2
 8000170:	0b43      	lsrs	r3, r0, #13
 8000172:	428b      	cmp	r3, r1
 8000174:	d301      	bcc.n	800017a <__udivsi3+0x5e>
 8000176:	034b      	lsls	r3, r1, #13
 8000178:	1ac0      	subs	r0, r0, r3
 800017a:	4152      	adcs	r2, r2
 800017c:	0b03      	lsrs	r3, r0, #12
 800017e:	428b      	cmp	r3, r1
 8000180:	d301      	bcc.n	8000186 <__udivsi3+0x6a>
 8000182:	030b      	lsls	r3, r1, #12
 8000184:	1ac0      	subs	r0, r0, r3
 8000186:	4152      	adcs	r2, r2
 8000188:	0ac3      	lsrs	r3, r0, #11
 800018a:	428b      	cmp	r3, r1
 800018c:	d301      	bcc.n	8000192 <__udivsi3+0x76>
 800018e:	02cb      	lsls	r3, r1, #11
 8000190:	1ac0      	subs	r0, r0, r3
 8000192:	4152      	adcs	r2, r2
 8000194:	0a83      	lsrs	r3, r0, #10
 8000196:	428b      	cmp	r3, r1
 8000198:	d301      	bcc.n	800019e <__udivsi3+0x82>
 800019a:	028b      	lsls	r3, r1, #10
 800019c:	1ac0      	subs	r0, r0, r3
 800019e:	4152      	adcs	r2, r2
 80001a0:	0a43      	lsrs	r3, r0, #9
 80001a2:	428b      	cmp	r3, r1
 80001a4:	d301      	bcc.n	80001aa <__udivsi3+0x8e>
 80001a6:	024b      	lsls	r3, r1, #9
 80001a8:	1ac0      	subs	r0, r0, r3
 80001aa:	4152      	adcs	r2, r2
 80001ac:	0a03      	lsrs	r3, r0, #8
 80001ae:	428b      	cmp	r3, r1
 80001b0:	d301      	bcc.n	80001b6 <__udivsi3+0x9a>
 80001b2:	020b      	lsls	r3, r1, #8
 80001b4:	1ac0      	subs	r0, r0, r3
 80001b6:	4152      	adcs	r2, r2
 80001b8:	d2cd      	bcs.n	8000156 <__udivsi3+0x3a>
 80001ba:	09c3      	lsrs	r3, r0, #7
 80001bc:	428b      	cmp	r3, r1
 80001be:	d301      	bcc.n	80001c4 <__udivsi3+0xa8>
 80001c0:	01cb      	lsls	r3, r1, #7
 80001c2:	1ac0      	subs	r0, r0, r3
 80001c4:	4152      	adcs	r2, r2
 80001c6:	0983      	lsrs	r3, r0, #6
 80001c8:	428b      	cmp	r3, r1
 80001ca:	d301      	bcc.n	80001d0 <__udivsi3+0xb4>
 80001cc:	018b      	lsls	r3, r1, #6
 80001ce:	1ac0      	subs	r0, r0, r3
 80001d0:	4152      	adcs	r2, r2
 80001d2:	0943      	lsrs	r3, r0, #5
 80001d4:	428b      	cmp	r3, r1
 80001d6:	d301      	bcc.n	80001dc <__udivsi3+0xc0>
 80001d8:	014b      	lsls	r3, r1, #5
 80001da:	1ac0      	subs	r0, r0, r3
 80001dc:	4152      	adcs	r2, r2
 80001de:	0903      	lsrs	r3, r0, #4
 80001e0:	428b      	cmp	r3, r1
 80001e2:	d301      	bcc.n	80001e8 <__udivsi3+0xcc>
 80001e4:	010b      	lsls	r3, r1, #4
 80001e6:	1ac0      	subs	r0, r0, r3
 80001e8:	4152      	adcs	r2, r2
 80001ea:	08c3      	lsrs	r3, r0, #3
 80001ec:	428b      	cmp	r3, r1
 80001ee:	d301      	bcc.n	80001f4 <__udivsi3+0xd8>
 80001f0:	00cb      	lsls	r3, r1, #3
 80001f2:	1ac0      	subs	r0, r0, r3
 80001f4:	4152      	adcs	r2, r2
 80001f6:	0883      	lsrs	r3, r0, #2
 80001f8:	428b      	cmp	r3, r1
 80001fa:	d301      	bcc.n	8000200 <__udivsi3+0xe4>
 80001fc:	008b      	lsls	r3, r1, #2
 80001fe:	1ac0      	subs	r0, r0, r3
 8000200:	4152      	adcs	r2, r2
 8000202:	0843      	lsrs	r3, r0, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d301      	bcc.n	800020c <__udivsi3+0xf0>
 8000208:	004b      	lsls	r3, r1, #1
 800020a:	1ac0      	subs	r0, r0, r3
 800020c:	4152      	adcs	r2, r2
 800020e:	1a41      	subs	r1, r0, r1
 8000210:	d200      	bcs.n	8000214 <__udivsi3+0xf8>
 8000212:	4601      	mov	r1, r0
 8000214:	4152      	adcs	r2, r2
 8000216:	4610      	mov	r0, r2
 8000218:	4770      	bx	lr
 800021a:	e7ff      	b.n	800021c <__udivsi3+0x100>
 800021c:	b501      	push	{r0, lr}
 800021e:	2000      	movs	r0, #0
 8000220:	f000 f806 	bl	8000230 <__aeabi_idiv0>
 8000224:	bd02      	pop	{r1, pc}
 8000226:	46c0      	nop			@ (mov r8, r8)

08000228 <__aeabi_uidivmod>:
 8000228:	2900      	cmp	r1, #0
 800022a:	d0f7      	beq.n	800021c <__udivsi3+0x100>
 800022c:	e776      	b.n	800011c <__udivsi3>
 800022e:	4770      	bx	lr

08000230 <__aeabi_idiv0>:
 8000230:	4770      	bx	lr
 8000232:	46c0      	nop			@ (mov r8, r8)

08000234 <UART_DMA_Init>:
UART_HandleTypeDef huart2;
DMA_HandleTypeDef hdma_usart2_rx;

/* USER CODE BEGIN PV */
void UART_DMA_Init(void)
{
 8000234:	b580      	push	{r7, lr}
 8000236:	af00      	add	r7, sp, #0
    // Start DMA reception in circular mode
    HAL_UART_Receive_DMA(&huart2, rxBuffer, RX_BUFFER_SIZE);
 8000238:	4904      	ldr	r1, [pc, #16]	@ (800024c <UART_DMA_Init+0x18>)
 800023a:	4b05      	ldr	r3, [pc, #20]	@ (8000250 <UART_DMA_Init+0x1c>)
 800023c:	224d      	movs	r2, #77	@ 0x4d
 800023e:	0018      	movs	r0, r3
 8000240:	f001 fea6 	bl	8001f90 <HAL_UART_Receive_DMA>
}
 8000244:	46c0      	nop			@ (mov r8, r8)
 8000246:	46bd      	mov	sp, r7
 8000248:	bd80      	pop	{r7, pc}
 800024a:	46c0      	nop			@ (mov r8, r8)
 800024c:	2000008c 	.word	0x2000008c
 8000250:	20000134 	.word	0x20000134

08000254 <UartRx_Circular_Reset>:

void UartRx_Circular_Reset(void) {
 8000254:	b580      	push	{r7, lr}
 8000256:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000258:	b672      	cpsid	i
}
 800025a:	46c0      	nop			@ (mov r8, r8)
    __disable_irq();
    oldPos = 0;
 800025c:	4b0f      	ldr	r3, [pc, #60]	@ (800029c <UartRx_Circular_Reset+0x48>)
 800025e:	2200      	movs	r2, #0
 8000260:	801a      	strh	r2, [r3, #0]
    newPos = RX_BUFFER_SIZE - __HAL_DMA_GET_COUNTER(huart2.hdmarx); // snapshot if needed
 8000262:	4b0f      	ldr	r3, [pc, #60]	@ (80002a0 <UartRx_Circular_Reset+0x4c>)
 8000264:	2280      	movs	r2, #128	@ 0x80
 8000266:	589b      	ldr	r3, [r3, r2]
 8000268:	681b      	ldr	r3, [r3, #0]
 800026a:	685b      	ldr	r3, [r3, #4]
 800026c:	b29b      	uxth	r3, r3
 800026e:	224d      	movs	r2, #77	@ 0x4d
 8000270:	1ad3      	subs	r3, r2, r3
 8000272:	b29a      	uxth	r2, r3
 8000274:	4b0b      	ldr	r3, [pc, #44]	@ (80002a4 <UartRx_Circular_Reset+0x50>)
 8000276:	801a      	strh	r2, [r3, #0]
    dataReady = 0;
 8000278:	4b0b      	ldr	r3, [pc, #44]	@ (80002a8 <UartRx_Circular_Reset+0x54>)
 800027a:	2200      	movs	r2, #0
 800027c:	701a      	strb	r2, [r3, #0]
    dataLength = 0;
 800027e:	4b0b      	ldr	r3, [pc, #44]	@ (80002ac <UartRx_Circular_Reset+0x58>)
 8000280:	2200      	movs	r2, #0
 8000282:	801a      	strh	r2, [r3, #0]
    memset(rxBuffer, 0, RX_BUFFER_SIZE); // optional
 8000284:	4b0a      	ldr	r3, [pc, #40]	@ (80002b0 <UartRx_Circular_Reset+0x5c>)
 8000286:	224d      	movs	r2, #77	@ 0x4d
 8000288:	2100      	movs	r1, #0
 800028a:	0018      	movs	r0, r3
 800028c:	f002 ff7c 	bl	8003188 <memset>
  __ASM volatile ("cpsie i" : : : "memory");
 8000290:	b662      	cpsie	i
}
 8000292:	46c0      	nop			@ (mov r8, r8)
    __enable_irq();
}
 8000294:	46c0      	nop			@ (mov r8, r8)
 8000296:	46bd      	mov	sp, r7
 8000298:	bd80      	pop	{r7, pc}
 800029a:	46c0      	nop			@ (mov r8, r8)
 800029c:	200000da 	.word	0x200000da
 80002a0:	20000134 	.word	0x20000134
 80002a4:	200000dc 	.word	0x200000dc
 80002a8:	200000de 	.word	0x200000de
 80002ac:	200000e0 	.word	0x200000e0
 80002b0:	2000008c 	.word	0x2000008c

080002b4 <processData>:

void processData(void){
 80002b4:	b580      	push	{r7, lr}
 80002b6:	af00      	add	r7, sp, #0
	if(processedData[0] == 0xAA && processedData[1] == 0x55){
 80002b8:	4b0c      	ldr	r3, [pc, #48]	@ (80002ec <processData+0x38>)
 80002ba:	781b      	ldrb	r3, [r3, #0]
 80002bc:	2baa      	cmp	r3, #170	@ 0xaa
 80002be:	d10a      	bne.n	80002d6 <processData+0x22>
 80002c0:	4b0a      	ldr	r3, [pc, #40]	@ (80002ec <processData+0x38>)
 80002c2:	785b      	ldrb	r3, [r3, #1]
 80002c4:	2b55      	cmp	r3, #85	@ 0x55
 80002c6:	d106      	bne.n	80002d6 <processData+0x22>
		HAL_UART_Transmit(&huart2, &header_good_byte, 1, 100);
 80002c8:	4909      	ldr	r1, [pc, #36]	@ (80002f0 <processData+0x3c>)
 80002ca:	480a      	ldr	r0, [pc, #40]	@ (80002f4 <processData+0x40>)
 80002cc:	2364      	movs	r3, #100	@ 0x64
 80002ce:	2201      	movs	r2, #1
 80002d0:	f001 fdba 	bl	8001e48 <HAL_UART_Transmit>
 80002d4:	e006      	b.n	80002e4 <processData+0x30>
	} else {
		HAL_UART_Transmit(&huart2, &header_bad_byte, 1, 100);
 80002d6:	4908      	ldr	r1, [pc, #32]	@ (80002f8 <processData+0x44>)
 80002d8:	4806      	ldr	r0, [pc, #24]	@ (80002f4 <processData+0x40>)
 80002da:	2364      	movs	r3, #100	@ 0x64
 80002dc:	2201      	movs	r2, #1
 80002de:	f001 fdb3 	bl	8001e48 <HAL_UART_Transmit>
	}
}
 80002e2:	46c0      	nop			@ (mov r8, r8)
 80002e4:	46c0      	nop			@ (mov r8, r8)
 80002e6:	46bd      	mov	sp, r7
 80002e8:	bd80      	pop	{r7, pc}
 80002ea:	46c0      	nop			@ (mov r8, r8)
 80002ec:	200000e4 	.word	0x200000e4
 80002f0:	20000002 	.word	0x20000002
 80002f4:	20000134 	.word	0x20000134
 80002f8:	20000003 	.word	0x20000003

080002fc <ProcessReceivedData>:
 * @param data: pointer to received data
 * @param length: length of received data
 * @retval 1 if data is valid, 0 if invalid
 */
uint8_t ProcessReceivedData(uint8_t* data, uint16_t length)
{
 80002fc:	b580      	push	{r7, lr}
 80002fe:	b082      	sub	sp, #8
 8000300:	af00      	add	r7, sp, #0
 8000302:	6078      	str	r0, [r7, #4]
 8000304:	000a      	movs	r2, r1
 8000306:	1cbb      	adds	r3, r7, #2
 8000308:	801a      	strh	r2, [r3, #0]
    if (length == 0 || length > RX_BUFFER_SIZE) return 0;
 800030a:	1cbb      	adds	r3, r7, #2
 800030c:	881b      	ldrh	r3, [r3, #0]
 800030e:	2b00      	cmp	r3, #0
 8000310:	d003      	beq.n	800031a <ProcessReceivedData+0x1e>
 8000312:	1cbb      	adds	r3, r7, #2
 8000314:	881b      	ldrh	r3, [r3, #0]
 8000316:	2b4d      	cmp	r3, #77	@ 0x4d
 8000318:	d901      	bls.n	800031e <ProcessReceivedData+0x22>
 800031a:	2300      	movs	r3, #0
 800031c:	e017      	b.n	800034e <ProcessReceivedData+0x52>
    else if (length == 76){
 800031e:	1cbb      	adds	r3, r7, #2
 8000320:	881b      	ldrh	r3, [r3, #0]
 8000322:	2b4c      	cmp	r3, #76	@ 0x4c
 8000324:	d10a      	bne.n	800033c <ProcessReceivedData+0x40>
		memcpy(processedData, data, length);
 8000326:	1cbb      	adds	r3, r7, #2
 8000328:	881a      	ldrh	r2, [r3, #0]
 800032a:	6879      	ldr	r1, [r7, #4]
 800032c:	4b0a      	ldr	r3, [pc, #40]	@ (8000358 <ProcessReceivedData+0x5c>)
 800032e:	0018      	movs	r0, r3
 8000330:	f002 ffad 	bl	800328e <memcpy>
		processData();
 8000334:	f7ff ffbe 	bl	80002b4 <processData>
		return 1;
 8000338:	2301      	movs	r3, #1
 800033a:	e008      	b.n	800034e <ProcessReceivedData+0x52>
    }
    else if (length < 76){
 800033c:	1cbb      	adds	r3, r7, #2
 800033e:	881b      	ldrh	r3, [r3, #0]
 8000340:	2b4b      	cmp	r3, #75	@ 0x4b
 8000342:	d803      	bhi.n	800034c <ProcessReceivedData+0x50>
    	UartRx_Circular_Reset();
 8000344:	f7ff ff86 	bl	8000254 <UartRx_Circular_Reset>
    	return 2;
 8000348:	2302      	movs	r3, #2
 800034a:	e000      	b.n	800034e <ProcessReceivedData+0x52>
    }
    return 3;
 800034c:	2303      	movs	r3, #3
}
 800034e:	0018      	movs	r0, r3
 8000350:	46bd      	mov	sp, r7
 8000352:	b002      	add	sp, #8
 8000354:	bd80      	pop	{r7, pc}
 8000356:	46c0      	nop			@ (mov r8, r8)
 8000358:	200000e4 	.word	0x200000e4

0800035c <SendAcknowledgment>:


void SendAcknowledgment(int isValid)
{
 800035c:	b580      	push	{r7, lr}
 800035e:	b082      	sub	sp, #8
 8000360:	af00      	add	r7, sp, #0
 8000362:	6078      	str	r0, [r7, #4]
    if (isValid == 0) {
 8000364:	687b      	ldr	r3, [r7, #4]
 8000366:	2b00      	cmp	r3, #0
 8000368:	d106      	bne.n	8000378 <SendAcknowledgment+0x1c>
        HAL_UART_Transmit(&huart2, &nackByte, 1, 100);
 800036a:	4912      	ldr	r1, [pc, #72]	@ (80003b4 <SendAcknowledgment+0x58>)
 800036c:	4812      	ldr	r0, [pc, #72]	@ (80003b8 <SendAcknowledgment+0x5c>)
 800036e:	2364      	movs	r3, #100	@ 0x64
 8000370:	2201      	movs	r2, #1
 8000372:	f001 fd69 	bl	8001e48 <HAL_UART_Transmit>
    } else if (isValid == 2){
    	HAL_UART_Transmit(&huart2, &errorByte1, 1, 100);
    } else {
    	HAL_UART_Transmit(&huart2, &errorByte2, 1, 100);
    }
}
 8000376:	e019      	b.n	80003ac <SendAcknowledgment+0x50>
    } else if (isValid == 1){
 8000378:	687b      	ldr	r3, [r7, #4]
 800037a:	2b01      	cmp	r3, #1
 800037c:	d106      	bne.n	800038c <SendAcknowledgment+0x30>
        HAL_UART_Transmit(&huart2, &ackByte, 1, 100);
 800037e:	490f      	ldr	r1, [pc, #60]	@ (80003bc <SendAcknowledgment+0x60>)
 8000380:	480d      	ldr	r0, [pc, #52]	@ (80003b8 <SendAcknowledgment+0x5c>)
 8000382:	2364      	movs	r3, #100	@ 0x64
 8000384:	2201      	movs	r2, #1
 8000386:	f001 fd5f 	bl	8001e48 <HAL_UART_Transmit>
}
 800038a:	e00f      	b.n	80003ac <SendAcknowledgment+0x50>
    } else if (isValid == 2){
 800038c:	687b      	ldr	r3, [r7, #4]
 800038e:	2b02      	cmp	r3, #2
 8000390:	d106      	bne.n	80003a0 <SendAcknowledgment+0x44>
    	HAL_UART_Transmit(&huart2, &errorByte1, 1, 100);
 8000392:	490b      	ldr	r1, [pc, #44]	@ (80003c0 <SendAcknowledgment+0x64>)
 8000394:	4808      	ldr	r0, [pc, #32]	@ (80003b8 <SendAcknowledgment+0x5c>)
 8000396:	2364      	movs	r3, #100	@ 0x64
 8000398:	2201      	movs	r2, #1
 800039a:	f001 fd55 	bl	8001e48 <HAL_UART_Transmit>
}
 800039e:	e005      	b.n	80003ac <SendAcknowledgment+0x50>
    	HAL_UART_Transmit(&huart2, &errorByte2, 1, 100);
 80003a0:	4908      	ldr	r1, [pc, #32]	@ (80003c4 <SendAcknowledgment+0x68>)
 80003a2:	4805      	ldr	r0, [pc, #20]	@ (80003b8 <SendAcknowledgment+0x5c>)
 80003a4:	2364      	movs	r3, #100	@ 0x64
 80003a6:	2201      	movs	r2, #1
 80003a8:	f001 fd4e 	bl	8001e48 <HAL_UART_Transmit>
}
 80003ac:	46c0      	nop			@ (mov r8, r8)
 80003ae:	46bd      	mov	sp, r7
 80003b0:	b002      	add	sp, #8
 80003b2:	bd80      	pop	{r7, pc}
 80003b4:	20000001 	.word	0x20000001
 80003b8:	20000134 	.word	0x20000134
 80003bc:	20000000 	.word	0x20000000
 80003c0:	20000004 	.word	0x20000004
 80003c4:	20000005 	.word	0x20000005

080003c8 <CheckForNewData>:

/**
 * @brief Check for new data in circular DMA buffer
 */
void CheckForNewData(void)
{
 80003c8:	b590      	push	{r4, r7, lr}
 80003ca:	b083      	sub	sp, #12
 80003cc:	af00      	add	r7, sp, #0
    newPos = RX_BUFFER_SIZE - __HAL_DMA_GET_COUNTER(huart2.hdmarx);
 80003ce:	4b40      	ldr	r3, [pc, #256]	@ (80004d0 <CheckForNewData+0x108>)
 80003d0:	2280      	movs	r2, #128	@ 0x80
 80003d2:	589b      	ldr	r3, [r3, r2]
 80003d4:	681b      	ldr	r3, [r3, #0]
 80003d6:	685b      	ldr	r3, [r3, #4]
 80003d8:	b29b      	uxth	r3, r3
 80003da:	224d      	movs	r2, #77	@ 0x4d
 80003dc:	1ad3      	subs	r3, r2, r3
 80003de:	b29a      	uxth	r2, r3
 80003e0:	4b3c      	ldr	r3, [pc, #240]	@ (80004d4 <CheckForNewData+0x10c>)
 80003e2:	801a      	strh	r2, [r3, #0]

    if(newPos != oldPos)
 80003e4:	4b3b      	ldr	r3, [pc, #236]	@ (80004d4 <CheckForNewData+0x10c>)
 80003e6:	881b      	ldrh	r3, [r3, #0]
 80003e8:	b29a      	uxth	r2, r3
 80003ea:	4b3b      	ldr	r3, [pc, #236]	@ (80004d8 <CheckForNewData+0x110>)
 80003ec:	881b      	ldrh	r3, [r3, #0]
 80003ee:	b29b      	uxth	r3, r3
 80003f0:	429a      	cmp	r2, r3
 80003f2:	d068      	beq.n	80004c6 <CheckForNewData+0xfe>
    {
        if(newPos > oldPos)
 80003f4:	4b37      	ldr	r3, [pc, #220]	@ (80004d4 <CheckForNewData+0x10c>)
 80003f6:	881b      	ldrh	r3, [r3, #0]
 80003f8:	b29a      	uxth	r2, r3
 80003fa:	4b37      	ldr	r3, [pc, #220]	@ (80004d8 <CheckForNewData+0x110>)
 80003fc:	881b      	ldrh	r3, [r3, #0]
 80003fe:	b29b      	uxth	r3, r3
 8000400:	429a      	cmp	r2, r3
 8000402:	d91f      	bls.n	8000444 <CheckForNewData+0x7c>
        {
            // Normal case: no buffer wrap-around
            dataLength = newPos - oldPos;
 8000404:	4b33      	ldr	r3, [pc, #204]	@ (80004d4 <CheckForNewData+0x10c>)
 8000406:	881b      	ldrh	r3, [r3, #0]
 8000408:	b29a      	uxth	r2, r3
 800040a:	4b33      	ldr	r3, [pc, #204]	@ (80004d8 <CheckForNewData+0x110>)
 800040c:	881b      	ldrh	r3, [r3, #0]
 800040e:	b29b      	uxth	r3, r3
 8000410:	1ad3      	subs	r3, r2, r3
 8000412:	b29a      	uxth	r2, r3
 8000414:	4b31      	ldr	r3, [pc, #196]	@ (80004dc <CheckForNewData+0x114>)
 8000416:	801a      	strh	r2, [r3, #0]

            // Process data from oldPos to newPos
            uint8_t isValid = ProcessReceivedData(&rxBuffer[oldPos], dataLength);
 8000418:	4b2f      	ldr	r3, [pc, #188]	@ (80004d8 <CheckForNewData+0x110>)
 800041a:	881b      	ldrh	r3, [r3, #0]
 800041c:	b29b      	uxth	r3, r3
 800041e:	001a      	movs	r2, r3
 8000420:	4b2f      	ldr	r3, [pc, #188]	@ (80004e0 <CheckForNewData+0x118>)
 8000422:	18d2      	adds	r2, r2, r3
 8000424:	4b2d      	ldr	r3, [pc, #180]	@ (80004dc <CheckForNewData+0x114>)
 8000426:	881b      	ldrh	r3, [r3, #0]
 8000428:	b29b      	uxth	r3, r3
 800042a:	1cbc      	adds	r4, r7, #2
 800042c:	0019      	movs	r1, r3
 800042e:	0010      	movs	r0, r2
 8000430:	f7ff ff64 	bl	80002fc <ProcessReceivedData>
 8000434:	0003      	movs	r3, r0
 8000436:	7023      	strb	r3, [r4, #0]
            SendAcknowledgment(isValid);
 8000438:	1cbb      	adds	r3, r7, #2
 800043a:	781b      	ldrb	r3, [r3, #0]
 800043c:	0018      	movs	r0, r3
 800043e:	f7ff ff8d 	bl	800035c <SendAcknowledgment>
 8000442:	e038      	b.n	80004b6 <CheckForNewData+0xee>
        }
        else
        {
            // Buffer wrap-around case
            uint16_t firstPart = RX_BUFFER_SIZE - oldPos;
 8000444:	4b24      	ldr	r3, [pc, #144]	@ (80004d8 <CheckForNewData+0x110>)
 8000446:	881b      	ldrh	r3, [r3, #0]
 8000448:	b29a      	uxth	r2, r3
 800044a:	1dbb      	adds	r3, r7, #6
 800044c:	214d      	movs	r1, #77	@ 0x4d
 800044e:	1a8a      	subs	r2, r1, r2
 8000450:	801a      	strh	r2, [r3, #0]
            uint16_t secondPart = newPos;
 8000452:	1d3b      	adds	r3, r7, #4
 8000454:	4a1f      	ldr	r2, [pc, #124]	@ (80004d4 <CheckForNewData+0x10c>)
 8000456:	8812      	ldrh	r2, [r2, #0]
 8000458:	801a      	strh	r2, [r3, #0]

            // Copy first part
            memcpy(processedData, &rxBuffer[oldPos], firstPart);
 800045a:	4b1f      	ldr	r3, [pc, #124]	@ (80004d8 <CheckForNewData+0x110>)
 800045c:	881b      	ldrh	r3, [r3, #0]
 800045e:	b29b      	uxth	r3, r3
 8000460:	001a      	movs	r2, r3
 8000462:	4b1f      	ldr	r3, [pc, #124]	@ (80004e0 <CheckForNewData+0x118>)
 8000464:	18d1      	adds	r1, r2, r3
 8000466:	1dbb      	adds	r3, r7, #6
 8000468:	881a      	ldrh	r2, [r3, #0]
 800046a:	4b1e      	ldr	r3, [pc, #120]	@ (80004e4 <CheckForNewData+0x11c>)
 800046c:	0018      	movs	r0, r3
 800046e:	f002 ff0e 	bl	800328e <memcpy>
            // Copy second part
            memcpy(&processedData[firstPart], &rxBuffer[0], secondPart);
 8000472:	1dbb      	adds	r3, r7, #6
 8000474:	881a      	ldrh	r2, [r3, #0]
 8000476:	4b1b      	ldr	r3, [pc, #108]	@ (80004e4 <CheckForNewData+0x11c>)
 8000478:	18d0      	adds	r0, r2, r3
 800047a:	1d3b      	adds	r3, r7, #4
 800047c:	881a      	ldrh	r2, [r3, #0]
 800047e:	4b18      	ldr	r3, [pc, #96]	@ (80004e0 <CheckForNewData+0x118>)
 8000480:	0019      	movs	r1, r3
 8000482:	f002 ff04 	bl	800328e <memcpy>

            dataLength = firstPart + secondPart;
 8000486:	1dba      	adds	r2, r7, #6
 8000488:	1d3b      	adds	r3, r7, #4
 800048a:	8812      	ldrh	r2, [r2, #0]
 800048c:	881b      	ldrh	r3, [r3, #0]
 800048e:	18d3      	adds	r3, r2, r3
 8000490:	b29a      	uxth	r2, r3
 8000492:	4b12      	ldr	r3, [pc, #72]	@ (80004dc <CheckForNewData+0x114>)
 8000494:	801a      	strh	r2, [r3, #0]

            uint8_t isValid = ProcessReceivedData(processedData, dataLength);
 8000496:	4b11      	ldr	r3, [pc, #68]	@ (80004dc <CheckForNewData+0x114>)
 8000498:	881b      	ldrh	r3, [r3, #0]
 800049a:	b29a      	uxth	r2, r3
 800049c:	1cfc      	adds	r4, r7, #3
 800049e:	4b11      	ldr	r3, [pc, #68]	@ (80004e4 <CheckForNewData+0x11c>)
 80004a0:	0011      	movs	r1, r2
 80004a2:	0018      	movs	r0, r3
 80004a4:	f7ff ff2a 	bl	80002fc <ProcessReceivedData>
 80004a8:	0003      	movs	r3, r0
 80004aa:	7023      	strb	r3, [r4, #0]
            SendAcknowledgment(isValid);
 80004ac:	1cfb      	adds	r3, r7, #3
 80004ae:	781b      	ldrb	r3, [r3, #0]
 80004b0:	0018      	movs	r0, r3
 80004b2:	f7ff ff53 	bl	800035c <SendAcknowledgment>
        }

        oldPos = newPos;
 80004b6:	4b07      	ldr	r3, [pc, #28]	@ (80004d4 <CheckForNewData+0x10c>)
 80004b8:	881b      	ldrh	r3, [r3, #0]
 80004ba:	b29a      	uxth	r2, r3
 80004bc:	4b06      	ldr	r3, [pc, #24]	@ (80004d8 <CheckForNewData+0x110>)
 80004be:	801a      	strh	r2, [r3, #0]
        dataReady = 1;
 80004c0:	4b09      	ldr	r3, [pc, #36]	@ (80004e8 <CheckForNewData+0x120>)
 80004c2:	2201      	movs	r2, #1
 80004c4:	701a      	strb	r2, [r3, #0]
    }
}
 80004c6:	46c0      	nop			@ (mov r8, r8)
 80004c8:	46bd      	mov	sp, r7
 80004ca:	b003      	add	sp, #12
 80004cc:	bd90      	pop	{r4, r7, pc}
 80004ce:	46c0      	nop			@ (mov r8, r8)
 80004d0:	20000134 	.word	0x20000134
 80004d4:	200000dc 	.word	0x200000dc
 80004d8:	200000da 	.word	0x200000da
 80004dc:	200000e0 	.word	0x200000e0
 80004e0:	2000008c 	.word	0x2000008c
 80004e4:	200000e4 	.word	0x200000e4
 80004e8:	200000de 	.word	0x200000de

080004ec <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004ec:	b580      	push	{r7, lr}
 80004ee:	b082      	sub	sp, #8
 80004f0:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004f2:	f000 faf6 	bl	8000ae2 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004f6:	f000 f851 	bl	800059c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004fa:	f000 f923 	bl	8000744 <MX_GPIO_Init>
  MX_DMA_Init();
 80004fe:	f000 f903 	bl	8000708 <MX_DMA_Init>
  MX_USART2_UART_Init();
 8000502:	f000 f897 	bl	8000634 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */

  UART_DMA_Init();
 8000506:	f7ff fe95 	bl	8000234 <UART_DMA_Init>
  while (1)
  {
    /* USER CODE END WHILE */

	  // Check for new data periodically
	          CheckForNewData();
 800050a:	f7ff ff5d 	bl	80003c8 <CheckForNewData>

	          // Process received data if available
	          if(dataReady)
 800050e:	4b1d      	ldr	r3, [pc, #116]	@ (8000584 <main+0x98>)
 8000510:	781b      	ldrb	r3, [r3, #0]
 8000512:	b2db      	uxtb	r3, r3
 8000514:	2b00      	cmp	r3, #0
 8000516:	d026      	beq.n	8000566 <main+0x7a>
	          {
	              dataReady = 0;
 8000518:	4b1a      	ldr	r3, [pc, #104]	@ (8000584 <main+0x98>)
 800051a:	2200      	movs	r2, #0
 800051c:	701a      	strb	r2, [r3, #0]

	              // Your data processing logic here
	              printf("Received %d bytes of data\r\n", dataLength);
 800051e:	4b1a      	ldr	r3, [pc, #104]	@ (8000588 <main+0x9c>)
 8000520:	881b      	ldrh	r3, [r3, #0]
 8000522:	b29b      	uxth	r3, r3
 8000524:	001a      	movs	r2, r3
 8000526:	4b19      	ldr	r3, [pc, #100]	@ (800058c <main+0xa0>)
 8000528:	0011      	movs	r1, r2
 800052a:	0018      	movs	r0, r3
 800052c:	f002 fcd0 	bl	8002ed0 <iprintf>

	              // Optional: Print received data (for debugging)
	              for(int i = 0; i < dataLength; i++)
 8000530:	2300      	movs	r3, #0
 8000532:	607b      	str	r3, [r7, #4]
 8000534:	e00c      	b.n	8000550 <main+0x64>
	              {
	                  printf("%02X ", processedData[i]);
 8000536:	4a16      	ldr	r2, [pc, #88]	@ (8000590 <main+0xa4>)
 8000538:	687b      	ldr	r3, [r7, #4]
 800053a:	18d3      	adds	r3, r2, r3
 800053c:	781b      	ldrb	r3, [r3, #0]
 800053e:	001a      	movs	r2, r3
 8000540:	4b14      	ldr	r3, [pc, #80]	@ (8000594 <main+0xa8>)
 8000542:	0011      	movs	r1, r2
 8000544:	0018      	movs	r0, r3
 8000546:	f002 fcc3 	bl	8002ed0 <iprintf>
	              for(int i = 0; i < dataLength; i++)
 800054a:	687b      	ldr	r3, [r7, #4]
 800054c:	3301      	adds	r3, #1
 800054e:	607b      	str	r3, [r7, #4]
 8000550:	4b0d      	ldr	r3, [pc, #52]	@ (8000588 <main+0x9c>)
 8000552:	881b      	ldrh	r3, [r3, #0]
 8000554:	b29b      	uxth	r3, r3
 8000556:	001a      	movs	r2, r3
 8000558:	687b      	ldr	r3, [r7, #4]
 800055a:	4293      	cmp	r3, r2
 800055c:	dbeb      	blt.n	8000536 <main+0x4a>
	              }
	              printf("\r\n");
 800055e:	4b0e      	ldr	r3, [pc, #56]	@ (8000598 <main+0xac>)
 8000560:	0018      	movs	r0, r3
 8000562:	f002 fd1b 	bl	8002f9c <puts>
	          }

	          HAL_Delay(10); // Small delay to prevent overwhelming the system
 8000566:	200a      	movs	r0, #10
 8000568:	f000 fb38 	bl	8000bdc <HAL_Delay>
	  HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);
 800056c:	23a0      	movs	r3, #160	@ 0xa0
 800056e:	05db      	lsls	r3, r3, #23
 8000570:	2120      	movs	r1, #32
 8000572:	0018      	movs	r0, r3
 8000574:	f001 f883 	bl	800167e <HAL_GPIO_TogglePin>
	  HAL_Delay(300);
 8000578:	2396      	movs	r3, #150	@ 0x96
 800057a:	005b      	lsls	r3, r3, #1
 800057c:	0018      	movs	r0, r3
 800057e:	f000 fb2d 	bl	8000bdc <HAL_Delay>
	          CheckForNewData();
 8000582:	e7c2      	b.n	800050a <main+0x1e>
 8000584:	200000de 	.word	0x200000de
 8000588:	200000e0 	.word	0x200000e0
 800058c:	08003cf0 	.word	0x08003cf0
 8000590:	200000e4 	.word	0x200000e4
 8000594:	08003d0c 	.word	0x08003d0c
 8000598:	08003d14 	.word	0x08003d14

0800059c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800059c:	b590      	push	{r4, r7, lr}
 800059e:	b08d      	sub	sp, #52	@ 0x34
 80005a0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005a2:	2414      	movs	r4, #20
 80005a4:	193b      	adds	r3, r7, r4
 80005a6:	0018      	movs	r0, r3
 80005a8:	231c      	movs	r3, #28
 80005aa:	001a      	movs	r2, r3
 80005ac:	2100      	movs	r1, #0
 80005ae:	f002 fdeb 	bl	8003188 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80005b2:	003b      	movs	r3, r7
 80005b4:	0018      	movs	r0, r3
 80005b6:	2314      	movs	r3, #20
 80005b8:	001a      	movs	r2, r3
 80005ba:	2100      	movs	r1, #0
 80005bc:	f002 fde4 	bl	8003188 <memset>

  __HAL_FLASH_SET_LATENCY(FLASH_LATENCY_0);
 80005c0:	4b1b      	ldr	r3, [pc, #108]	@ (8000630 <SystemClock_Config+0x94>)
 80005c2:	681a      	ldr	r2, [r3, #0]
 80005c4:	4b1a      	ldr	r3, [pc, #104]	@ (8000630 <SystemClock_Config+0x94>)
 80005c6:	2107      	movs	r1, #7
 80005c8:	438a      	bics	r2, r1
 80005ca:	601a      	str	r2, [r3, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80005cc:	193b      	adds	r3, r7, r4
 80005ce:	2202      	movs	r2, #2
 80005d0:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80005d2:	193b      	adds	r3, r7, r4
 80005d4:	2280      	movs	r2, #128	@ 0x80
 80005d6:	0052      	lsls	r2, r2, #1
 80005d8:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV4;
 80005da:	193b      	adds	r3, r7, r4
 80005dc:	2280      	movs	r2, #128	@ 0x80
 80005de:	0152      	lsls	r2, r2, #5
 80005e0:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80005e2:	193b      	adds	r3, r7, r4
 80005e4:	2240      	movs	r2, #64	@ 0x40
 80005e6:	615a      	str	r2, [r3, #20]
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80005e8:	193b      	adds	r3, r7, r4
 80005ea:	0018      	movs	r0, r3
 80005ec:	f001 f862 	bl	80016b4 <HAL_RCC_OscConfig>
 80005f0:	1e03      	subs	r3, r0, #0
 80005f2:	d001      	beq.n	80005f8 <SystemClock_Config+0x5c>
  {
    Error_Handler();
 80005f4:	f000 f8dc 	bl	80007b0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80005f8:	003b      	movs	r3, r7
 80005fa:	2207      	movs	r2, #7
 80005fc:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80005fe:	003b      	movs	r3, r7
 8000600:	2200      	movs	r2, #0
 8000602:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000604:	003b      	movs	r3, r7
 8000606:	2200      	movs	r2, #0
 8000608:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 800060a:	003b      	movs	r3, r7
 800060c:	2200      	movs	r2, #0
 800060e:	60da      	str	r2, [r3, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV1;
 8000610:	003b      	movs	r3, r7
 8000612:	2200      	movs	r2, #0
 8000614:	611a      	str	r2, [r3, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000616:	003b      	movs	r3, r7
 8000618:	2100      	movs	r1, #0
 800061a:	0018      	movs	r0, r3
 800061c:	f001 fa2e 	bl	8001a7c <HAL_RCC_ClockConfig>
 8000620:	1e03      	subs	r3, r0, #0
 8000622:	d001      	beq.n	8000628 <SystemClock_Config+0x8c>
  {
    Error_Handler();
 8000624:	f000 f8c4 	bl	80007b0 <Error_Handler>
  }
}
 8000628:	46c0      	nop			@ (mov r8, r8)
 800062a:	46bd      	mov	sp, r7
 800062c:	b00d      	add	sp, #52	@ 0x34
 800062e:	bd90      	pop	{r4, r7, pc}
 8000630:	40022000 	.word	0x40022000

08000634 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000634:	b580      	push	{r7, lr}
 8000636:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000638:	4b16      	ldr	r3, [pc, #88]	@ (8000694 <MX_USART2_UART_Init+0x60>)
 800063a:	4a17      	ldr	r2, [pc, #92]	@ (8000698 <MX_USART2_UART_Init+0x64>)
 800063c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800063e:	4b15      	ldr	r3, [pc, #84]	@ (8000694 <MX_USART2_UART_Init+0x60>)
 8000640:	22e1      	movs	r2, #225	@ 0xe1
 8000642:	0252      	lsls	r2, r2, #9
 8000644:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000646:	4b13      	ldr	r3, [pc, #76]	@ (8000694 <MX_USART2_UART_Init+0x60>)
 8000648:	2200      	movs	r2, #0
 800064a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800064c:	4b11      	ldr	r3, [pc, #68]	@ (8000694 <MX_USART2_UART_Init+0x60>)
 800064e:	2200      	movs	r2, #0
 8000650:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000652:	4b10      	ldr	r3, [pc, #64]	@ (8000694 <MX_USART2_UART_Init+0x60>)
 8000654:	2200      	movs	r2, #0
 8000656:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000658:	4b0e      	ldr	r3, [pc, #56]	@ (8000694 <MX_USART2_UART_Init+0x60>)
 800065a:	220c      	movs	r2, #12
 800065c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800065e:	4b0d      	ldr	r3, [pc, #52]	@ (8000694 <MX_USART2_UART_Init+0x60>)
 8000660:	2200      	movs	r2, #0
 8000662:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000664:	4b0b      	ldr	r3, [pc, #44]	@ (8000694 <MX_USART2_UART_Init+0x60>)
 8000666:	2200      	movs	r2, #0
 8000668:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800066a:	4b0a      	ldr	r3, [pc, #40]	@ (8000694 <MX_USART2_UART_Init+0x60>)
 800066c:	2200      	movs	r2, #0
 800066e:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000670:	4b08      	ldr	r3, [pc, #32]	@ (8000694 <MX_USART2_UART_Init+0x60>)
 8000672:	2200      	movs	r2, #0
 8000674:	625a      	str	r2, [r3, #36]	@ 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000676:	4b07      	ldr	r3, [pc, #28]	@ (8000694 <MX_USART2_UART_Init+0x60>)
 8000678:	2200      	movs	r2, #0
 800067a:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800067c:	4b05      	ldr	r3, [pc, #20]	@ (8000694 <MX_USART2_UART_Init+0x60>)
 800067e:	0018      	movs	r0, r3
 8000680:	f001 fb8c 	bl	8001d9c <HAL_UART_Init>
 8000684:	1e03      	subs	r3, r0, #0
 8000686:	d001      	beq.n	800068c <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 8000688:	f000 f892 	bl	80007b0 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800068c:	46c0      	nop			@ (mov r8, r8)
 800068e:	46bd      	mov	sp, r7
 8000690:	bd80      	pop	{r7, pc}
 8000692:	46c0      	nop			@ (mov r8, r8)
 8000694:	20000134 	.word	0x20000134
 8000698:	40004400 	.word	0x40004400

0800069c <HAL_UART_ErrorCallback>:

void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800069c:	b580      	push	{r7, lr}
 800069e:	b082      	sub	sp, #8
 80006a0:	af00      	add	r7, sp, #0
 80006a2:	6078      	str	r0, [r7, #4]
    if(huart->Instance == USART2)
 80006a4:	687b      	ldr	r3, [r7, #4]
 80006a6:	681b      	ldr	r3, [r3, #0]
 80006a8:	4a0b      	ldr	r2, [pc, #44]	@ (80006d8 <HAL_UART_ErrorCallback+0x3c>)
 80006aa:	4293      	cmp	r3, r2
 80006ac:	d110      	bne.n	80006d0 <HAL_UART_ErrorCallback+0x34>
    {
        // Handle UART errors
        printf("UART Error occurred\r\n");
 80006ae:	4b0b      	ldr	r3, [pc, #44]	@ (80006dc <HAL_UART_ErrorCallback+0x40>)
 80006b0:	0018      	movs	r0, r3
 80006b2:	f002 fc73 	bl	8002f9c <puts>

        // Restart DMA reception
        HAL_UART_DMAStop(&huart2);
 80006b6:	4b0a      	ldr	r3, [pc, #40]	@ (80006e0 <HAL_UART_ErrorCallback+0x44>)
 80006b8:	0018      	movs	r0, r3
 80006ba:	f001 fcc0 	bl	800203e <HAL_UART_DMAStop>
        HAL_UART_Receive_DMA(&huart2, rxBuffer, RX_BUFFER_SIZE);
 80006be:	4909      	ldr	r1, [pc, #36]	@ (80006e4 <HAL_UART_ErrorCallback+0x48>)
 80006c0:	4b07      	ldr	r3, [pc, #28]	@ (80006e0 <HAL_UART_ErrorCallback+0x44>)
 80006c2:	224d      	movs	r2, #77	@ 0x4d
 80006c4:	0018      	movs	r0, r3
 80006c6:	f001 fc63 	bl	8001f90 <HAL_UART_Receive_DMA>

        // Send NACK to indicate error
        SendAcknowledgment(0);
 80006ca:	2000      	movs	r0, #0
 80006cc:	f7ff fe46 	bl	800035c <SendAcknowledgment>
    }
}
 80006d0:	46c0      	nop			@ (mov r8, r8)
 80006d2:	46bd      	mov	sp, r7
 80006d4:	b002      	add	sp, #8
 80006d6:	bd80      	pop	{r7, pc}
 80006d8:	40004400 	.word	0x40004400
 80006dc:	08003d18 	.word	0x08003d18
 80006e0:	20000134 	.word	0x20000134
 80006e4:	2000008c 	.word	0x2000008c

080006e8 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80006e8:	b580      	push	{r7, lr}
 80006ea:	b082      	sub	sp, #8
 80006ec:	af00      	add	r7, sp, #0
 80006ee:	6078      	str	r0, [r7, #4]
    if(huart->Instance == USART2)
    {
        // Full buffer filled - can be used for additional processing
        // In circular mode, this indicates second half of buffer is full
    }
}
 80006f0:	46c0      	nop			@ (mov r8, r8)
 80006f2:	46bd      	mov	sp, r7
 80006f4:	b002      	add	sp, #8
 80006f6:	bd80      	pop	{r7, pc}

080006f8 <HAL_UART_RxHalfCpltCallback>:

void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 80006f8:	b580      	push	{r7, lr}
 80006fa:	b082      	sub	sp, #8
 80006fc:	af00      	add	r7, sp, #0
 80006fe:	6078      	str	r0, [r7, #4]
    if(huart->Instance == USART2)
    {
        // Half buffer filled - can be used for additional processing
        // In circular mode, this indicates first half of buffer is full
    }
}
 8000700:	46c0      	nop			@ (mov r8, r8)
 8000702:	46bd      	mov	sp, r7
 8000704:	b002      	add	sp, #8
 8000706:	bd80      	pop	{r7, pc}

08000708 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000708:	b580      	push	{r7, lr}
 800070a:	b082      	sub	sp, #8
 800070c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800070e:	4b0c      	ldr	r3, [pc, #48]	@ (8000740 <MX_DMA_Init+0x38>)
 8000710:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8000712:	4b0b      	ldr	r3, [pc, #44]	@ (8000740 <MX_DMA_Init+0x38>)
 8000714:	2101      	movs	r1, #1
 8000716:	430a      	orrs	r2, r1
 8000718:	639a      	str	r2, [r3, #56]	@ 0x38
 800071a:	4b09      	ldr	r3, [pc, #36]	@ (8000740 <MX_DMA_Init+0x38>)
 800071c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800071e:	2201      	movs	r2, #1
 8000720:	4013      	ands	r3, r2
 8000722:	607b      	str	r3, [r7, #4]
 8000724:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8000726:	2200      	movs	r2, #0
 8000728:	2100      	movs	r1, #0
 800072a:	2009      	movs	r0, #9
 800072c:	f000 fb26 	bl	8000d7c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8000730:	2009      	movs	r0, #9
 8000732:	f000 fb38 	bl	8000da6 <HAL_NVIC_EnableIRQ>

}
 8000736:	46c0      	nop			@ (mov r8, r8)
 8000738:	46bd      	mov	sp, r7
 800073a:	b002      	add	sp, #8
 800073c:	bd80      	pop	{r7, pc}
 800073e:	46c0      	nop			@ (mov r8, r8)
 8000740:	40021000 	.word	0x40021000

08000744 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000744:	b580      	push	{r7, lr}
 8000746:	b086      	sub	sp, #24
 8000748:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800074a:	1d3b      	adds	r3, r7, #4
 800074c:	0018      	movs	r0, r3
 800074e:	2314      	movs	r3, #20
 8000750:	001a      	movs	r2, r3
 8000752:	2100      	movs	r1, #0
 8000754:	f002 fd18 	bl	8003188 <memset>
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000758:	4b14      	ldr	r3, [pc, #80]	@ (80007ac <MX_GPIO_Init+0x68>)
 800075a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800075c:	4b13      	ldr	r3, [pc, #76]	@ (80007ac <MX_GPIO_Init+0x68>)
 800075e:	2101      	movs	r1, #1
 8000760:	430a      	orrs	r2, r1
 8000762:	635a      	str	r2, [r3, #52]	@ 0x34
 8000764:	4b11      	ldr	r3, [pc, #68]	@ (80007ac <MX_GPIO_Init+0x68>)
 8000766:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000768:	2201      	movs	r2, #1
 800076a:	4013      	ands	r3, r2
 800076c:	603b      	str	r3, [r7, #0]
 800076e:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
 8000770:	23a0      	movs	r3, #160	@ 0xa0
 8000772:	05db      	lsls	r3, r3, #23
 8000774:	2200      	movs	r2, #0
 8000776:	2120      	movs	r1, #32
 8000778:	0018      	movs	r0, r3
 800077a:	f000 ff63 	bl	8001644 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA5 */
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 800077e:	1d3b      	adds	r3, r7, #4
 8000780:	2220      	movs	r2, #32
 8000782:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000784:	1d3b      	adds	r3, r7, #4
 8000786:	2201      	movs	r2, #1
 8000788:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800078a:	1d3b      	adds	r3, r7, #4
 800078c:	2200      	movs	r2, #0
 800078e:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000790:	1d3b      	adds	r3, r7, #4
 8000792:	2200      	movs	r2, #0
 8000794:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000796:	1d3a      	adds	r2, r7, #4
 8000798:	23a0      	movs	r3, #160	@ 0xa0
 800079a:	05db      	lsls	r3, r3, #23
 800079c:	0011      	movs	r1, r2
 800079e:	0018      	movs	r0, r3
 80007a0:	f000 fdde 	bl	8001360 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 80007a4:	46c0      	nop			@ (mov r8, r8)
 80007a6:	46bd      	mov	sp, r7
 80007a8:	b006      	add	sp, #24
 80007aa:	bd80      	pop	{r7, pc}
 80007ac:	40021000 	.word	0x40021000

080007b0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80007b0:	b580      	push	{r7, lr}
 80007b2:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 80007b4:	b672      	cpsid	i
}
 80007b6:	46c0      	nop			@ (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80007b8:	46c0      	nop			@ (mov r8, r8)
 80007ba:	e7fd      	b.n	80007b8 <Error_Handler+0x8>

080007bc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80007bc:	b580      	push	{r7, lr}
 80007be:	b082      	sub	sp, #8
 80007c0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80007c2:	4b0f      	ldr	r3, [pc, #60]	@ (8000800 <HAL_MspInit+0x44>)
 80007c4:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80007c6:	4b0e      	ldr	r3, [pc, #56]	@ (8000800 <HAL_MspInit+0x44>)
 80007c8:	2101      	movs	r1, #1
 80007ca:	430a      	orrs	r2, r1
 80007cc:	641a      	str	r2, [r3, #64]	@ 0x40
 80007ce:	4b0c      	ldr	r3, [pc, #48]	@ (8000800 <HAL_MspInit+0x44>)
 80007d0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80007d2:	2201      	movs	r2, #1
 80007d4:	4013      	ands	r3, r2
 80007d6:	607b      	str	r3, [r7, #4]
 80007d8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80007da:	4b09      	ldr	r3, [pc, #36]	@ (8000800 <HAL_MspInit+0x44>)
 80007dc:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80007de:	4b08      	ldr	r3, [pc, #32]	@ (8000800 <HAL_MspInit+0x44>)
 80007e0:	2180      	movs	r1, #128	@ 0x80
 80007e2:	0549      	lsls	r1, r1, #21
 80007e4:	430a      	orrs	r2, r1
 80007e6:	63da      	str	r2, [r3, #60]	@ 0x3c
 80007e8:	4b05      	ldr	r3, [pc, #20]	@ (8000800 <HAL_MspInit+0x44>)
 80007ea:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80007ec:	2380      	movs	r3, #128	@ 0x80
 80007ee:	055b      	lsls	r3, r3, #21
 80007f0:	4013      	ands	r3, r2
 80007f2:	603b      	str	r3, [r7, #0]
 80007f4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80007f6:	46c0      	nop			@ (mov r8, r8)
 80007f8:	46bd      	mov	sp, r7
 80007fa:	b002      	add	sp, #8
 80007fc:	bd80      	pop	{r7, pc}
 80007fe:	46c0      	nop			@ (mov r8, r8)
 8000800:	40021000 	.word	0x40021000

08000804 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000804:	b590      	push	{r4, r7, lr}
 8000806:	b08b      	sub	sp, #44	@ 0x2c
 8000808:	af00      	add	r7, sp, #0
 800080a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800080c:	2414      	movs	r4, #20
 800080e:	193b      	adds	r3, r7, r4
 8000810:	0018      	movs	r0, r3
 8000812:	2314      	movs	r3, #20
 8000814:	001a      	movs	r2, r3
 8000816:	2100      	movs	r1, #0
 8000818:	f002 fcb6 	bl	8003188 <memset>
  if(huart->Instance==USART2)
 800081c:	687b      	ldr	r3, [r7, #4]
 800081e:	681b      	ldr	r3, [r3, #0]
 8000820:	4a30      	ldr	r2, [pc, #192]	@ (80008e4 <HAL_UART_MspInit+0xe0>)
 8000822:	4293      	cmp	r3, r2
 8000824:	d15a      	bne.n	80008dc <HAL_UART_MspInit+0xd8>
  {
    /* USER CODE BEGIN USART2_MspInit 0 */

    /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000826:	4b30      	ldr	r3, [pc, #192]	@ (80008e8 <HAL_UART_MspInit+0xe4>)
 8000828:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800082a:	4b2f      	ldr	r3, [pc, #188]	@ (80008e8 <HAL_UART_MspInit+0xe4>)
 800082c:	2180      	movs	r1, #128	@ 0x80
 800082e:	0289      	lsls	r1, r1, #10
 8000830:	430a      	orrs	r2, r1
 8000832:	63da      	str	r2, [r3, #60]	@ 0x3c
 8000834:	4b2c      	ldr	r3, [pc, #176]	@ (80008e8 <HAL_UART_MspInit+0xe4>)
 8000836:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8000838:	2380      	movs	r3, #128	@ 0x80
 800083a:	029b      	lsls	r3, r3, #10
 800083c:	4013      	ands	r3, r2
 800083e:	613b      	str	r3, [r7, #16]
 8000840:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000842:	4b29      	ldr	r3, [pc, #164]	@ (80008e8 <HAL_UART_MspInit+0xe4>)
 8000844:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8000846:	4b28      	ldr	r3, [pc, #160]	@ (80008e8 <HAL_UART_MspInit+0xe4>)
 8000848:	2101      	movs	r1, #1
 800084a:	430a      	orrs	r2, r1
 800084c:	635a      	str	r2, [r3, #52]	@ 0x34
 800084e:	4b26      	ldr	r3, [pc, #152]	@ (80008e8 <HAL_UART_MspInit+0xe4>)
 8000850:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000852:	2201      	movs	r2, #1
 8000854:	4013      	ands	r3, r2
 8000856:	60fb      	str	r3, [r7, #12]
 8000858:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 800085a:	0021      	movs	r1, r4
 800085c:	187b      	adds	r3, r7, r1
 800085e:	220c      	movs	r2, #12
 8000860:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000862:	187b      	adds	r3, r7, r1
 8000864:	2202      	movs	r2, #2
 8000866:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000868:	187b      	adds	r3, r7, r1
 800086a:	2200      	movs	r2, #0
 800086c:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800086e:	187b      	adds	r3, r7, r1
 8000870:	2200      	movs	r2, #0
 8000872:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART2;
 8000874:	187b      	adds	r3, r7, r1
 8000876:	2201      	movs	r2, #1
 8000878:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800087a:	187a      	adds	r2, r7, r1
 800087c:	23a0      	movs	r3, #160	@ 0xa0
 800087e:	05db      	lsls	r3, r3, #23
 8000880:	0011      	movs	r1, r2
 8000882:	0018      	movs	r0, r3
 8000884:	f000 fd6c 	bl	8001360 <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_RX Init */
    hdma_usart2_rx.Instance = DMA1_Channel1;
 8000888:	4b18      	ldr	r3, [pc, #96]	@ (80008ec <HAL_UART_MspInit+0xe8>)
 800088a:	4a19      	ldr	r2, [pc, #100]	@ (80008f0 <HAL_UART_MspInit+0xec>)
 800088c:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Request = DMA_REQUEST_USART2_RX;
 800088e:	4b17      	ldr	r3, [pc, #92]	@ (80008ec <HAL_UART_MspInit+0xe8>)
 8000890:	2234      	movs	r2, #52	@ 0x34
 8000892:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000894:	4b15      	ldr	r3, [pc, #84]	@ (80008ec <HAL_UART_MspInit+0xe8>)
 8000896:	2200      	movs	r2, #0
 8000898:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800089a:	4b14      	ldr	r3, [pc, #80]	@ (80008ec <HAL_UART_MspInit+0xe8>)
 800089c:	2200      	movs	r2, #0
 800089e:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 80008a0:	4b12      	ldr	r3, [pc, #72]	@ (80008ec <HAL_UART_MspInit+0xe8>)
 80008a2:	2280      	movs	r2, #128	@ 0x80
 80008a4:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80008a6:	4b11      	ldr	r3, [pc, #68]	@ (80008ec <HAL_UART_MspInit+0xe8>)
 80008a8:	2200      	movs	r2, #0
 80008aa:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80008ac:	4b0f      	ldr	r3, [pc, #60]	@ (80008ec <HAL_UART_MspInit+0xe8>)
 80008ae:	2200      	movs	r2, #0
 80008b0:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_CIRCULAR;
 80008b2:	4b0e      	ldr	r3, [pc, #56]	@ (80008ec <HAL_UART_MspInit+0xe8>)
 80008b4:	2220      	movs	r2, #32
 80008b6:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 80008b8:	4b0c      	ldr	r3, [pc, #48]	@ (80008ec <HAL_UART_MspInit+0xe8>)
 80008ba:	2200      	movs	r2, #0
 80008bc:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 80008be:	4b0b      	ldr	r3, [pc, #44]	@ (80008ec <HAL_UART_MspInit+0xe8>)
 80008c0:	0018      	movs	r0, r3
 80008c2:	f000 fa8d 	bl	8000de0 <HAL_DMA_Init>
 80008c6:	1e03      	subs	r3, r0, #0
 80008c8:	d001      	beq.n	80008ce <HAL_UART_MspInit+0xca>
    {
      Error_Handler();
 80008ca:	f7ff ff71 	bl	80007b0 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 80008ce:	687b      	ldr	r3, [r7, #4]
 80008d0:	2180      	movs	r1, #128	@ 0x80
 80008d2:	4a06      	ldr	r2, [pc, #24]	@ (80008ec <HAL_UART_MspInit+0xe8>)
 80008d4:	505a      	str	r2, [r3, r1]
 80008d6:	4b05      	ldr	r3, [pc, #20]	@ (80008ec <HAL_UART_MspInit+0xe8>)
 80008d8:	687a      	ldr	r2, [r7, #4]
 80008da:	629a      	str	r2, [r3, #40]	@ 0x28

    /* USER CODE END USART2_MspInit 1 */

  }

}
 80008dc:	46c0      	nop			@ (mov r8, r8)
 80008de:	46bd      	mov	sp, r7
 80008e0:	b00b      	add	sp, #44	@ 0x2c
 80008e2:	bd90      	pop	{r4, r7, pc}
 80008e4:	40004400 	.word	0x40004400
 80008e8:	40021000 	.word	0x40021000
 80008ec:	200001c8 	.word	0x200001c8
 80008f0:	40020008 	.word	0x40020008

080008f4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80008f4:	b580      	push	{r7, lr}
 80008f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80008f8:	46c0      	nop			@ (mov r8, r8)
 80008fa:	e7fd      	b.n	80008f8 <NMI_Handler+0x4>

080008fc <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80008fc:	b580      	push	{r7, lr}
 80008fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000900:	46c0      	nop			@ (mov r8, r8)
 8000902:	e7fd      	b.n	8000900 <HardFault_Handler+0x4>

08000904 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000904:	b580      	push	{r7, lr}
 8000906:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000908:	46c0      	nop			@ (mov r8, r8)
 800090a:	46bd      	mov	sp, r7
 800090c:	bd80      	pop	{r7, pc}

0800090e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800090e:	b580      	push	{r7, lr}
 8000910:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000912:	46c0      	nop			@ (mov r8, r8)
 8000914:	46bd      	mov	sp, r7
 8000916:	bd80      	pop	{r7, pc}

08000918 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000918:	b580      	push	{r7, lr}
 800091a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800091c:	f000 f942 	bl	8000ba4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000920:	46c0      	nop			@ (mov r8, r8)
 8000922:	46bd      	mov	sp, r7
 8000924:	bd80      	pop	{r7, pc}
	...

08000928 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 1 interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8000928:	b580      	push	{r7, lr}
 800092a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 800092c:	4b03      	ldr	r3, [pc, #12]	@ (800093c <DMA1_Channel1_IRQHandler+0x14>)
 800092e:	0018      	movs	r0, r3
 8000930:	f000 fbca 	bl	80010c8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8000934:	46c0      	nop			@ (mov r8, r8)
 8000936:	46bd      	mov	sp, r7
 8000938:	bd80      	pop	{r7, pc}
 800093a:	46c0      	nop			@ (mov r8, r8)
 800093c:	200001c8 	.word	0x200001c8

08000940 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000940:	b580      	push	{r7, lr}
 8000942:	b086      	sub	sp, #24
 8000944:	af00      	add	r7, sp, #0
 8000946:	60f8      	str	r0, [r7, #12]
 8000948:	60b9      	str	r1, [r7, #8]
 800094a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800094c:	2300      	movs	r3, #0
 800094e:	617b      	str	r3, [r7, #20]
 8000950:	e00a      	b.n	8000968 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000952:	e000      	b.n	8000956 <_read+0x16>
 8000954:	bf00      	nop
 8000956:	0001      	movs	r1, r0
 8000958:	68bb      	ldr	r3, [r7, #8]
 800095a:	1c5a      	adds	r2, r3, #1
 800095c:	60ba      	str	r2, [r7, #8]
 800095e:	b2ca      	uxtb	r2, r1
 8000960:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000962:	697b      	ldr	r3, [r7, #20]
 8000964:	3301      	adds	r3, #1
 8000966:	617b      	str	r3, [r7, #20]
 8000968:	697a      	ldr	r2, [r7, #20]
 800096a:	687b      	ldr	r3, [r7, #4]
 800096c:	429a      	cmp	r2, r3
 800096e:	dbf0      	blt.n	8000952 <_read+0x12>
  }

  return len;
 8000970:	687b      	ldr	r3, [r7, #4]
}
 8000972:	0018      	movs	r0, r3
 8000974:	46bd      	mov	sp, r7
 8000976:	b006      	add	sp, #24
 8000978:	bd80      	pop	{r7, pc}

0800097a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800097a:	b580      	push	{r7, lr}
 800097c:	b086      	sub	sp, #24
 800097e:	af00      	add	r7, sp, #0
 8000980:	60f8      	str	r0, [r7, #12]
 8000982:	60b9      	str	r1, [r7, #8]
 8000984:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000986:	2300      	movs	r3, #0
 8000988:	617b      	str	r3, [r7, #20]
 800098a:	e009      	b.n	80009a0 <_write+0x26>
  {
    __io_putchar(*ptr++);
 800098c:	68bb      	ldr	r3, [r7, #8]
 800098e:	1c5a      	adds	r2, r3, #1
 8000990:	60ba      	str	r2, [r7, #8]
 8000992:	781b      	ldrb	r3, [r3, #0]
 8000994:	0018      	movs	r0, r3
 8000996:	e000      	b.n	800099a <_write+0x20>
 8000998:	bf00      	nop
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800099a:	697b      	ldr	r3, [r7, #20]
 800099c:	3301      	adds	r3, #1
 800099e:	617b      	str	r3, [r7, #20]
 80009a0:	697a      	ldr	r2, [r7, #20]
 80009a2:	687b      	ldr	r3, [r7, #4]
 80009a4:	429a      	cmp	r2, r3
 80009a6:	dbf1      	blt.n	800098c <_write+0x12>
  }
  return len;
 80009a8:	687b      	ldr	r3, [r7, #4]
}
 80009aa:	0018      	movs	r0, r3
 80009ac:	46bd      	mov	sp, r7
 80009ae:	b006      	add	sp, #24
 80009b0:	bd80      	pop	{r7, pc}

080009b2 <_close>:

int _close(int file)
{
 80009b2:	b580      	push	{r7, lr}
 80009b4:	b082      	sub	sp, #8
 80009b6:	af00      	add	r7, sp, #0
 80009b8:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80009ba:	2301      	movs	r3, #1
 80009bc:	425b      	negs	r3, r3
}
 80009be:	0018      	movs	r0, r3
 80009c0:	46bd      	mov	sp, r7
 80009c2:	b002      	add	sp, #8
 80009c4:	bd80      	pop	{r7, pc}

080009c6 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80009c6:	b580      	push	{r7, lr}
 80009c8:	b082      	sub	sp, #8
 80009ca:	af00      	add	r7, sp, #0
 80009cc:	6078      	str	r0, [r7, #4]
 80009ce:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80009d0:	683b      	ldr	r3, [r7, #0]
 80009d2:	2280      	movs	r2, #128	@ 0x80
 80009d4:	0192      	lsls	r2, r2, #6
 80009d6:	605a      	str	r2, [r3, #4]
  return 0;
 80009d8:	2300      	movs	r3, #0
}
 80009da:	0018      	movs	r0, r3
 80009dc:	46bd      	mov	sp, r7
 80009de:	b002      	add	sp, #8
 80009e0:	bd80      	pop	{r7, pc}

080009e2 <_isatty>:

int _isatty(int file)
{
 80009e2:	b580      	push	{r7, lr}
 80009e4:	b082      	sub	sp, #8
 80009e6:	af00      	add	r7, sp, #0
 80009e8:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80009ea:	2301      	movs	r3, #1
}
 80009ec:	0018      	movs	r0, r3
 80009ee:	46bd      	mov	sp, r7
 80009f0:	b002      	add	sp, #8
 80009f2:	bd80      	pop	{r7, pc}

080009f4 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80009f4:	b580      	push	{r7, lr}
 80009f6:	b084      	sub	sp, #16
 80009f8:	af00      	add	r7, sp, #0
 80009fa:	60f8      	str	r0, [r7, #12]
 80009fc:	60b9      	str	r1, [r7, #8]
 80009fe:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000a00:	2300      	movs	r3, #0
}
 8000a02:	0018      	movs	r0, r3
 8000a04:	46bd      	mov	sp, r7
 8000a06:	b004      	add	sp, #16
 8000a08:	bd80      	pop	{r7, pc}
	...

08000a0c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000a0c:	b580      	push	{r7, lr}
 8000a0e:	b086      	sub	sp, #24
 8000a10:	af00      	add	r7, sp, #0
 8000a12:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000a14:	4a14      	ldr	r2, [pc, #80]	@ (8000a68 <_sbrk+0x5c>)
 8000a16:	4b15      	ldr	r3, [pc, #84]	@ (8000a6c <_sbrk+0x60>)
 8000a18:	1ad3      	subs	r3, r2, r3
 8000a1a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000a1c:	697b      	ldr	r3, [r7, #20]
 8000a1e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000a20:	4b13      	ldr	r3, [pc, #76]	@ (8000a70 <_sbrk+0x64>)
 8000a22:	681b      	ldr	r3, [r3, #0]
 8000a24:	2b00      	cmp	r3, #0
 8000a26:	d102      	bne.n	8000a2e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000a28:	4b11      	ldr	r3, [pc, #68]	@ (8000a70 <_sbrk+0x64>)
 8000a2a:	4a12      	ldr	r2, [pc, #72]	@ (8000a74 <_sbrk+0x68>)
 8000a2c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000a2e:	4b10      	ldr	r3, [pc, #64]	@ (8000a70 <_sbrk+0x64>)
 8000a30:	681a      	ldr	r2, [r3, #0]
 8000a32:	687b      	ldr	r3, [r7, #4]
 8000a34:	18d3      	adds	r3, r2, r3
 8000a36:	693a      	ldr	r2, [r7, #16]
 8000a38:	429a      	cmp	r2, r3
 8000a3a:	d207      	bcs.n	8000a4c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000a3c:	f002 fbfa 	bl	8003234 <__errno>
 8000a40:	0003      	movs	r3, r0
 8000a42:	220c      	movs	r2, #12
 8000a44:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000a46:	2301      	movs	r3, #1
 8000a48:	425b      	negs	r3, r3
 8000a4a:	e009      	b.n	8000a60 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000a4c:	4b08      	ldr	r3, [pc, #32]	@ (8000a70 <_sbrk+0x64>)
 8000a4e:	681b      	ldr	r3, [r3, #0]
 8000a50:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000a52:	4b07      	ldr	r3, [pc, #28]	@ (8000a70 <_sbrk+0x64>)
 8000a54:	681a      	ldr	r2, [r3, #0]
 8000a56:	687b      	ldr	r3, [r7, #4]
 8000a58:	18d2      	adds	r2, r2, r3
 8000a5a:	4b05      	ldr	r3, [pc, #20]	@ (8000a70 <_sbrk+0x64>)
 8000a5c:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 8000a5e:	68fb      	ldr	r3, [r7, #12]
}
 8000a60:	0018      	movs	r0, r3
 8000a62:	46bd      	mov	sp, r7
 8000a64:	b006      	add	sp, #24
 8000a66:	bd80      	pop	{r7, pc}
 8000a68:	20007800 	.word	0x20007800
 8000a6c:	00000400 	.word	0x00000400
 8000a70:	20000224 	.word	0x20000224
 8000a74:	20000378 	.word	0x20000378

08000a78 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000a78:	b580      	push	{r7, lr}
 8000a7a:	af00      	add	r7, sp, #0
  
  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000a7c:	4b03      	ldr	r3, [pc, #12]	@ (8000a8c <SystemInit+0x14>)
 8000a7e:	2280      	movs	r2, #128	@ 0x80
 8000a80:	0512      	lsls	r2, r2, #20
 8000a82:	609a      	str	r2, [r3, #8]
#endif
}
 8000a84:	46c0      	nop			@ (mov r8, r8)
 8000a86:	46bd      	mov	sp, r7
 8000a88:	bd80      	pop	{r7, pc}
 8000a8a:	46c0      	nop			@ (mov r8, r8)
 8000a8c:	e000ed00 	.word	0xe000ed00

08000a90 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000a90:	480d      	ldr	r0, [pc, #52]	@ (8000ac8 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000a92:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000a94:	f7ff fff0 	bl	8000a78 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8000a98:	2100      	movs	r1, #0
  b LoopCopyDataInit
 8000a9a:	e003      	b.n	8000aa4 <LoopCopyDataInit>

08000a9c <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8000a9c:	4b0b      	ldr	r3, [pc, #44]	@ (8000acc <LoopForever+0x6>)
  ldr r3, [r3, r1]
 8000a9e:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8000aa0:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 8000aa2:	3104      	adds	r1, #4

08000aa4 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8000aa4:	480a      	ldr	r0, [pc, #40]	@ (8000ad0 <LoopForever+0xa>)
  ldr r3, =_edata
 8000aa6:	4b0b      	ldr	r3, [pc, #44]	@ (8000ad4 <LoopForever+0xe>)
  adds r2, r0, r1
 8000aa8:	1842      	adds	r2, r0, r1
  cmp r2, r3
 8000aaa:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8000aac:	d3f6      	bcc.n	8000a9c <CopyDataInit>
  ldr r2, =_sbss
 8000aae:	4a0a      	ldr	r2, [pc, #40]	@ (8000ad8 <LoopForever+0x12>)
  b LoopFillZerobss
 8000ab0:	e002      	b.n	8000ab8 <LoopFillZerobss>

08000ab2 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 8000ab2:	2300      	movs	r3, #0
  str  r3, [r2]
 8000ab4:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000ab6:	3204      	adds	r2, #4

08000ab8 <LoopFillZerobss>:


LoopFillZerobss:
  ldr r3, = _ebss
 8000ab8:	4b08      	ldr	r3, [pc, #32]	@ (8000adc <LoopForever+0x16>)
  cmp r2, r3
 8000aba:	429a      	cmp	r2, r3
  bcc FillZerobss
 8000abc:	d3f9      	bcc.n	8000ab2 <FillZerobss>


/* Call static constructors */
  bl __libc_init_array
 8000abe:	f002 fbbf 	bl	8003240 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000ac2:	f7ff fd13 	bl	80004ec <main>

08000ac6 <LoopForever>:

LoopForever:
    b LoopForever
 8000ac6:	e7fe      	b.n	8000ac6 <LoopForever>
  ldr   r0, =_estack
 8000ac8:	20007800 	.word	0x20007800
  ldr r3, =_sidata
 8000acc:	08003de4 	.word	0x08003de4
  ldr r0, =_sdata
 8000ad0:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8000ad4:	20000070 	.word	0x20000070
  ldr r2, =_sbss
 8000ad8:	20000070 	.word	0x20000070
  ldr r3, = _ebss
 8000adc:	20000378 	.word	0x20000378

08000ae0 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000ae0:	e7fe      	b.n	8000ae0 <ADC1_IRQHandler>

08000ae2 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000ae2:	b580      	push	{r7, lr}
 8000ae4:	b082      	sub	sp, #8
 8000ae6:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000ae8:	1dfb      	adds	r3, r7, #7
 8000aea:	2200      	movs	r2, #0
 8000aec:	701a      	strb	r2, [r3, #0]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000aee:	2003      	movs	r0, #3
 8000af0:	f000 f80e 	bl	8000b10 <HAL_InitTick>
 8000af4:	1e03      	subs	r3, r0, #0
 8000af6:	d003      	beq.n	8000b00 <HAL_Init+0x1e>
  {
    status = HAL_ERROR;
 8000af8:	1dfb      	adds	r3, r7, #7
 8000afa:	2201      	movs	r2, #1
 8000afc:	701a      	strb	r2, [r3, #0]
 8000afe:	e001      	b.n	8000b04 <HAL_Init+0x22>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000b00:	f7ff fe5c 	bl	80007bc <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000b04:	1dfb      	adds	r3, r7, #7
 8000b06:	781b      	ldrb	r3, [r3, #0]
}
 8000b08:	0018      	movs	r0, r3
 8000b0a:	46bd      	mov	sp, r7
 8000b0c:	b002      	add	sp, #8
 8000b0e:	bd80      	pop	{r7, pc}

08000b10 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000b10:	b590      	push	{r4, r7, lr}
 8000b12:	b085      	sub	sp, #20
 8000b14:	af00      	add	r7, sp, #0
 8000b16:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000b18:	230f      	movs	r3, #15
 8000b1a:	18fb      	adds	r3, r7, r3
 8000b1c:	2200      	movs	r2, #0
 8000b1e:	701a      	strb	r2, [r3, #0]

  if ((uint32_t)uwTickFreq != 0UL)
 8000b20:	4b1d      	ldr	r3, [pc, #116]	@ (8000b98 <HAL_InitTick+0x88>)
 8000b22:	781b      	ldrb	r3, [r3, #0]
 8000b24:	2b00      	cmp	r3, #0
 8000b26:	d02b      	beq.n	8000b80 <HAL_InitTick+0x70>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) == 0U)
 8000b28:	4b1c      	ldr	r3, [pc, #112]	@ (8000b9c <HAL_InitTick+0x8c>)
 8000b2a:	681c      	ldr	r4, [r3, #0]
 8000b2c:	4b1a      	ldr	r3, [pc, #104]	@ (8000b98 <HAL_InitTick+0x88>)
 8000b2e:	781b      	ldrb	r3, [r3, #0]
 8000b30:	0019      	movs	r1, r3
 8000b32:	23fa      	movs	r3, #250	@ 0xfa
 8000b34:	0098      	lsls	r0, r3, #2
 8000b36:	f7ff faf1 	bl	800011c <__udivsi3>
 8000b3a:	0003      	movs	r3, r0
 8000b3c:	0019      	movs	r1, r3
 8000b3e:	0020      	movs	r0, r4
 8000b40:	f7ff faec 	bl	800011c <__udivsi3>
 8000b44:	0003      	movs	r3, r0
 8000b46:	0018      	movs	r0, r3
 8000b48:	f000 f93d 	bl	8000dc6 <HAL_SYSTICK_Config>
 8000b4c:	1e03      	subs	r3, r0, #0
 8000b4e:	d112      	bne.n	8000b76 <HAL_InitTick+0x66>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000b50:	687b      	ldr	r3, [r7, #4]
 8000b52:	2b03      	cmp	r3, #3
 8000b54:	d80a      	bhi.n	8000b6c <HAL_InitTick+0x5c>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000b56:	6879      	ldr	r1, [r7, #4]
 8000b58:	2301      	movs	r3, #1
 8000b5a:	425b      	negs	r3, r3
 8000b5c:	2200      	movs	r2, #0
 8000b5e:	0018      	movs	r0, r3
 8000b60:	f000 f90c 	bl	8000d7c <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000b64:	4b0e      	ldr	r3, [pc, #56]	@ (8000ba0 <HAL_InitTick+0x90>)
 8000b66:	687a      	ldr	r2, [r7, #4]
 8000b68:	601a      	str	r2, [r3, #0]
 8000b6a:	e00d      	b.n	8000b88 <HAL_InitTick+0x78>
      }
      else
      {
        status = HAL_ERROR;
 8000b6c:	230f      	movs	r3, #15
 8000b6e:	18fb      	adds	r3, r7, r3
 8000b70:	2201      	movs	r2, #1
 8000b72:	701a      	strb	r2, [r3, #0]
 8000b74:	e008      	b.n	8000b88 <HAL_InitTick+0x78>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000b76:	230f      	movs	r3, #15
 8000b78:	18fb      	adds	r3, r7, r3
 8000b7a:	2201      	movs	r2, #1
 8000b7c:	701a      	strb	r2, [r3, #0]
 8000b7e:	e003      	b.n	8000b88 <HAL_InitTick+0x78>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000b80:	230f      	movs	r3, #15
 8000b82:	18fb      	adds	r3, r7, r3
 8000b84:	2201      	movs	r2, #1
 8000b86:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 8000b88:	230f      	movs	r3, #15
 8000b8a:	18fb      	adds	r3, r7, r3
 8000b8c:	781b      	ldrb	r3, [r3, #0]
}
 8000b8e:	0018      	movs	r0, r3
 8000b90:	46bd      	mov	sp, r7
 8000b92:	b005      	add	sp, #20
 8000b94:	bd90      	pop	{r4, r7, pc}
 8000b96:	46c0      	nop			@ (mov r8, r8)
 8000b98:	20000010 	.word	0x20000010
 8000b9c:	20000008 	.word	0x20000008
 8000ba0:	2000000c 	.word	0x2000000c

08000ba4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000ba4:	b580      	push	{r7, lr}
 8000ba6:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000ba8:	4b05      	ldr	r3, [pc, #20]	@ (8000bc0 <HAL_IncTick+0x1c>)
 8000baa:	781b      	ldrb	r3, [r3, #0]
 8000bac:	001a      	movs	r2, r3
 8000bae:	4b05      	ldr	r3, [pc, #20]	@ (8000bc4 <HAL_IncTick+0x20>)
 8000bb0:	681b      	ldr	r3, [r3, #0]
 8000bb2:	18d2      	adds	r2, r2, r3
 8000bb4:	4b03      	ldr	r3, [pc, #12]	@ (8000bc4 <HAL_IncTick+0x20>)
 8000bb6:	601a      	str	r2, [r3, #0]
}
 8000bb8:	46c0      	nop			@ (mov r8, r8)
 8000bba:	46bd      	mov	sp, r7
 8000bbc:	bd80      	pop	{r7, pc}
 8000bbe:	46c0      	nop			@ (mov r8, r8)
 8000bc0:	20000010 	.word	0x20000010
 8000bc4:	20000228 	.word	0x20000228

08000bc8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000bc8:	b580      	push	{r7, lr}
 8000bca:	af00      	add	r7, sp, #0
  return uwTick;
 8000bcc:	4b02      	ldr	r3, [pc, #8]	@ (8000bd8 <HAL_GetTick+0x10>)
 8000bce:	681b      	ldr	r3, [r3, #0]
}
 8000bd0:	0018      	movs	r0, r3
 8000bd2:	46bd      	mov	sp, r7
 8000bd4:	bd80      	pop	{r7, pc}
 8000bd6:	46c0      	nop			@ (mov r8, r8)
 8000bd8:	20000228 	.word	0x20000228

08000bdc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000bdc:	b580      	push	{r7, lr}
 8000bde:	b084      	sub	sp, #16
 8000be0:	af00      	add	r7, sp, #0
 8000be2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000be4:	f7ff fff0 	bl	8000bc8 <HAL_GetTick>
 8000be8:	0003      	movs	r3, r0
 8000bea:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8000bec:	687b      	ldr	r3, [r7, #4]
 8000bee:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000bf0:	68fb      	ldr	r3, [r7, #12]
 8000bf2:	3301      	adds	r3, #1
 8000bf4:	d005      	beq.n	8000c02 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000bf6:	4b0a      	ldr	r3, [pc, #40]	@ (8000c20 <HAL_Delay+0x44>)
 8000bf8:	781b      	ldrb	r3, [r3, #0]
 8000bfa:	001a      	movs	r2, r3
 8000bfc:	68fb      	ldr	r3, [r7, #12]
 8000bfe:	189b      	adds	r3, r3, r2
 8000c00:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000c02:	46c0      	nop			@ (mov r8, r8)
 8000c04:	f7ff ffe0 	bl	8000bc8 <HAL_GetTick>
 8000c08:	0002      	movs	r2, r0
 8000c0a:	68bb      	ldr	r3, [r7, #8]
 8000c0c:	1ad3      	subs	r3, r2, r3
 8000c0e:	68fa      	ldr	r2, [r7, #12]
 8000c10:	429a      	cmp	r2, r3
 8000c12:	d8f7      	bhi.n	8000c04 <HAL_Delay+0x28>
  {
  }
}
 8000c14:	46c0      	nop			@ (mov r8, r8)
 8000c16:	46c0      	nop			@ (mov r8, r8)
 8000c18:	46bd      	mov	sp, r7
 8000c1a:	b004      	add	sp, #16
 8000c1c:	bd80      	pop	{r7, pc}
 8000c1e:	46c0      	nop			@ (mov r8, r8)
 8000c20:	20000010 	.word	0x20000010

08000c24 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000c24:	b580      	push	{r7, lr}
 8000c26:	b082      	sub	sp, #8
 8000c28:	af00      	add	r7, sp, #0
 8000c2a:	0002      	movs	r2, r0
 8000c2c:	1dfb      	adds	r3, r7, #7
 8000c2e:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000c30:	1dfb      	adds	r3, r7, #7
 8000c32:	781b      	ldrb	r3, [r3, #0]
 8000c34:	2b7f      	cmp	r3, #127	@ 0x7f
 8000c36:	d809      	bhi.n	8000c4c <__NVIC_EnableIRQ+0x28>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000c38:	1dfb      	adds	r3, r7, #7
 8000c3a:	781b      	ldrb	r3, [r3, #0]
 8000c3c:	001a      	movs	r2, r3
 8000c3e:	231f      	movs	r3, #31
 8000c40:	401a      	ands	r2, r3
 8000c42:	4b04      	ldr	r3, [pc, #16]	@ (8000c54 <__NVIC_EnableIRQ+0x30>)
 8000c44:	2101      	movs	r1, #1
 8000c46:	4091      	lsls	r1, r2
 8000c48:	000a      	movs	r2, r1
 8000c4a:	601a      	str	r2, [r3, #0]
    __COMPILER_BARRIER();
  }
}
 8000c4c:	46c0      	nop			@ (mov r8, r8)
 8000c4e:	46bd      	mov	sp, r7
 8000c50:	b002      	add	sp, #8
 8000c52:	bd80      	pop	{r7, pc}
 8000c54:	e000e100 	.word	0xe000e100

08000c58 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000c58:	b590      	push	{r4, r7, lr}
 8000c5a:	b083      	sub	sp, #12
 8000c5c:	af00      	add	r7, sp, #0
 8000c5e:	0002      	movs	r2, r0
 8000c60:	6039      	str	r1, [r7, #0]
 8000c62:	1dfb      	adds	r3, r7, #7
 8000c64:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000c66:	1dfb      	adds	r3, r7, #7
 8000c68:	781b      	ldrb	r3, [r3, #0]
 8000c6a:	2b7f      	cmp	r3, #127	@ 0x7f
 8000c6c:	d828      	bhi.n	8000cc0 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000c6e:	4a2f      	ldr	r2, [pc, #188]	@ (8000d2c <__NVIC_SetPriority+0xd4>)
 8000c70:	1dfb      	adds	r3, r7, #7
 8000c72:	781b      	ldrb	r3, [r3, #0]
 8000c74:	b25b      	sxtb	r3, r3
 8000c76:	089b      	lsrs	r3, r3, #2
 8000c78:	33c0      	adds	r3, #192	@ 0xc0
 8000c7a:	009b      	lsls	r3, r3, #2
 8000c7c:	589b      	ldr	r3, [r3, r2]
 8000c7e:	1dfa      	adds	r2, r7, #7
 8000c80:	7812      	ldrb	r2, [r2, #0]
 8000c82:	0011      	movs	r1, r2
 8000c84:	2203      	movs	r2, #3
 8000c86:	400a      	ands	r2, r1
 8000c88:	00d2      	lsls	r2, r2, #3
 8000c8a:	21ff      	movs	r1, #255	@ 0xff
 8000c8c:	4091      	lsls	r1, r2
 8000c8e:	000a      	movs	r2, r1
 8000c90:	43d2      	mvns	r2, r2
 8000c92:	401a      	ands	r2, r3
 8000c94:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000c96:	683b      	ldr	r3, [r7, #0]
 8000c98:	019b      	lsls	r3, r3, #6
 8000c9a:	22ff      	movs	r2, #255	@ 0xff
 8000c9c:	401a      	ands	r2, r3
 8000c9e:	1dfb      	adds	r3, r7, #7
 8000ca0:	781b      	ldrb	r3, [r3, #0]
 8000ca2:	0018      	movs	r0, r3
 8000ca4:	2303      	movs	r3, #3
 8000ca6:	4003      	ands	r3, r0
 8000ca8:	00db      	lsls	r3, r3, #3
 8000caa:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000cac:	481f      	ldr	r0, [pc, #124]	@ (8000d2c <__NVIC_SetPriority+0xd4>)
 8000cae:	1dfb      	adds	r3, r7, #7
 8000cb0:	781b      	ldrb	r3, [r3, #0]
 8000cb2:	b25b      	sxtb	r3, r3
 8000cb4:	089b      	lsrs	r3, r3, #2
 8000cb6:	430a      	orrs	r2, r1
 8000cb8:	33c0      	adds	r3, #192	@ 0xc0
 8000cba:	009b      	lsls	r3, r3, #2
 8000cbc:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8000cbe:	e031      	b.n	8000d24 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000cc0:	4a1b      	ldr	r2, [pc, #108]	@ (8000d30 <__NVIC_SetPriority+0xd8>)
 8000cc2:	1dfb      	adds	r3, r7, #7
 8000cc4:	781b      	ldrb	r3, [r3, #0]
 8000cc6:	0019      	movs	r1, r3
 8000cc8:	230f      	movs	r3, #15
 8000cca:	400b      	ands	r3, r1
 8000ccc:	3b08      	subs	r3, #8
 8000cce:	089b      	lsrs	r3, r3, #2
 8000cd0:	3306      	adds	r3, #6
 8000cd2:	009b      	lsls	r3, r3, #2
 8000cd4:	18d3      	adds	r3, r2, r3
 8000cd6:	3304      	adds	r3, #4
 8000cd8:	681b      	ldr	r3, [r3, #0]
 8000cda:	1dfa      	adds	r2, r7, #7
 8000cdc:	7812      	ldrb	r2, [r2, #0]
 8000cde:	0011      	movs	r1, r2
 8000ce0:	2203      	movs	r2, #3
 8000ce2:	400a      	ands	r2, r1
 8000ce4:	00d2      	lsls	r2, r2, #3
 8000ce6:	21ff      	movs	r1, #255	@ 0xff
 8000ce8:	4091      	lsls	r1, r2
 8000cea:	000a      	movs	r2, r1
 8000cec:	43d2      	mvns	r2, r2
 8000cee:	401a      	ands	r2, r3
 8000cf0:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000cf2:	683b      	ldr	r3, [r7, #0]
 8000cf4:	019b      	lsls	r3, r3, #6
 8000cf6:	22ff      	movs	r2, #255	@ 0xff
 8000cf8:	401a      	ands	r2, r3
 8000cfa:	1dfb      	adds	r3, r7, #7
 8000cfc:	781b      	ldrb	r3, [r3, #0]
 8000cfe:	0018      	movs	r0, r3
 8000d00:	2303      	movs	r3, #3
 8000d02:	4003      	ands	r3, r0
 8000d04:	00db      	lsls	r3, r3, #3
 8000d06:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000d08:	4809      	ldr	r0, [pc, #36]	@ (8000d30 <__NVIC_SetPriority+0xd8>)
 8000d0a:	1dfb      	adds	r3, r7, #7
 8000d0c:	781b      	ldrb	r3, [r3, #0]
 8000d0e:	001c      	movs	r4, r3
 8000d10:	230f      	movs	r3, #15
 8000d12:	4023      	ands	r3, r4
 8000d14:	3b08      	subs	r3, #8
 8000d16:	089b      	lsrs	r3, r3, #2
 8000d18:	430a      	orrs	r2, r1
 8000d1a:	3306      	adds	r3, #6
 8000d1c:	009b      	lsls	r3, r3, #2
 8000d1e:	18c3      	adds	r3, r0, r3
 8000d20:	3304      	adds	r3, #4
 8000d22:	601a      	str	r2, [r3, #0]
}
 8000d24:	46c0      	nop			@ (mov r8, r8)
 8000d26:	46bd      	mov	sp, r7
 8000d28:	b003      	add	sp, #12
 8000d2a:	bd90      	pop	{r4, r7, pc}
 8000d2c:	e000e100 	.word	0xe000e100
 8000d30:	e000ed00 	.word	0xe000ed00

08000d34 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000d34:	b580      	push	{r7, lr}
 8000d36:	b082      	sub	sp, #8
 8000d38:	af00      	add	r7, sp, #0
 8000d3a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000d3c:	687b      	ldr	r3, [r7, #4]
 8000d3e:	1e5a      	subs	r2, r3, #1
 8000d40:	2380      	movs	r3, #128	@ 0x80
 8000d42:	045b      	lsls	r3, r3, #17
 8000d44:	429a      	cmp	r2, r3
 8000d46:	d301      	bcc.n	8000d4c <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000d48:	2301      	movs	r3, #1
 8000d4a:	e010      	b.n	8000d6e <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000d4c:	4b0a      	ldr	r3, [pc, #40]	@ (8000d78 <SysTick_Config+0x44>)
 8000d4e:	687a      	ldr	r2, [r7, #4]
 8000d50:	3a01      	subs	r2, #1
 8000d52:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000d54:	2301      	movs	r3, #1
 8000d56:	425b      	negs	r3, r3
 8000d58:	2103      	movs	r1, #3
 8000d5a:	0018      	movs	r0, r3
 8000d5c:	f7ff ff7c 	bl	8000c58 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000d60:	4b05      	ldr	r3, [pc, #20]	@ (8000d78 <SysTick_Config+0x44>)
 8000d62:	2200      	movs	r2, #0
 8000d64:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000d66:	4b04      	ldr	r3, [pc, #16]	@ (8000d78 <SysTick_Config+0x44>)
 8000d68:	2207      	movs	r2, #7
 8000d6a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000d6c:	2300      	movs	r3, #0
}
 8000d6e:	0018      	movs	r0, r3
 8000d70:	46bd      	mov	sp, r7
 8000d72:	b002      	add	sp, #8
 8000d74:	bd80      	pop	{r7, pc}
 8000d76:	46c0      	nop			@ (mov r8, r8)
 8000d78:	e000e010 	.word	0xe000e010

08000d7c <HAL_NVIC_SetPriority>:
  *         with stm32c0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000d7c:	b580      	push	{r7, lr}
 8000d7e:	b084      	sub	sp, #16
 8000d80:	af00      	add	r7, sp, #0
 8000d82:	60b9      	str	r1, [r7, #8]
 8000d84:	607a      	str	r2, [r7, #4]
 8000d86:	210f      	movs	r1, #15
 8000d88:	187b      	adds	r3, r7, r1
 8000d8a:	1c02      	adds	r2, r0, #0
 8000d8c:	701a      	strb	r2, [r3, #0]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn, PreemptPriority);
 8000d8e:	68ba      	ldr	r2, [r7, #8]
 8000d90:	187b      	adds	r3, r7, r1
 8000d92:	781b      	ldrb	r3, [r3, #0]
 8000d94:	b25b      	sxtb	r3, r3
 8000d96:	0011      	movs	r1, r2
 8000d98:	0018      	movs	r0, r3
 8000d9a:	f7ff ff5d 	bl	8000c58 <__NVIC_SetPriority>
}
 8000d9e:	46c0      	nop			@ (mov r8, r8)
 8000da0:	46bd      	mov	sp, r7
 8000da2:	b004      	add	sp, #16
 8000da4:	bd80      	pop	{r7, pc}

08000da6 <HAL_NVIC_EnableIRQ>:
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate
  *         CMSIS device file (stm32c0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000da6:	b580      	push	{r7, lr}
 8000da8:	b082      	sub	sp, #8
 8000daa:	af00      	add	r7, sp, #0
 8000dac:	0002      	movs	r2, r0
 8000dae:	1dfb      	adds	r3, r7, #7
 8000db0:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000db2:	1dfb      	adds	r3, r7, #7
 8000db4:	781b      	ldrb	r3, [r3, #0]
 8000db6:	b25b      	sxtb	r3, r3
 8000db8:	0018      	movs	r0, r3
 8000dba:	f7ff ff33 	bl	8000c24 <__NVIC_EnableIRQ>
}
 8000dbe:	46c0      	nop			@ (mov r8, r8)
 8000dc0:	46bd      	mov	sp, r7
 8000dc2:	b002      	add	sp, #8
 8000dc4:	bd80      	pop	{r7, pc}

08000dc6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000dc6:	b580      	push	{r7, lr}
 8000dc8:	b082      	sub	sp, #8
 8000dca:	af00      	add	r7, sp, #0
 8000dcc:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 8000dce:	687b      	ldr	r3, [r7, #4]
 8000dd0:	0018      	movs	r0, r3
 8000dd2:	f7ff ffaf 	bl	8000d34 <SysTick_Config>
 8000dd6:	0003      	movs	r3, r0
}
 8000dd8:	0018      	movs	r0, r3
 8000dda:	46bd      	mov	sp, r7
 8000ddc:	b002      	add	sp, #8
 8000dde:	bd80      	pop	{r7, pc}

08000de0 <HAL_DMA_Init>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8000de0:	b580      	push	{r7, lr}
 8000de2:	b082      	sub	sp, #8
 8000de4:	af00      	add	r7, sp, #0
 8000de6:	6078      	str	r0, [r7, #4]
  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8000de8:	687b      	ldr	r3, [r7, #4]
 8000dea:	2b00      	cmp	r3, #0
 8000dec:	d101      	bne.n	8000df2 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8000dee:	2301      	movs	r3, #1
 8000df0:	e077      	b.n	8000ee2 <HAL_DMA_Init+0x102>
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  /* calculation of the channel index */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - \
 8000df2:	687b      	ldr	r3, [r7, #4]
 8000df4:	681b      	ldr	r3, [r3, #0]
 8000df6:	4a3d      	ldr	r2, [pc, #244]	@ (8000eec <HAL_DMA_Init+0x10c>)
 8000df8:	4694      	mov	ip, r2
 8000dfa:	4463      	add	r3, ip
 8000dfc:	2114      	movs	r1, #20
 8000dfe:	0018      	movs	r0, r3
 8000e00:	f7ff f98c 	bl	800011c <__udivsi3>
 8000e04:	0003      	movs	r3, r0
                                                                                (uint32_t)DMA1_Channel1)) << 2U;
 8000e06:	009a      	lsls	r2, r3, #2
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - \
 8000e08:	687b      	ldr	r3, [r7, #4]
 8000e0a:	641a      	str	r2, [r3, #64]	@ 0x40
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8000e0c:	687b      	ldr	r3, [r7, #4]
 8000e0e:	2225      	movs	r2, #37	@ 0x25
 8000e10:	2102      	movs	r1, #2
 8000e12:	5499      	strb	r1, [r3, r2]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  CLEAR_BIT(hdma->Instance->CCR, (DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8000e14:	687b      	ldr	r3, [r7, #4]
 8000e16:	681b      	ldr	r3, [r3, #0]
 8000e18:	681a      	ldr	r2, [r3, #0]
 8000e1a:	687b      	ldr	r3, [r7, #4]
 8000e1c:	681b      	ldr	r3, [r3, #0]
 8000e1e:	4934      	ldr	r1, [pc, #208]	@ (8000ef0 <HAL_DMA_Init+0x110>)
 8000e20:	400a      	ands	r2, r1
 8000e22:	601a      	str	r2, [r3, #0]
                                  DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                                  DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Set the DMA Channel configuration */
  SET_BIT(hdma->Instance->CCR, (hdma->Init.Direction           |                               \
 8000e24:	687b      	ldr	r3, [r7, #4]
 8000e26:	681b      	ldr	r3, [r3, #0]
 8000e28:	6819      	ldr	r1, [r3, #0]
 8000e2a:	687b      	ldr	r3, [r7, #4]
 8000e2c:	689a      	ldr	r2, [r3, #8]
 8000e2e:	687b      	ldr	r3, [r7, #4]
 8000e30:	68db      	ldr	r3, [r3, #12]
 8000e32:	431a      	orrs	r2, r3
 8000e34:	687b      	ldr	r3, [r7, #4]
 8000e36:	691b      	ldr	r3, [r3, #16]
 8000e38:	431a      	orrs	r2, r3
 8000e3a:	687b      	ldr	r3, [r7, #4]
 8000e3c:	695b      	ldr	r3, [r3, #20]
 8000e3e:	431a      	orrs	r2, r3
 8000e40:	687b      	ldr	r3, [r7, #4]
 8000e42:	699b      	ldr	r3, [r3, #24]
 8000e44:	431a      	orrs	r2, r3
 8000e46:	687b      	ldr	r3, [r7, #4]
 8000e48:	69db      	ldr	r3, [r3, #28]
 8000e4a:	431a      	orrs	r2, r3
 8000e4c:	687b      	ldr	r3, [r7, #4]
 8000e4e:	6a1b      	ldr	r3, [r3, #32]
 8000e50:	431a      	orrs	r2, r3
 8000e52:	687b      	ldr	r3, [r7, #4]
 8000e54:	681b      	ldr	r3, [r3, #0]
 8000e56:	430a      	orrs	r2, r1
 8000e58:	601a      	str	r2, [r3, #0]
                                hdma->Init.Mode                | hdma->Init.Priority));

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8000e5a:	687b      	ldr	r3, [r7, #4]
 8000e5c:	0018      	movs	r0, r3
 8000e5e:	f000 fa2f 	bl	80012c0 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8000e62:	687b      	ldr	r3, [r7, #4]
 8000e64:	689a      	ldr	r2, [r3, #8]
 8000e66:	2380      	movs	r3, #128	@ 0x80
 8000e68:	01db      	lsls	r3, r3, #7
 8000e6a:	429a      	cmp	r2, r3
 8000e6c:	d102      	bne.n	8000e74 <HAL_DMA_Init+0x94>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8000e6e:	687b      	ldr	r3, [r7, #4]
 8000e70:	2200      	movs	r2, #0
 8000e72:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8000e74:	687b      	ldr	r3, [r7, #4]
 8000e76:	685a      	ldr	r2, [r3, #4]
 8000e78:	687b      	ldr	r3, [r7, #4]
 8000e7a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000e7c:	21ff      	movs	r1, #255	@ 0xff
 8000e7e:	400a      	ands	r2, r1
 8000e80:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8000e82:	687b      	ldr	r3, [r7, #4]
 8000e84:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000e86:	687a      	ldr	r2, [r7, #4]
 8000e88:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 8000e8a:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request > 0UL) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8000e8c:	687b      	ldr	r3, [r7, #4]
 8000e8e:	685b      	ldr	r3, [r3, #4]
 8000e90:	2b00      	cmp	r3, #0
 8000e92:	d011      	beq.n	8000eb8 <HAL_DMA_Init+0xd8>
 8000e94:	687b      	ldr	r3, [r7, #4]
 8000e96:	685b      	ldr	r3, [r3, #4]
 8000e98:	2b04      	cmp	r3, #4
 8000e9a:	d80d      	bhi.n	8000eb8 <HAL_DMA_Init+0xd8>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8000e9c:	687b      	ldr	r3, [r7, #4]
 8000e9e:	0018      	movs	r0, r3
 8000ea0:	f000 fa3a 	bl	8001318 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8000ea4:	687b      	ldr	r3, [r7, #4]
 8000ea6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8000ea8:	2200      	movs	r2, #0
 8000eaa:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8000eac:	687b      	ldr	r3, [r7, #4]
 8000eae:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8000eb0:	687a      	ldr	r2, [r7, #4]
 8000eb2:	6d92      	ldr	r2, [r2, #88]	@ 0x58
 8000eb4:	605a      	str	r2, [r3, #4]
 8000eb6:	e008      	b.n	8000eca <HAL_DMA_Init+0xea>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8000eb8:	687b      	ldr	r3, [r7, #4]
 8000eba:	2200      	movs	r2, #0
 8000ebc:	651a      	str	r2, [r3, #80]	@ 0x50
    hdma->DMAmuxRequestGenStatus = 0U;
 8000ebe:	687b      	ldr	r3, [r7, #4]
 8000ec0:	2200      	movs	r2, #0
 8000ec2:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8000ec4:	687b      	ldr	r3, [r7, #4]
 8000ec6:	2200      	movs	r2, #0
 8000ec8:	659a      	str	r2, [r3, #88]	@ 0x58
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000eca:	687b      	ldr	r3, [r7, #4]
 8000ecc:	2200      	movs	r2, #0
 8000ece:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 8000ed0:	687b      	ldr	r3, [r7, #4]
 8000ed2:	2225      	movs	r2, #37	@ 0x25
 8000ed4:	2101      	movs	r1, #1
 8000ed6:	5499      	strb	r1, [r3, r2]

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 8000ed8:	687b      	ldr	r3, [r7, #4]
 8000eda:	2224      	movs	r2, #36	@ 0x24
 8000edc:	2100      	movs	r1, #0
 8000ede:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8000ee0:	2300      	movs	r3, #0
}
 8000ee2:	0018      	movs	r0, r3
 8000ee4:	46bd      	mov	sp, r7
 8000ee6:	b002      	add	sp, #8
 8000ee8:	bd80      	pop	{r7, pc}
 8000eea:	46c0      	nop			@ (mov r8, r8)
 8000eec:	bffdfff8 	.word	0xbffdfff8
 8000ef0:	ffff800f 	.word	0xffff800f

08000ef4 <HAL_DMA_Start_IT>:
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 8000ef4:	b580      	push	{r7, lr}
 8000ef6:	b086      	sub	sp, #24
 8000ef8:	af00      	add	r7, sp, #0
 8000efa:	60f8      	str	r0, [r7, #12]
 8000efc:	60b9      	str	r1, [r7, #8]
 8000efe:	607a      	str	r2, [r7, #4]
 8000f00:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8000f02:	2317      	movs	r3, #23
 8000f04:	18fb      	adds	r3, r7, r3
 8000f06:	2200      	movs	r2, #0
 8000f08:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8000f0a:	68fb      	ldr	r3, [r7, #12]
 8000f0c:	2224      	movs	r2, #36	@ 0x24
 8000f0e:	5c9b      	ldrb	r3, [r3, r2]
 8000f10:	2b01      	cmp	r3, #1
 8000f12:	d101      	bne.n	8000f18 <HAL_DMA_Start_IT+0x24>
 8000f14:	2302      	movs	r3, #2
 8000f16:	e070      	b.n	8000ffa <HAL_DMA_Start_IT+0x106>
 8000f18:	68fb      	ldr	r3, [r7, #12]
 8000f1a:	2224      	movs	r2, #36	@ 0x24
 8000f1c:	2101      	movs	r1, #1
 8000f1e:	5499      	strb	r1, [r3, r2]

  if (HAL_DMA_STATE_READY == hdma->State)
 8000f20:	68fb      	ldr	r3, [r7, #12]
 8000f22:	2225      	movs	r2, #37	@ 0x25
 8000f24:	5c9b      	ldrb	r3, [r3, r2]
 8000f26:	b2db      	uxtb	r3, r3
 8000f28:	2b01      	cmp	r3, #1
 8000f2a:	d157      	bne.n	8000fdc <HAL_DMA_Start_IT+0xe8>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8000f2c:	68fb      	ldr	r3, [r7, #12]
 8000f2e:	2225      	movs	r2, #37	@ 0x25
 8000f30:	2102      	movs	r1, #2
 8000f32:	5499      	strb	r1, [r3, r2]
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000f34:	68fb      	ldr	r3, [r7, #12]
 8000f36:	2200      	movs	r2, #0
 8000f38:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8000f3a:	68fb      	ldr	r3, [r7, #12]
 8000f3c:	681b      	ldr	r3, [r3, #0]
 8000f3e:	681a      	ldr	r2, [r3, #0]
 8000f40:	68fb      	ldr	r3, [r7, #12]
 8000f42:	681b      	ldr	r3, [r3, #0]
 8000f44:	2101      	movs	r1, #1
 8000f46:	438a      	bics	r2, r1
 8000f48:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8000f4a:	683b      	ldr	r3, [r7, #0]
 8000f4c:	687a      	ldr	r2, [r7, #4]
 8000f4e:	68b9      	ldr	r1, [r7, #8]
 8000f50:	68f8      	ldr	r0, [r7, #12]
 8000f52:	f000 f975 	bl	8001240 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 8000f56:	68fb      	ldr	r3, [r7, #12]
 8000f58:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f5a:	2b00      	cmp	r3, #0
 8000f5c:	d008      	beq.n	8000f70 <HAL_DMA_Start_IT+0x7c>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000f5e:	68fb      	ldr	r3, [r7, #12]
 8000f60:	681b      	ldr	r3, [r3, #0]
 8000f62:	681a      	ldr	r2, [r3, #0]
 8000f64:	68fb      	ldr	r3, [r7, #12]
 8000f66:	681b      	ldr	r3, [r3, #0]
 8000f68:	210e      	movs	r1, #14
 8000f6a:	430a      	orrs	r2, r1
 8000f6c:	601a      	str	r2, [r3, #0]
 8000f6e:	e00f      	b.n	8000f90 <HAL_DMA_Start_IT+0x9c>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8000f70:	68fb      	ldr	r3, [r7, #12]
 8000f72:	681b      	ldr	r3, [r3, #0]
 8000f74:	681a      	ldr	r2, [r3, #0]
 8000f76:	68fb      	ldr	r3, [r7, #12]
 8000f78:	681b      	ldr	r3, [r3, #0]
 8000f7a:	2104      	movs	r1, #4
 8000f7c:	438a      	bics	r2, r1
 8000f7e:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8000f80:	68fb      	ldr	r3, [r7, #12]
 8000f82:	681b      	ldr	r3, [r3, #0]
 8000f84:	681a      	ldr	r2, [r3, #0]
 8000f86:	68fb      	ldr	r3, [r7, #12]
 8000f88:	681b      	ldr	r3, [r3, #0]
 8000f8a:	210a      	movs	r1, #10
 8000f8c:	430a      	orrs	r2, r1
 8000f8e:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8000f90:	68fb      	ldr	r3, [r7, #12]
 8000f92:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000f94:	681a      	ldr	r2, [r3, #0]
 8000f96:	2380      	movs	r3, #128	@ 0x80
 8000f98:	025b      	lsls	r3, r3, #9
 8000f9a:	4013      	ands	r3, r2
 8000f9c:	d008      	beq.n	8000fb0 <HAL_DMA_Start_IT+0xbc>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8000f9e:	68fb      	ldr	r3, [r7, #12]
 8000fa0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000fa2:	681a      	ldr	r2, [r3, #0]
 8000fa4:	68fb      	ldr	r3, [r7, #12]
 8000fa6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000fa8:	2180      	movs	r1, #128	@ 0x80
 8000faa:	0049      	lsls	r1, r1, #1
 8000fac:	430a      	orrs	r2, r1
 8000fae:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 8000fb0:	68fb      	ldr	r3, [r7, #12]
 8000fb2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8000fb4:	2b00      	cmp	r3, #0
 8000fb6:	d008      	beq.n	8000fca <HAL_DMA_Start_IT+0xd6>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8000fb8:	68fb      	ldr	r3, [r7, #12]
 8000fba:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8000fbc:	681a      	ldr	r2, [r3, #0]
 8000fbe:	68fb      	ldr	r3, [r7, #12]
 8000fc0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8000fc2:	2180      	movs	r1, #128	@ 0x80
 8000fc4:	0049      	lsls	r1, r1, #1
 8000fc6:	430a      	orrs	r2, r1
 8000fc8:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8000fca:	68fb      	ldr	r3, [r7, #12]
 8000fcc:	681b      	ldr	r3, [r3, #0]
 8000fce:	681a      	ldr	r2, [r3, #0]
 8000fd0:	68fb      	ldr	r3, [r7, #12]
 8000fd2:	681b      	ldr	r3, [r3, #0]
 8000fd4:	2101      	movs	r1, #1
 8000fd6:	430a      	orrs	r2, r1
 8000fd8:	601a      	str	r2, [r3, #0]
 8000fda:	e007      	b.n	8000fec <HAL_DMA_Start_IT+0xf8>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000fdc:	68fb      	ldr	r3, [r7, #12]
 8000fde:	2224      	movs	r2, #36	@ 0x24
 8000fe0:	2100      	movs	r1, #0
 8000fe2:	5499      	strb	r1, [r3, r2]

    /* Remain BUSY */
    status = HAL_BUSY;
 8000fe4:	2317      	movs	r3, #23
 8000fe6:	18fb      	adds	r3, r7, r3
 8000fe8:	2202      	movs	r2, #2
 8000fea:	701a      	strb	r2, [r3, #0]
  }

  /* Process unlocked */
  __HAL_UNLOCK(hdma);
 8000fec:	68fb      	ldr	r3, [r7, #12]
 8000fee:	2224      	movs	r2, #36	@ 0x24
 8000ff0:	2100      	movs	r1, #0
 8000ff2:	5499      	strb	r1, [r3, r2]

  return status;
 8000ff4:	2317      	movs	r3, #23
 8000ff6:	18fb      	adds	r3, r7, r3
 8000ff8:	781b      	ldrb	r3, [r3, #0]
}
 8000ffa:	0018      	movs	r0, r3
 8000ffc:	46bd      	mov	sp, r7
 8000ffe:	b006      	add	sp, #24
 8001000:	bd80      	pop	{r7, pc}
	...

08001004 <HAL_DMA_Abort>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001004:	b580      	push	{r7, lr}
 8001006:	b082      	sub	sp, #8
 8001008:	af00      	add	r7, sp, #0
 800100a:	6078      	str	r0, [r7, #4]
  /* Check the DMA peripheral handle */
  if (NULL == hdma)
 800100c:	687b      	ldr	r3, [r7, #4]
 800100e:	2b00      	cmp	r3, #0
 8001010:	d101      	bne.n	8001016 <HAL_DMA_Abort+0x12>
  {
    return HAL_ERROR;
 8001012:	2301      	movs	r3, #1
 8001014:	e050      	b.n	80010b8 <HAL_DMA_Abort+0xb4>
  }

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 8001016:	687b      	ldr	r3, [r7, #4]
 8001018:	2225      	movs	r2, #37	@ 0x25
 800101a:	5c9b      	ldrb	r3, [r3, r2]
 800101c:	b2db      	uxtb	r3, r3
 800101e:	2b02      	cmp	r3, #2
 8001020:	d008      	beq.n	8001034 <HAL_DMA_Abort+0x30>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001022:	687b      	ldr	r3, [r7, #4]
 8001024:	2204      	movs	r2, #4
 8001026:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001028:	687b      	ldr	r3, [r7, #4]
 800102a:	2224      	movs	r2, #36	@ 0x24
 800102c:	2100      	movs	r1, #0
 800102e:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 8001030:	2301      	movs	r3, #1
 8001032:	e041      	b.n	80010b8 <HAL_DMA_Abort+0xb4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001034:	687b      	ldr	r3, [r7, #4]
 8001036:	681b      	ldr	r3, [r3, #0]
 8001038:	681a      	ldr	r2, [r3, #0]
 800103a:	687b      	ldr	r3, [r7, #4]
 800103c:	681b      	ldr	r3, [r3, #0]
 800103e:	210e      	movs	r1, #14
 8001040:	438a      	bics	r2, r1
 8001042:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8001044:	687b      	ldr	r3, [r7, #4]
 8001046:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001048:	681a      	ldr	r2, [r3, #0]
 800104a:	687b      	ldr	r3, [r7, #4]
 800104c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800104e:	491c      	ldr	r1, [pc, #112]	@ (80010c0 <HAL_DMA_Abort+0xbc>)
 8001050:	400a      	ands	r2, r1
 8001052:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001054:	687b      	ldr	r3, [r7, #4]
 8001056:	681b      	ldr	r3, [r3, #0]
 8001058:	681a      	ldr	r2, [r3, #0]
 800105a:	687b      	ldr	r3, [r7, #4]
 800105c:	681b      	ldr	r3, [r3, #0]
 800105e:	2101      	movs	r1, #1
 8001060:	438a      	bics	r2, r1
 8001062:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, ((DMA_FLAG_GI1) << (hdma->ChannelIndex  & 0x1cU)));
 8001064:	4b17      	ldr	r3, [pc, #92]	@ (80010c4 <HAL_DMA_Abort+0xc0>)
 8001066:	6859      	ldr	r1, [r3, #4]
 8001068:	687b      	ldr	r3, [r7, #4]
 800106a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800106c:	221c      	movs	r2, #28
 800106e:	4013      	ands	r3, r2
 8001070:	2201      	movs	r2, #1
 8001072:	409a      	lsls	r2, r3
 8001074:	4b13      	ldr	r3, [pc, #76]	@ (80010c4 <HAL_DMA_Abort+0xc0>)
 8001076:	430a      	orrs	r2, r1
 8001078:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800107a:	687b      	ldr	r3, [r7, #4]
 800107c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800107e:	687a      	ldr	r2, [r7, #4]
 8001080:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 8001082:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8001084:	687b      	ldr	r3, [r7, #4]
 8001086:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001088:	2b00      	cmp	r3, #0
 800108a:	d00c      	beq.n	80010a6 <HAL_DMA_Abort+0xa2>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800108c:	687b      	ldr	r3, [r7, #4]
 800108e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001090:	681a      	ldr	r2, [r3, #0]
 8001092:	687b      	ldr	r3, [r7, #4]
 8001094:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001096:	490a      	ldr	r1, [pc, #40]	@ (80010c0 <HAL_DMA_Abort+0xbc>)
 8001098:	400a      	ands	r2, r1
 800109a:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800109c:	687b      	ldr	r3, [r7, #4]
 800109e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80010a0:	687a      	ldr	r2, [r7, #4]
 80010a2:	6d92      	ldr	r2, [r2, #88]	@ 0x58
 80010a4:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80010a6:	687b      	ldr	r3, [r7, #4]
 80010a8:	2225      	movs	r2, #37	@ 0x25
 80010aa:	2101      	movs	r1, #1
 80010ac:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80010ae:	687b      	ldr	r3, [r7, #4]
 80010b0:	2224      	movs	r2, #36	@ 0x24
 80010b2:	2100      	movs	r1, #0
 80010b4:	5499      	strb	r1, [r3, r2]
  }

  return HAL_OK;
 80010b6:	2300      	movs	r3, #0
}
 80010b8:	0018      	movs	r0, r3
 80010ba:	46bd      	mov	sp, r7
 80010bc:	b002      	add	sp, #8
 80010be:	bd80      	pop	{r7, pc}
 80010c0:	fffffeff 	.word	0xfffffeff
 80010c4:	40020000 	.word	0x40020000

080010c8 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80010c8:	b580      	push	{r7, lr}
 80010ca:	b084      	sub	sp, #16
 80010cc:	af00      	add	r7, sp, #0
 80010ce:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = DMA1->ISR;
 80010d0:	4b55      	ldr	r3, [pc, #340]	@ (8001228 <HAL_DMA_IRQHandler+0x160>)
 80010d2:	681b      	ldr	r3, [r3, #0]
 80010d4:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 80010d6:	687b      	ldr	r3, [r7, #4]
 80010d8:	681b      	ldr	r3, [r3, #0]
 80010da:	681b      	ldr	r3, [r3, #0]
 80010dc:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1cU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 80010de:	687b      	ldr	r3, [r7, #4]
 80010e0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80010e2:	221c      	movs	r2, #28
 80010e4:	4013      	ands	r3, r2
 80010e6:	2204      	movs	r2, #4
 80010e8:	409a      	lsls	r2, r3
 80010ea:	0013      	movs	r3, r2
 80010ec:	68fa      	ldr	r2, [r7, #12]
 80010ee:	4013      	ands	r3, r2
 80010f0:	d027      	beq.n	8001142 <HAL_DMA_IRQHandler+0x7a>
 80010f2:	68bb      	ldr	r3, [r7, #8]
 80010f4:	2204      	movs	r2, #4
 80010f6:	4013      	ands	r3, r2
 80010f8:	d023      	beq.n	8001142 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80010fa:	687b      	ldr	r3, [r7, #4]
 80010fc:	681b      	ldr	r3, [r3, #0]
 80010fe:	681b      	ldr	r3, [r3, #0]
 8001100:	2220      	movs	r2, #32
 8001102:	4013      	ands	r3, r2
 8001104:	d107      	bne.n	8001116 <HAL_DMA_IRQHandler+0x4e>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001106:	687b      	ldr	r3, [r7, #4]
 8001108:	681b      	ldr	r3, [r3, #0]
 800110a:	681a      	ldr	r2, [r3, #0]
 800110c:	687b      	ldr	r3, [r7, #4]
 800110e:	681b      	ldr	r3, [r3, #0]
 8001110:	2104      	movs	r1, #4
 8001112:	438a      	bics	r2, r1
 8001114:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1cU)));
 8001116:	4b44      	ldr	r3, [pc, #272]	@ (8001228 <HAL_DMA_IRQHandler+0x160>)
 8001118:	6859      	ldr	r1, [r3, #4]
 800111a:	687b      	ldr	r3, [r7, #4]
 800111c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800111e:	221c      	movs	r2, #28
 8001120:	4013      	ands	r3, r2
 8001122:	2204      	movs	r2, #4
 8001124:	409a      	lsls	r2, r3
 8001126:	4b40      	ldr	r3, [pc, #256]	@ (8001228 <HAL_DMA_IRQHandler+0x160>)
 8001128:	430a      	orrs	r2, r1
 800112a:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 800112c:	687b      	ldr	r3, [r7, #4]
 800112e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001130:	2b00      	cmp	r3, #0
 8001132:	d100      	bne.n	8001136 <HAL_DMA_IRQHandler+0x6e>
 8001134:	e073      	b.n	800121e <HAL_DMA_IRQHandler+0x156>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8001136:	687b      	ldr	r3, [r7, #4]
 8001138:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800113a:	687a      	ldr	r2, [r7, #4]
 800113c:	0010      	movs	r0, r2
 800113e:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 8001140:	e06d      	b.n	800121e <HAL_DMA_IRQHandler+0x156>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1cU)))) && (0U != (source_it & DMA_IT_TC)))
 8001142:	687b      	ldr	r3, [r7, #4]
 8001144:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001146:	221c      	movs	r2, #28
 8001148:	4013      	ands	r3, r2
 800114a:	2202      	movs	r2, #2
 800114c:	409a      	lsls	r2, r3
 800114e:	0013      	movs	r3, r2
 8001150:	68fa      	ldr	r2, [r7, #12]
 8001152:	4013      	ands	r3, r2
 8001154:	d02e      	beq.n	80011b4 <HAL_DMA_IRQHandler+0xec>
 8001156:	68bb      	ldr	r3, [r7, #8]
 8001158:	2202      	movs	r2, #2
 800115a:	4013      	ands	r3, r2
 800115c:	d02a      	beq.n	80011b4 <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800115e:	687b      	ldr	r3, [r7, #4]
 8001160:	681b      	ldr	r3, [r3, #0]
 8001162:	681b      	ldr	r3, [r3, #0]
 8001164:	2220      	movs	r2, #32
 8001166:	4013      	ands	r3, r2
 8001168:	d10b      	bne.n	8001182 <HAL_DMA_IRQHandler+0xba>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 800116a:	687b      	ldr	r3, [r7, #4]
 800116c:	681b      	ldr	r3, [r3, #0]
 800116e:	681a      	ldr	r2, [r3, #0]
 8001170:	687b      	ldr	r3, [r7, #4]
 8001172:	681b      	ldr	r3, [r3, #0]
 8001174:	210a      	movs	r1, #10
 8001176:	438a      	bics	r2, r1
 8001178:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800117a:	687b      	ldr	r3, [r7, #4]
 800117c:	2225      	movs	r2, #37	@ 0x25
 800117e:	2101      	movs	r1, #1
 8001180:	5499      	strb	r1, [r3, r2]
    }
    /* Clear the transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1cU)));
 8001182:	4b29      	ldr	r3, [pc, #164]	@ (8001228 <HAL_DMA_IRQHandler+0x160>)
 8001184:	6859      	ldr	r1, [r3, #4]
 8001186:	687b      	ldr	r3, [r7, #4]
 8001188:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800118a:	221c      	movs	r2, #28
 800118c:	4013      	ands	r3, r2
 800118e:	2202      	movs	r2, #2
 8001190:	409a      	lsls	r2, r3
 8001192:	4b25      	ldr	r3, [pc, #148]	@ (8001228 <HAL_DMA_IRQHandler+0x160>)
 8001194:	430a      	orrs	r2, r1
 8001196:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001198:	687b      	ldr	r3, [r7, #4]
 800119a:	2224      	movs	r2, #36	@ 0x24
 800119c:	2100      	movs	r1, #0
 800119e:	5499      	strb	r1, [r3, r2]

    if (hdma->XferCpltCallback != NULL)
 80011a0:	687b      	ldr	r3, [r7, #4]
 80011a2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80011a4:	2b00      	cmp	r3, #0
 80011a6:	d03a      	beq.n	800121e <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 80011a8:	687b      	ldr	r3, [r7, #4]
 80011aa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80011ac:	687a      	ldr	r2, [r7, #4]
 80011ae:	0010      	movs	r0, r2
 80011b0:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 80011b2:	e034      	b.n	800121e <HAL_DMA_IRQHandler+0x156>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1cU))) != 0U) && ((source_it & DMA_IT_TE) != 0U))
 80011b4:	687b      	ldr	r3, [r7, #4]
 80011b6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80011b8:	221c      	movs	r2, #28
 80011ba:	4013      	ands	r3, r2
 80011bc:	2208      	movs	r2, #8
 80011be:	409a      	lsls	r2, r3
 80011c0:	0013      	movs	r3, r2
 80011c2:	68fa      	ldr	r2, [r7, #12]
 80011c4:	4013      	ands	r3, r2
 80011c6:	d02b      	beq.n	8001220 <HAL_DMA_IRQHandler+0x158>
 80011c8:	68bb      	ldr	r3, [r7, #8]
 80011ca:	2208      	movs	r2, #8
 80011cc:	4013      	ands	r3, r2
 80011ce:	d027      	beq.n	8001220 <HAL_DMA_IRQHandler+0x158>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80011d0:	687b      	ldr	r3, [r7, #4]
 80011d2:	681b      	ldr	r3, [r3, #0]
 80011d4:	681a      	ldr	r2, [r3, #0]
 80011d6:	687b      	ldr	r3, [r7, #4]
 80011d8:	681b      	ldr	r3, [r3, #0]
 80011da:	210e      	movs	r1, #14
 80011dc:	438a      	bics	r2, r1
 80011de:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_GI1 << (hdma->ChannelIndex & 0x1cU)));
 80011e0:	4b11      	ldr	r3, [pc, #68]	@ (8001228 <HAL_DMA_IRQHandler+0x160>)
 80011e2:	6859      	ldr	r1, [r3, #4]
 80011e4:	687b      	ldr	r3, [r7, #4]
 80011e6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80011e8:	221c      	movs	r2, #28
 80011ea:	4013      	ands	r3, r2
 80011ec:	2201      	movs	r2, #1
 80011ee:	409a      	lsls	r2, r3
 80011f0:	4b0d      	ldr	r3, [pc, #52]	@ (8001228 <HAL_DMA_IRQHandler+0x160>)
 80011f2:	430a      	orrs	r2, r1
 80011f4:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80011f6:	687b      	ldr	r3, [r7, #4]
 80011f8:	2201      	movs	r2, #1
 80011fa:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80011fc:	687b      	ldr	r3, [r7, #4]
 80011fe:	2225      	movs	r2, #37	@ 0x25
 8001200:	2101      	movs	r1, #1
 8001202:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001204:	687b      	ldr	r3, [r7, #4]
 8001206:	2224      	movs	r2, #36	@ 0x24
 8001208:	2100      	movs	r1, #0
 800120a:	5499      	strb	r1, [r3, r2]

    if (hdma->XferErrorCallback != NULL)
 800120c:	687b      	ldr	r3, [r7, #4]
 800120e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001210:	2b00      	cmp	r3, #0
 8001212:	d005      	beq.n	8001220 <HAL_DMA_IRQHandler+0x158>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001214:	687b      	ldr	r3, [r7, #4]
 8001216:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001218:	687a      	ldr	r2, [r7, #4]
 800121a:	0010      	movs	r0, r2
 800121c:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 800121e:	46c0      	nop			@ (mov r8, r8)
 8001220:	46c0      	nop			@ (mov r8, r8)
}
 8001222:	46bd      	mov	sp, r7
 8001224:	b004      	add	sp, #16
 8001226:	bd80      	pop	{r7, pc}
 8001228:	40020000 	.word	0x40020000

0800122c <HAL_DMA_GetError>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(const DMA_HandleTypeDef *hdma)
{
 800122c:	b580      	push	{r7, lr}
 800122e:	b082      	sub	sp, #8
 8001230:	af00      	add	r7, sp, #0
 8001232:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 8001234:	687b      	ldr	r3, [r7, #4]
 8001236:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
}
 8001238:	0018      	movs	r0, r3
 800123a:	46bd      	mov	sp, r7
 800123c:	b002      	add	sp, #8
 800123e:	bd80      	pop	{r7, pc}

08001240 <DMA_SetConfig>:
  * @param DstAddress The destination memory Buffer address
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001240:	b580      	push	{r7, lr}
 8001242:	b084      	sub	sp, #16
 8001244:	af00      	add	r7, sp, #0
 8001246:	60f8      	str	r0, [r7, #12]
 8001248:	60b9      	str	r1, [r7, #8]
 800124a:	607a      	str	r2, [r7, #4]
 800124c:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800124e:	68fb      	ldr	r3, [r7, #12]
 8001250:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001252:	68fa      	ldr	r2, [r7, #12]
 8001254:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 8001256:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 8001258:	68fb      	ldr	r3, [r7, #12]
 800125a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800125c:	2b00      	cmp	r3, #0
 800125e:	d004      	beq.n	800126a <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001260:	68fb      	ldr	r3, [r7, #12]
 8001262:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001264:	68fa      	ldr	r2, [r7, #12]
 8001266:	6d92      	ldr	r2, [r2, #88]	@ 0x58
 8001268:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_GI1 << (hdma->ChannelIndex & 0x1cU)));
 800126a:	4b14      	ldr	r3, [pc, #80]	@ (80012bc <DMA_SetConfig+0x7c>)
 800126c:	6859      	ldr	r1, [r3, #4]
 800126e:	68fb      	ldr	r3, [r7, #12]
 8001270:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001272:	221c      	movs	r2, #28
 8001274:	4013      	ands	r3, r2
 8001276:	2201      	movs	r2, #1
 8001278:	409a      	lsls	r2, r3
 800127a:	4b10      	ldr	r3, [pc, #64]	@ (80012bc <DMA_SetConfig+0x7c>)
 800127c:	430a      	orrs	r2, r1
 800127e:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8001280:	68fb      	ldr	r3, [r7, #12]
 8001282:	681b      	ldr	r3, [r3, #0]
 8001284:	683a      	ldr	r2, [r7, #0]
 8001286:	605a      	str	r2, [r3, #4]

  /* Peripheral to Memory */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8001288:	68fb      	ldr	r3, [r7, #12]
 800128a:	689b      	ldr	r3, [r3, #8]
 800128c:	2b10      	cmp	r3, #16
 800128e:	d108      	bne.n	80012a2 <DMA_SetConfig+0x62>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8001290:	68fb      	ldr	r3, [r7, #12]
 8001292:	681b      	ldr	r3, [r3, #0]
 8001294:	687a      	ldr	r2, [r7, #4]
 8001296:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8001298:	68fb      	ldr	r3, [r7, #12]
 800129a:	681b      	ldr	r3, [r3, #0]
 800129c:	68ba      	ldr	r2, [r7, #8]
 800129e:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 80012a0:	e007      	b.n	80012b2 <DMA_SetConfig+0x72>
    hdma->Instance->CPAR = SrcAddress;
 80012a2:	68fb      	ldr	r3, [r7, #12]
 80012a4:	681b      	ldr	r3, [r3, #0]
 80012a6:	68ba      	ldr	r2, [r7, #8]
 80012a8:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 80012aa:	68fb      	ldr	r3, [r7, #12]
 80012ac:	681b      	ldr	r3, [r3, #0]
 80012ae:	687a      	ldr	r2, [r7, #4]
 80012b0:	60da      	str	r2, [r3, #12]
}
 80012b2:	46c0      	nop			@ (mov r8, r8)
 80012b4:	46bd      	mov	sp, r7
 80012b6:	b004      	add	sp, #16
 80012b8:	bd80      	pop	{r7, pc}
 80012ba:	46c0      	nop			@ (mov r8, r8)
 80012bc:	40020000 	.word	0x40020000

080012c0 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80012c0:	b580      	push	{r7, lr}
 80012c2:	b084      	sub	sp, #16
 80012c4:	af00      	add	r7, sp, #0
 80012c6:	6078      	str	r0, [r7, #4]
  uint32_t channel_number;

  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 80012c8:	687b      	ldr	r3, [r7, #4]
 80012ca:	681b      	ldr	r3, [r3, #0]
 80012cc:	001a      	movs	r2, r3
 80012ce:	23ff      	movs	r3, #255	@ 0xff
 80012d0:	4013      	ands	r3, r2
 80012d2:	3b08      	subs	r3, #8
 80012d4:	2114      	movs	r1, #20
 80012d6:	0018      	movs	r0, r3
 80012d8:	f7fe ff20 	bl	800011c <__udivsi3>
 80012dc:	0003      	movs	r3, r0
 80012de:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)((uint32_t)DMAMUX1_Channel0 + \
                                                             ((hdma->ChannelIndex >> 2U) * \
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80012e4:	089b      	lsrs	r3, r3, #2
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)((uint32_t)DMAMUX1_Channel0 + \
 80012e6:	4a0a      	ldr	r2, [pc, #40]	@ (8001310 <DMA_CalcDMAMUXChannelBaseAndMask+0x50>)
 80012e8:	4694      	mov	ip, r2
 80012ea:	4463      	add	r3, ip
 80012ec:	009b      	lsls	r3, r3, #2
 80012ee:	001a      	movs	r2, r3
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	645a      	str	r2, [r3, #68]	@ 0x44
                                                              ((uint32_t)DMAMUX1_Channel1 - \
                                                               (uint32_t)DMAMUX1_Channel0)));
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	4a07      	ldr	r2, [pc, #28]	@ (8001314 <DMA_CalcDMAMUXChannelBaseAndMask+0x54>)
 80012f8:	649a      	str	r2, [r3, #72]	@ 0x48
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1cU);
 80012fa:	68fb      	ldr	r3, [r7, #12]
 80012fc:	221c      	movs	r2, #28
 80012fe:	4013      	ands	r3, r2
 8001300:	2201      	movs	r2, #1
 8001302:	409a      	lsls	r2, r3
 8001304:	687b      	ldr	r3, [r7, #4]
 8001306:	64da      	str	r2, [r3, #76]	@ 0x4c
}
 8001308:	46c0      	nop			@ (mov r8, r8)
 800130a:	46bd      	mov	sp, r7
 800130c:	b004      	add	sp, #16
 800130e:	bd80      	pop	{r7, pc}
 8001310:	10008200 	.word	0x10008200
 8001314:	40020880 	.word	0x40020880

08001318 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8001318:	b580      	push	{r7, lr}
 800131a:	b084      	sub	sp, #16
 800131c:	af00      	add	r7, sp, #0
 800131e:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	685b      	ldr	r3, [r3, #4]
 8001324:	22ff      	movs	r2, #255	@ 0xff
 8001326:	4013      	ands	r3, r2
 8001328:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + \
 800132a:	68fb      	ldr	r3, [r7, #12]
 800132c:	4a0a      	ldr	r2, [pc, #40]	@ (8001358 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 800132e:	4694      	mov	ip, r2
 8001330:	4463      	add	r3, ip
 8001332:	009b      	lsls	r3, r3, #2
 8001334:	001a      	movs	r2, r3
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	651a      	str	r2, [r3, #80]	@ 0x50
                                                                    ((request - 1U) * 4U)));

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 800133a:	687b      	ldr	r3, [r7, #4]
 800133c:	4a07      	ldr	r2, [pc, #28]	@ (800135c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 800133e:	655a      	str	r2, [r3, #84]	@ 0x54

  /* here "Request" is either DMA_REQUEST_GENERATOR0 to 4, i.e. <= 4*/
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 8001340:	68fb      	ldr	r3, [r7, #12]
 8001342:	3b01      	subs	r3, #1
 8001344:	2203      	movs	r2, #3
 8001346:	4013      	ands	r3, r2
 8001348:	2201      	movs	r2, #1
 800134a:	409a      	lsls	r2, r3
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	659a      	str	r2, [r3, #88]	@ 0x58
}
 8001350:	46c0      	nop			@ (mov r8, r8)
 8001352:	46bd      	mov	sp, r7
 8001354:	b004      	add	sp, #16
 8001356:	bd80      	pop	{r7, pc}
 8001358:	1000823f 	.word	0x1000823f
 800135c:	40020940 	.word	0x40020940

08001360 <HAL_GPIO_Init>:
  * @param  pGPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *pGPIO_Init)
{
 8001360:	b580      	push	{r7, lr}
 8001362:	b086      	sub	sp, #24
 8001364:	af00      	add	r7, sp, #0
 8001366:	6078      	str	r0, [r7, #4]
 8001368:	6039      	str	r1, [r7, #0]
  uint32_t tmp;
  uint32_t iocurrent;
  uint32_t position = 0U;
 800136a:	2300      	movs	r3, #0
 800136c:	613b      	str	r3, [r7, #16]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(pGPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(pGPIO_Init->Mode));

  /* Configure the port pins */
  while (((pGPIO_Init->Pin) >> position) != 0U)
 800136e:	e153      	b.n	8001618 <HAL_GPIO_Init+0x2b8>
  {
    /* Get current io position */
    iocurrent = (pGPIO_Init->Pin) & (1UL << position);
 8001370:	683b      	ldr	r3, [r7, #0]
 8001372:	681b      	ldr	r3, [r3, #0]
 8001374:	2101      	movs	r1, #1
 8001376:	693a      	ldr	r2, [r7, #16]
 8001378:	4091      	lsls	r1, r2
 800137a:	000a      	movs	r2, r1
 800137c:	4013      	ands	r3, r2
 800137e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0U)
 8001380:	68fb      	ldr	r3, [r7, #12]
 8001382:	2b00      	cmp	r3, #0
 8001384:	d100      	bne.n	8001388 <HAL_GPIO_Init+0x28>
 8001386:	e144      	b.n	8001612 <HAL_GPIO_Init+0x2b2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if ((pGPIO_Init->Mode == GPIO_MODE_AF_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001388:	683b      	ldr	r3, [r7, #0]
 800138a:	685b      	ldr	r3, [r3, #4]
 800138c:	2b02      	cmp	r3, #2
 800138e:	d003      	beq.n	8001398 <HAL_GPIO_Init+0x38>
 8001390:	683b      	ldr	r3, [r7, #0]
 8001392:	685b      	ldr	r3, [r3, #4]
 8001394:	2b12      	cmp	r3, #18
 8001396:	d125      	bne.n	80013e4 <HAL_GPIO_Init+0x84>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(pGPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        tmp = GPIOx->AFR[position >> 3U];
 8001398:	693b      	ldr	r3, [r7, #16]
 800139a:	08da      	lsrs	r2, r3, #3
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	3208      	adds	r2, #8
 80013a0:	0092      	lsls	r2, r2, #2
 80013a2:	58d3      	ldr	r3, [r2, r3]
 80013a4:	617b      	str	r3, [r7, #20]
        tmp &= ~(0xFUL << ((position & 0x07U) * GPIO_AFRL_AFSEL1_Pos)) ;
 80013a6:	693b      	ldr	r3, [r7, #16]
 80013a8:	2207      	movs	r2, #7
 80013aa:	4013      	ands	r3, r2
 80013ac:	009b      	lsls	r3, r3, #2
 80013ae:	220f      	movs	r2, #15
 80013b0:	409a      	lsls	r2, r3
 80013b2:	0013      	movs	r3, r2
 80013b4:	43da      	mvns	r2, r3
 80013b6:	697b      	ldr	r3, [r7, #20]
 80013b8:	4013      	ands	r3, r2
 80013ba:	617b      	str	r3, [r7, #20]
        tmp |= ((pGPIO_Init->Alternate & 0x0FUL) << ((position & 0x07U) * GPIO_AFRL_AFSEL1_Pos));
 80013bc:	683b      	ldr	r3, [r7, #0]
 80013be:	691b      	ldr	r3, [r3, #16]
 80013c0:	220f      	movs	r2, #15
 80013c2:	401a      	ands	r2, r3
 80013c4:	693b      	ldr	r3, [r7, #16]
 80013c6:	2107      	movs	r1, #7
 80013c8:	400b      	ands	r3, r1
 80013ca:	009b      	lsls	r3, r3, #2
 80013cc:	409a      	lsls	r2, r3
 80013ce:	0013      	movs	r3, r2
 80013d0:	697a      	ldr	r2, [r7, #20]
 80013d2:	4313      	orrs	r3, r2
 80013d4:	617b      	str	r3, [r7, #20]
        GPIOx->AFR[position >> 3U] = tmp;
 80013d6:	693b      	ldr	r3, [r7, #16]
 80013d8:	08da      	lsrs	r2, r3, #3
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	3208      	adds	r2, #8
 80013de:	0092      	lsls	r2, r2, #2
 80013e0:	6979      	ldr	r1, [r7, #20]
 80013e2:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      tmp = GPIOx->MODER;
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	681b      	ldr	r3, [r3, #0]
 80013e8:	617b      	str	r3, [r7, #20]
      tmp &= ~(GPIO_MODER_MODE0 << (position * GPIO_MODER_MODE1_Pos));
 80013ea:	693b      	ldr	r3, [r7, #16]
 80013ec:	005b      	lsls	r3, r3, #1
 80013ee:	2203      	movs	r2, #3
 80013f0:	409a      	lsls	r2, r3
 80013f2:	0013      	movs	r3, r2
 80013f4:	43da      	mvns	r2, r3
 80013f6:	697b      	ldr	r3, [r7, #20]
 80013f8:	4013      	ands	r3, r2
 80013fa:	617b      	str	r3, [r7, #20]
      tmp |= ((pGPIO_Init->Mode & GPIO_MODE) << (position * GPIO_MODER_MODE1_Pos));
 80013fc:	683b      	ldr	r3, [r7, #0]
 80013fe:	685b      	ldr	r3, [r3, #4]
 8001400:	2203      	movs	r2, #3
 8001402:	401a      	ands	r2, r3
 8001404:	693b      	ldr	r3, [r7, #16]
 8001406:	005b      	lsls	r3, r3, #1
 8001408:	409a      	lsls	r2, r3
 800140a:	0013      	movs	r3, r2
 800140c:	697a      	ldr	r2, [r7, #20]
 800140e:	4313      	orrs	r3, r2
 8001410:	617b      	str	r3, [r7, #20]
      GPIOx->MODER = tmp;
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	697a      	ldr	r2, [r7, #20]
 8001416:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001418:	683b      	ldr	r3, [r7, #0]
 800141a:	685b      	ldr	r3, [r3, #4]
 800141c:	2b01      	cmp	r3, #1
 800141e:	d00b      	beq.n	8001438 <HAL_GPIO_Init+0xd8>
 8001420:	683b      	ldr	r3, [r7, #0]
 8001422:	685b      	ldr	r3, [r3, #4]
 8001424:	2b02      	cmp	r3, #2
 8001426:	d007      	beq.n	8001438 <HAL_GPIO_Init+0xd8>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001428:	683b      	ldr	r3, [r7, #0]
 800142a:	685b      	ldr	r3, [r3, #4]
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800142c:	2b11      	cmp	r3, #17
 800142e:	d003      	beq.n	8001438 <HAL_GPIO_Init+0xd8>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001430:	683b      	ldr	r3, [r7, #0]
 8001432:	685b      	ldr	r3, [r3, #4]
 8001434:	2b12      	cmp	r3, #18
 8001436:	d130      	bne.n	800149a <HAL_GPIO_Init+0x13a>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(pGPIO_Init->Speed));

        /* Configure the IO Speed */
        tmp = GPIOx->OSPEEDR;
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	689b      	ldr	r3, [r3, #8]
 800143c:	617b      	str	r3, [r7, #20]
        tmp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * GPIO_OSPEEDR_OSPEED1_Pos));
 800143e:	693b      	ldr	r3, [r7, #16]
 8001440:	005b      	lsls	r3, r3, #1
 8001442:	2203      	movs	r2, #3
 8001444:	409a      	lsls	r2, r3
 8001446:	0013      	movs	r3, r2
 8001448:	43da      	mvns	r2, r3
 800144a:	697b      	ldr	r3, [r7, #20]
 800144c:	4013      	ands	r3, r2
 800144e:	617b      	str	r3, [r7, #20]
        tmp |= (pGPIO_Init->Speed << (position * GPIO_OSPEEDR_OSPEED1_Pos));
 8001450:	683b      	ldr	r3, [r7, #0]
 8001452:	68da      	ldr	r2, [r3, #12]
 8001454:	693b      	ldr	r3, [r7, #16]
 8001456:	005b      	lsls	r3, r3, #1
 8001458:	409a      	lsls	r2, r3
 800145a:	0013      	movs	r3, r2
 800145c:	697a      	ldr	r2, [r7, #20]
 800145e:	4313      	orrs	r3, r2
 8001460:	617b      	str	r3, [r7, #20]
        GPIOx->OSPEEDR = tmp;
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	697a      	ldr	r2, [r7, #20]
 8001466:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        tmp = GPIOx->OTYPER;
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	685b      	ldr	r3, [r3, #4]
 800146c:	617b      	str	r3, [r7, #20]
        tmp &= ~(GPIO_OTYPER_OT0 << position) ;
 800146e:	2201      	movs	r2, #1
 8001470:	693b      	ldr	r3, [r7, #16]
 8001472:	409a      	lsls	r2, r3
 8001474:	0013      	movs	r3, r2
 8001476:	43da      	mvns	r2, r3
 8001478:	697b      	ldr	r3, [r7, #20]
 800147a:	4013      	ands	r3, r2
 800147c:	617b      	str	r3, [r7, #20]
        tmp |= (((pGPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 800147e:	683b      	ldr	r3, [r7, #0]
 8001480:	685b      	ldr	r3, [r3, #4]
 8001482:	091b      	lsrs	r3, r3, #4
 8001484:	2201      	movs	r2, #1
 8001486:	401a      	ands	r2, r3
 8001488:	693b      	ldr	r3, [r7, #16]
 800148a:	409a      	lsls	r2, r3
 800148c:	0013      	movs	r3, r2
 800148e:	697a      	ldr	r2, [r7, #20]
 8001490:	4313      	orrs	r3, r2
 8001492:	617b      	str	r3, [r7, #20]
        GPIOx->OTYPER = tmp;
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	697a      	ldr	r2, [r7, #20]
 8001498:	605a      	str	r2, [r3, #4]
      }

      if (pGPIO_Init->Mode != GPIO_MODE_ANALOG)
 800149a:	683b      	ldr	r3, [r7, #0]
 800149c:	685b      	ldr	r3, [r3, #4]
 800149e:	2b03      	cmp	r3, #3
 80014a0:	d017      	beq.n	80014d2 <HAL_GPIO_Init+0x172>
      {
        /* Check the Pull parameters */
        assert_param(IS_GPIO_PULL(pGPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        tmp = GPIOx->PUPDR;
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	68db      	ldr	r3, [r3, #12]
 80014a6:	617b      	str	r3, [r7, #20]
        tmp &= ~(GPIO_PUPDR_PUPD0 << (position * GPIO_PUPDR_PUPD1_Pos));
 80014a8:	693b      	ldr	r3, [r7, #16]
 80014aa:	005b      	lsls	r3, r3, #1
 80014ac:	2203      	movs	r2, #3
 80014ae:	409a      	lsls	r2, r3
 80014b0:	0013      	movs	r3, r2
 80014b2:	43da      	mvns	r2, r3
 80014b4:	697b      	ldr	r3, [r7, #20]
 80014b6:	4013      	ands	r3, r2
 80014b8:	617b      	str	r3, [r7, #20]
        tmp |= ((pGPIO_Init->Pull) << (position * GPIO_PUPDR_PUPD1_Pos));
 80014ba:	683b      	ldr	r3, [r7, #0]
 80014bc:	689a      	ldr	r2, [r3, #8]
 80014be:	693b      	ldr	r3, [r7, #16]
 80014c0:	005b      	lsls	r3, r3, #1
 80014c2:	409a      	lsls	r2, r3
 80014c4:	0013      	movs	r3, r2
 80014c6:	697a      	ldr	r2, [r7, #20]
 80014c8:	4313      	orrs	r3, r2
 80014ca:	617b      	str	r3, [r7, #20]
        GPIOx->PUPDR = tmp;
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	697a      	ldr	r2, [r7, #20]
 80014d0:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((pGPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80014d2:	683b      	ldr	r3, [r7, #0]
 80014d4:	685a      	ldr	r2, [r3, #4]
 80014d6:	2380      	movs	r3, #128	@ 0x80
 80014d8:	055b      	lsls	r3, r3, #21
 80014da:	4013      	ands	r3, r2
 80014dc:	d100      	bne.n	80014e0 <HAL_GPIO_Init+0x180>
 80014de:	e098      	b.n	8001612 <HAL_GPIO_Init+0x2b2>
      {
        tmp = EXTI->EXTICR[position >> 2U];
 80014e0:	4a53      	ldr	r2, [pc, #332]	@ (8001630 <HAL_GPIO_Init+0x2d0>)
 80014e2:	693b      	ldr	r3, [r7, #16]
 80014e4:	089b      	lsrs	r3, r3, #2
 80014e6:	3318      	adds	r3, #24
 80014e8:	009b      	lsls	r3, r3, #2
 80014ea:	589b      	ldr	r3, [r3, r2]
 80014ec:	617b      	str	r3, [r7, #20]
        tmp &= ~((0x0FUL) << ((position & 0x03U) * EXTI_EXTICR1_EXTI1_Pos));
 80014ee:	693b      	ldr	r3, [r7, #16]
 80014f0:	2203      	movs	r2, #3
 80014f2:	4013      	ands	r3, r2
 80014f4:	00db      	lsls	r3, r3, #3
 80014f6:	220f      	movs	r2, #15
 80014f8:	409a      	lsls	r2, r3
 80014fa:	0013      	movs	r3, r2
 80014fc:	43da      	mvns	r2, r3
 80014fe:	697b      	ldr	r3, [r7, #20]
 8001500:	4013      	ands	r3, r2
 8001502:	617b      	str	r3, [r7, #20]
        tmp |= (GPIO_GET_INDEX(GPIOx) << ((position & 0x03U) * EXTI_EXTICR1_EXTI1_Pos));
 8001504:	687a      	ldr	r2, [r7, #4]
 8001506:	23a0      	movs	r3, #160	@ 0xa0
 8001508:	05db      	lsls	r3, r3, #23
 800150a:	429a      	cmp	r2, r3
 800150c:	d019      	beq.n	8001542 <HAL_GPIO_Init+0x1e2>
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	4a48      	ldr	r2, [pc, #288]	@ (8001634 <HAL_GPIO_Init+0x2d4>)
 8001512:	4293      	cmp	r3, r2
 8001514:	d013      	beq.n	800153e <HAL_GPIO_Init+0x1de>
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	4a47      	ldr	r2, [pc, #284]	@ (8001638 <HAL_GPIO_Init+0x2d8>)
 800151a:	4293      	cmp	r3, r2
 800151c:	d00d      	beq.n	800153a <HAL_GPIO_Init+0x1da>
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	4a46      	ldr	r2, [pc, #280]	@ (800163c <HAL_GPIO_Init+0x2dc>)
 8001522:	4293      	cmp	r3, r2
 8001524:	d007      	beq.n	8001536 <HAL_GPIO_Init+0x1d6>
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	4a45      	ldr	r2, [pc, #276]	@ (8001640 <HAL_GPIO_Init+0x2e0>)
 800152a:	4293      	cmp	r3, r2
 800152c:	d101      	bne.n	8001532 <HAL_GPIO_Init+0x1d2>
 800152e:	2305      	movs	r3, #5
 8001530:	e008      	b.n	8001544 <HAL_GPIO_Init+0x1e4>
 8001532:	2306      	movs	r3, #6
 8001534:	e006      	b.n	8001544 <HAL_GPIO_Init+0x1e4>
 8001536:	2303      	movs	r3, #3
 8001538:	e004      	b.n	8001544 <HAL_GPIO_Init+0x1e4>
 800153a:	2302      	movs	r3, #2
 800153c:	e002      	b.n	8001544 <HAL_GPIO_Init+0x1e4>
 800153e:	2301      	movs	r3, #1
 8001540:	e000      	b.n	8001544 <HAL_GPIO_Init+0x1e4>
 8001542:	2300      	movs	r3, #0
 8001544:	693a      	ldr	r2, [r7, #16]
 8001546:	2103      	movs	r1, #3
 8001548:	400a      	ands	r2, r1
 800154a:	00d2      	lsls	r2, r2, #3
 800154c:	4093      	lsls	r3, r2
 800154e:	697a      	ldr	r2, [r7, #20]
 8001550:	4313      	orrs	r3, r2
 8001552:	617b      	str	r3, [r7, #20]
        EXTI->EXTICR[position >> 2U] = tmp;
 8001554:	4936      	ldr	r1, [pc, #216]	@ (8001630 <HAL_GPIO_Init+0x2d0>)
 8001556:	693b      	ldr	r3, [r7, #16]
 8001558:	089b      	lsrs	r3, r3, #2
 800155a:	3318      	adds	r3, #24
 800155c:	009b      	lsls	r3, r3, #2
 800155e:	697a      	ldr	r2, [r7, #20]
 8001560:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        tmp = EXTI->IMR1;
 8001562:	4a33      	ldr	r2, [pc, #204]	@ (8001630 <HAL_GPIO_Init+0x2d0>)
 8001564:	2380      	movs	r3, #128	@ 0x80
 8001566:	58d3      	ldr	r3, [r2, r3]
 8001568:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 800156a:	68fb      	ldr	r3, [r7, #12]
 800156c:	43da      	mvns	r2, r3
 800156e:	697b      	ldr	r3, [r7, #20]
 8001570:	4013      	ands	r3, r2
 8001572:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001574:	683b      	ldr	r3, [r7, #0]
 8001576:	685a      	ldr	r2, [r3, #4]
 8001578:	2380      	movs	r3, #128	@ 0x80
 800157a:	025b      	lsls	r3, r3, #9
 800157c:	4013      	ands	r3, r2
 800157e:	d003      	beq.n	8001588 <HAL_GPIO_Init+0x228>
        {
          tmp |= iocurrent;
 8001580:	697a      	ldr	r2, [r7, #20]
 8001582:	68fb      	ldr	r3, [r7, #12]
 8001584:	4313      	orrs	r3, r2
 8001586:	617b      	str	r3, [r7, #20]
        }
        EXTI->IMR1 = tmp;
 8001588:	4929      	ldr	r1, [pc, #164]	@ (8001630 <HAL_GPIO_Init+0x2d0>)
 800158a:	2280      	movs	r2, #128	@ 0x80
 800158c:	697b      	ldr	r3, [r7, #20]
 800158e:	508b      	str	r3, [r1, r2]

        tmp = EXTI->EMR1;
 8001590:	4a27      	ldr	r2, [pc, #156]	@ (8001630 <HAL_GPIO_Init+0x2d0>)
 8001592:	2384      	movs	r3, #132	@ 0x84
 8001594:	58d3      	ldr	r3, [r2, r3]
 8001596:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 8001598:	68fb      	ldr	r3, [r7, #12]
 800159a:	43da      	mvns	r2, r3
 800159c:	697b      	ldr	r3, [r7, #20]
 800159e:	4013      	ands	r3, r2
 80015a0:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80015a2:	683b      	ldr	r3, [r7, #0]
 80015a4:	685a      	ldr	r2, [r3, #4]
 80015a6:	2380      	movs	r3, #128	@ 0x80
 80015a8:	029b      	lsls	r3, r3, #10
 80015aa:	4013      	ands	r3, r2
 80015ac:	d003      	beq.n	80015b6 <HAL_GPIO_Init+0x256>
        {
          tmp |= iocurrent;
 80015ae:	697a      	ldr	r2, [r7, #20]
 80015b0:	68fb      	ldr	r3, [r7, #12]
 80015b2:	4313      	orrs	r3, r2
 80015b4:	617b      	str	r3, [r7, #20]
        }
        EXTI->EMR1 = tmp;
 80015b6:	491e      	ldr	r1, [pc, #120]	@ (8001630 <HAL_GPIO_Init+0x2d0>)
 80015b8:	2284      	movs	r2, #132	@ 0x84
 80015ba:	697b      	ldr	r3, [r7, #20]
 80015bc:	508b      	str	r3, [r1, r2]

        /* Clear Rising Falling edge configuration */
        tmp = EXTI->RTSR1;
 80015be:	4b1c      	ldr	r3, [pc, #112]	@ (8001630 <HAL_GPIO_Init+0x2d0>)
 80015c0:	681b      	ldr	r3, [r3, #0]
 80015c2:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 80015c4:	68fb      	ldr	r3, [r7, #12]
 80015c6:	43da      	mvns	r2, r3
 80015c8:	697b      	ldr	r3, [r7, #20]
 80015ca:	4013      	ands	r3, r2
 80015cc:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80015ce:	683b      	ldr	r3, [r7, #0]
 80015d0:	685a      	ldr	r2, [r3, #4]
 80015d2:	2380      	movs	r3, #128	@ 0x80
 80015d4:	035b      	lsls	r3, r3, #13
 80015d6:	4013      	ands	r3, r2
 80015d8:	d003      	beq.n	80015e2 <HAL_GPIO_Init+0x282>
        {
          tmp |= iocurrent;
 80015da:	697a      	ldr	r2, [r7, #20]
 80015dc:	68fb      	ldr	r3, [r7, #12]
 80015de:	4313      	orrs	r3, r2
 80015e0:	617b      	str	r3, [r7, #20]
        }
        EXTI->RTSR1 = tmp;
 80015e2:	4b13      	ldr	r3, [pc, #76]	@ (8001630 <HAL_GPIO_Init+0x2d0>)
 80015e4:	697a      	ldr	r2, [r7, #20]
 80015e6:	601a      	str	r2, [r3, #0]

        tmp = EXTI->FTSR1;
 80015e8:	4b11      	ldr	r3, [pc, #68]	@ (8001630 <HAL_GPIO_Init+0x2d0>)
 80015ea:	685b      	ldr	r3, [r3, #4]
 80015ec:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 80015ee:	68fb      	ldr	r3, [r7, #12]
 80015f0:	43da      	mvns	r2, r3
 80015f2:	697b      	ldr	r3, [r7, #20]
 80015f4:	4013      	ands	r3, r2
 80015f6:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80015f8:	683b      	ldr	r3, [r7, #0]
 80015fa:	685a      	ldr	r2, [r3, #4]
 80015fc:	2380      	movs	r3, #128	@ 0x80
 80015fe:	039b      	lsls	r3, r3, #14
 8001600:	4013      	ands	r3, r2
 8001602:	d003      	beq.n	800160c <HAL_GPIO_Init+0x2ac>
        {
          tmp |= iocurrent;
 8001604:	697a      	ldr	r2, [r7, #20]
 8001606:	68fb      	ldr	r3, [r7, #12]
 8001608:	4313      	orrs	r3, r2
 800160a:	617b      	str	r3, [r7, #20]
        }
        EXTI->FTSR1 = tmp;
 800160c:	4b08      	ldr	r3, [pc, #32]	@ (8001630 <HAL_GPIO_Init+0x2d0>)
 800160e:	697a      	ldr	r2, [r7, #20]
 8001610:	605a      	str	r2, [r3, #4]
      }
    }

    position++;
 8001612:	693b      	ldr	r3, [r7, #16]
 8001614:	3301      	adds	r3, #1
 8001616:	613b      	str	r3, [r7, #16]
  while (((pGPIO_Init->Pin) >> position) != 0U)
 8001618:	683b      	ldr	r3, [r7, #0]
 800161a:	681a      	ldr	r2, [r3, #0]
 800161c:	693b      	ldr	r3, [r7, #16]
 800161e:	40da      	lsrs	r2, r3
 8001620:	1e13      	subs	r3, r2, #0
 8001622:	d000      	beq.n	8001626 <HAL_GPIO_Init+0x2c6>
 8001624:	e6a4      	b.n	8001370 <HAL_GPIO_Init+0x10>
  }
}
 8001626:	46c0      	nop			@ (mov r8, r8)
 8001628:	46c0      	nop			@ (mov r8, r8)
 800162a:	46bd      	mov	sp, r7
 800162c:	b006      	add	sp, #24
 800162e:	bd80      	pop	{r7, pc}
 8001630:	40021800 	.word	0x40021800
 8001634:	50000400 	.word	0x50000400
 8001638:	50000800 	.word	0x50000800
 800163c:	50000c00 	.word	0x50000c00
 8001640:	50001400 	.word	0x50001400

08001644 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001644:	b580      	push	{r7, lr}
 8001646:	b082      	sub	sp, #8
 8001648:	af00      	add	r7, sp, #0
 800164a:	6078      	str	r0, [r7, #4]
 800164c:	0008      	movs	r0, r1
 800164e:	0011      	movs	r1, r2
 8001650:	1cbb      	adds	r3, r7, #2
 8001652:	1c02      	adds	r2, r0, #0
 8001654:	801a      	strh	r2, [r3, #0]
 8001656:	1c7b      	adds	r3, r7, #1
 8001658:	1c0a      	adds	r2, r1, #0
 800165a:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800165c:	1c7b      	adds	r3, r7, #1
 800165e:	781b      	ldrb	r3, [r3, #0]
 8001660:	2b00      	cmp	r3, #0
 8001662:	d004      	beq.n	800166e <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001664:	1cbb      	adds	r3, r7, #2
 8001666:	881a      	ldrh	r2, [r3, #0]
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800166c:	e003      	b.n	8001676 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800166e:	1cbb      	adds	r3, r7, #2
 8001670:	881a      	ldrh	r2, [r3, #0]
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8001676:	46c0      	nop			@ (mov r8, r8)
 8001678:	46bd      	mov	sp, r7
 800167a:	b002      	add	sp, #8
 800167c:	bd80      	pop	{r7, pc}

0800167e <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..I) to select the GPIO peripheral for STM32C0 family
  * @param  GPIO_Pin: specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800167e:	b580      	push	{r7, lr}
 8001680:	b084      	sub	sp, #16
 8001682:	af00      	add	r7, sp, #0
 8001684:	6078      	str	r0, [r7, #4]
 8001686:	000a      	movs	r2, r1
 8001688:	1cbb      	adds	r3, r7, #2
 800168a:	801a      	strh	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	695b      	ldr	r3, [r3, #20]
 8001690:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001692:	1cbb      	adds	r3, r7, #2
 8001694:	881b      	ldrh	r3, [r3, #0]
 8001696:	68fa      	ldr	r2, [r7, #12]
 8001698:	4013      	ands	r3, r2
 800169a:	041a      	lsls	r2, r3, #16
 800169c:	68fb      	ldr	r3, [r7, #12]
 800169e:	43db      	mvns	r3, r3
 80016a0:	1cb9      	adds	r1, r7, #2
 80016a2:	8809      	ldrh	r1, [r1, #0]
 80016a4:	400b      	ands	r3, r1
 80016a6:	431a      	orrs	r2, r3
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	619a      	str	r2, [r3, #24]
}
 80016ac:	46c0      	nop			@ (mov r8, r8)
 80016ae:	46bd      	mov	sp, r7
 80016b0:	b004      	add	sp, #16
 80016b2:	bd80      	pop	{r7, pc}

080016b4 <HAL_RCC_OscConfig>:
            must adjust the number of CPU wait states in their application (SystemClock_Config() API)
            before calling the HAL_RCC_OscConfig() API to update the HSI48 clock division factor.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80016b4:	b580      	push	{r7, lr}
 80016b6:	b086      	sub	sp, #24
 80016b8:	af00      	add	r7, sp, #0
 80016ba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	2b00      	cmp	r3, #0
 80016c0:	d101      	bne.n	80016c6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80016c2:	2301      	movs	r3, #1
 80016c4:	e1d0      	b.n	8001a68 <HAL_RCC_OscConfig+0x3b4>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	681b      	ldr	r3, [r3, #0]
 80016ca:	2201      	movs	r2, #1
 80016cc:	4013      	ands	r3, r2
 80016ce:	d100      	bne.n	80016d2 <HAL_RCC_OscConfig+0x1e>
 80016d0:	e069      	b.n	80017a6 <HAL_RCC_OscConfig+0xf2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80016d2:	4bc8      	ldr	r3, [pc, #800]	@ (80019f4 <HAL_RCC_OscConfig+0x340>)
 80016d4:	689b      	ldr	r3, [r3, #8]
 80016d6:	2238      	movs	r2, #56	@ 0x38
 80016d8:	4013      	ands	r3, r2
 80016da:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock in these cases it is not allowed to be disabled */
    if (temp_sysclksrc == RCC_CFGR_SWS_HSE)
 80016dc:	697b      	ldr	r3, [r7, #20]
 80016de:	2b08      	cmp	r3, #8
 80016e0:	d105      	bne.n	80016ee <HAL_RCC_OscConfig+0x3a>
    {
      if (RCC_OscInitStruct->HSEState == RCC_HSE_OFF)
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	685b      	ldr	r3, [r3, #4]
 80016e6:	2b00      	cmp	r3, #0
 80016e8:	d15d      	bne.n	80017a6 <HAL_RCC_OscConfig+0xf2>
      {
        return HAL_ERROR;
 80016ea:	2301      	movs	r3, #1
 80016ec:	e1bc      	b.n	8001a68 <HAL_RCC_OscConfig+0x3b4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	685a      	ldr	r2, [r3, #4]
 80016f2:	2380      	movs	r3, #128	@ 0x80
 80016f4:	025b      	lsls	r3, r3, #9
 80016f6:	429a      	cmp	r2, r3
 80016f8:	d107      	bne.n	800170a <HAL_RCC_OscConfig+0x56>
 80016fa:	4bbe      	ldr	r3, [pc, #760]	@ (80019f4 <HAL_RCC_OscConfig+0x340>)
 80016fc:	681a      	ldr	r2, [r3, #0]
 80016fe:	4bbd      	ldr	r3, [pc, #756]	@ (80019f4 <HAL_RCC_OscConfig+0x340>)
 8001700:	2180      	movs	r1, #128	@ 0x80
 8001702:	0249      	lsls	r1, r1, #9
 8001704:	430a      	orrs	r2, r1
 8001706:	601a      	str	r2, [r3, #0]
 8001708:	e020      	b.n	800174c <HAL_RCC_OscConfig+0x98>
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	685a      	ldr	r2, [r3, #4]
 800170e:	23a0      	movs	r3, #160	@ 0xa0
 8001710:	02db      	lsls	r3, r3, #11
 8001712:	429a      	cmp	r2, r3
 8001714:	d10e      	bne.n	8001734 <HAL_RCC_OscConfig+0x80>
 8001716:	4bb7      	ldr	r3, [pc, #732]	@ (80019f4 <HAL_RCC_OscConfig+0x340>)
 8001718:	681a      	ldr	r2, [r3, #0]
 800171a:	4bb6      	ldr	r3, [pc, #728]	@ (80019f4 <HAL_RCC_OscConfig+0x340>)
 800171c:	2180      	movs	r1, #128	@ 0x80
 800171e:	02c9      	lsls	r1, r1, #11
 8001720:	430a      	orrs	r2, r1
 8001722:	601a      	str	r2, [r3, #0]
 8001724:	4bb3      	ldr	r3, [pc, #716]	@ (80019f4 <HAL_RCC_OscConfig+0x340>)
 8001726:	681a      	ldr	r2, [r3, #0]
 8001728:	4bb2      	ldr	r3, [pc, #712]	@ (80019f4 <HAL_RCC_OscConfig+0x340>)
 800172a:	2180      	movs	r1, #128	@ 0x80
 800172c:	0249      	lsls	r1, r1, #9
 800172e:	430a      	orrs	r2, r1
 8001730:	601a      	str	r2, [r3, #0]
 8001732:	e00b      	b.n	800174c <HAL_RCC_OscConfig+0x98>
 8001734:	4baf      	ldr	r3, [pc, #700]	@ (80019f4 <HAL_RCC_OscConfig+0x340>)
 8001736:	681a      	ldr	r2, [r3, #0]
 8001738:	4bae      	ldr	r3, [pc, #696]	@ (80019f4 <HAL_RCC_OscConfig+0x340>)
 800173a:	49af      	ldr	r1, [pc, #700]	@ (80019f8 <HAL_RCC_OscConfig+0x344>)
 800173c:	400a      	ands	r2, r1
 800173e:	601a      	str	r2, [r3, #0]
 8001740:	4bac      	ldr	r3, [pc, #688]	@ (80019f4 <HAL_RCC_OscConfig+0x340>)
 8001742:	681a      	ldr	r2, [r3, #0]
 8001744:	4bab      	ldr	r3, [pc, #684]	@ (80019f4 <HAL_RCC_OscConfig+0x340>)
 8001746:	49ad      	ldr	r1, [pc, #692]	@ (80019fc <HAL_RCC_OscConfig+0x348>)
 8001748:	400a      	ands	r2, r1
 800174a:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	685b      	ldr	r3, [r3, #4]
 8001750:	2b00      	cmp	r3, #0
 8001752:	d014      	beq.n	800177e <HAL_RCC_OscConfig+0xca>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001754:	f7ff fa38 	bl	8000bc8 <HAL_GetTick>
 8001758:	0003      	movs	r3, r0
 800175a:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800175c:	e008      	b.n	8001770 <HAL_RCC_OscConfig+0xbc>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSE_TIMEOUT_VALUE)
 800175e:	f7ff fa33 	bl	8000bc8 <HAL_GetTick>
 8001762:	0002      	movs	r2, r0
 8001764:	693b      	ldr	r3, [r7, #16]
 8001766:	1ad3      	subs	r3, r2, r3
 8001768:	2b64      	cmp	r3, #100	@ 0x64
 800176a:	d901      	bls.n	8001770 <HAL_RCC_OscConfig+0xbc>
          {
            return HAL_TIMEOUT;
 800176c:	2303      	movs	r3, #3
 800176e:	e17b      	b.n	8001a68 <HAL_RCC_OscConfig+0x3b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001770:	4ba0      	ldr	r3, [pc, #640]	@ (80019f4 <HAL_RCC_OscConfig+0x340>)
 8001772:	681a      	ldr	r2, [r3, #0]
 8001774:	2380      	movs	r3, #128	@ 0x80
 8001776:	029b      	lsls	r3, r3, #10
 8001778:	4013      	ands	r3, r2
 800177a:	d0f0      	beq.n	800175e <HAL_RCC_OscConfig+0xaa>
 800177c:	e013      	b.n	80017a6 <HAL_RCC_OscConfig+0xf2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800177e:	f7ff fa23 	bl	8000bc8 <HAL_GetTick>
 8001782:	0003      	movs	r3, r0
 8001784:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001786:	e008      	b.n	800179a <HAL_RCC_OscConfig+0xe6>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSE_TIMEOUT_VALUE)
 8001788:	f7ff fa1e 	bl	8000bc8 <HAL_GetTick>
 800178c:	0002      	movs	r2, r0
 800178e:	693b      	ldr	r3, [r7, #16]
 8001790:	1ad3      	subs	r3, r2, r3
 8001792:	2b64      	cmp	r3, #100	@ 0x64
 8001794:	d901      	bls.n	800179a <HAL_RCC_OscConfig+0xe6>
          {
            return HAL_TIMEOUT;
 8001796:	2303      	movs	r3, #3
 8001798:	e166      	b.n	8001a68 <HAL_RCC_OscConfig+0x3b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800179a:	4b96      	ldr	r3, [pc, #600]	@ (80019f4 <HAL_RCC_OscConfig+0x340>)
 800179c:	681a      	ldr	r2, [r3, #0]
 800179e:	2380      	movs	r3, #128	@ 0x80
 80017a0:	029b      	lsls	r3, r3, #10
 80017a2:	4013      	ands	r3, r2
 80017a4:	d1f0      	bne.n	8001788 <HAL_RCC_OscConfig+0xd4>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	681b      	ldr	r3, [r3, #0]
 80017aa:	2202      	movs	r2, #2
 80017ac:	4013      	ands	r3, r2
 80017ae:	d100      	bne.n	80017b2 <HAL_RCC_OscConfig+0xfe>
 80017b0:	e086      	b.n	80018c0 <HAL_RCC_OscConfig+0x20c>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI48 is used as system clock  */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80017b2:	4b90      	ldr	r3, [pc, #576]	@ (80019f4 <HAL_RCC_OscConfig+0x340>)
 80017b4:	689b      	ldr	r3, [r3, #8]
 80017b6:	2238      	movs	r2, #56	@ 0x38
 80017b8:	4013      	ands	r3, r2
 80017ba:	617b      	str	r3, [r7, #20]

    if (temp_sysclksrc == RCC_CFGR_SWS_HSI)
 80017bc:	697b      	ldr	r3, [r7, #20]
 80017be:	2b00      	cmp	r3, #0
 80017c0:	d12f      	bne.n	8001822 <HAL_RCC_OscConfig+0x16e>
    {
      /* When HSI is used as system clock it can not be disabled */
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	68db      	ldr	r3, [r3, #12]
 80017c6:	2b00      	cmp	r3, #0
 80017c8:	d101      	bne.n	80017ce <HAL_RCC_OscConfig+0x11a>
      {
        return HAL_ERROR;
 80017ca:	2301      	movs	r3, #1
 80017cc:	e14c      	b.n	8001a68 <HAL_RCC_OscConfig+0x3b4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80017ce:	4b89      	ldr	r3, [pc, #548]	@ (80019f4 <HAL_RCC_OscConfig+0x340>)
 80017d0:	685b      	ldr	r3, [r3, #4]
 80017d2:	4a8b      	ldr	r2, [pc, #556]	@ (8001a00 <HAL_RCC_OscConfig+0x34c>)
 80017d4:	4013      	ands	r3, r2
 80017d6:	0019      	movs	r1, r3
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	695b      	ldr	r3, [r3, #20]
 80017dc:	021a      	lsls	r2, r3, #8
 80017de:	4b85      	ldr	r3, [pc, #532]	@ (80019f4 <HAL_RCC_OscConfig+0x340>)
 80017e0:	430a      	orrs	r2, r1
 80017e2:	605a      	str	r2, [r3, #4]

        if (temp_sysclksrc == RCC_CFGR_SWS_HSI)
 80017e4:	697b      	ldr	r3, [r7, #20]
 80017e6:	2b00      	cmp	r3, #0
 80017e8:	d112      	bne.n	8001810 <HAL_RCC_OscConfig+0x15c>
        {
          /* Adjust the HSI48 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 80017ea:	4b82      	ldr	r3, [pc, #520]	@ (80019f4 <HAL_RCC_OscConfig+0x340>)
 80017ec:	681b      	ldr	r3, [r3, #0]
 80017ee:	4a85      	ldr	r2, [pc, #532]	@ (8001a04 <HAL_RCC_OscConfig+0x350>)
 80017f0:	4013      	ands	r3, r2
 80017f2:	0019      	movs	r1, r3
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	691a      	ldr	r2, [r3, #16]
 80017f8:	4b7e      	ldr	r3, [pc, #504]	@ (80019f4 <HAL_RCC_OscConfig+0x340>)
 80017fa:	430a      	orrs	r2, r1
 80017fc:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 80017fe:	4b7d      	ldr	r3, [pc, #500]	@ (80019f4 <HAL_RCC_OscConfig+0x340>)
 8001800:	681b      	ldr	r3, [r3, #0]
 8001802:	0adb      	lsrs	r3, r3, #11
 8001804:	2207      	movs	r2, #7
 8001806:	4013      	ands	r3, r2
 8001808:	4a7f      	ldr	r2, [pc, #508]	@ (8001a08 <HAL_RCC_OscConfig+0x354>)
 800180a:	40da      	lsrs	r2, r3
 800180c:	4b7f      	ldr	r3, [pc, #508]	@ (8001a0c <HAL_RCC_OscConfig+0x358>)
 800180e:	601a      	str	r2, [r3, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8001810:	4b7f      	ldr	r3, [pc, #508]	@ (8001a10 <HAL_RCC_OscConfig+0x35c>)
 8001812:	681b      	ldr	r3, [r3, #0]
 8001814:	0018      	movs	r0, r3
 8001816:	f7ff f97b 	bl	8000b10 <HAL_InitTick>
 800181a:	1e03      	subs	r3, r0, #0
 800181c:	d050      	beq.n	80018c0 <HAL_RCC_OscConfig+0x20c>
        {
          return HAL_ERROR;
 800181e:	2301      	movs	r3, #1
 8001820:	e122      	b.n	8001a68 <HAL_RCC_OscConfig+0x3b4>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	68db      	ldr	r3, [r3, #12]
 8001826:	2b00      	cmp	r3, #0
 8001828:	d030      	beq.n	800188c <HAL_RCC_OscConfig+0x1d8>
      {
        /* Configure the HSI48 division factor */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 800182a:	4b72      	ldr	r3, [pc, #456]	@ (80019f4 <HAL_RCC_OscConfig+0x340>)
 800182c:	681b      	ldr	r3, [r3, #0]
 800182e:	4a75      	ldr	r2, [pc, #468]	@ (8001a04 <HAL_RCC_OscConfig+0x350>)
 8001830:	4013      	ands	r3, r2
 8001832:	0019      	movs	r1, r3
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	691a      	ldr	r2, [r3, #16]
 8001838:	4b6e      	ldr	r3, [pc, #440]	@ (80019f4 <HAL_RCC_OscConfig+0x340>)
 800183a:	430a      	orrs	r2, r1
 800183c:	601a      	str	r2, [r3, #0]

        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI_ENABLE();
 800183e:	4b6d      	ldr	r3, [pc, #436]	@ (80019f4 <HAL_RCC_OscConfig+0x340>)
 8001840:	681a      	ldr	r2, [r3, #0]
 8001842:	4b6c      	ldr	r3, [pc, #432]	@ (80019f4 <HAL_RCC_OscConfig+0x340>)
 8001844:	2180      	movs	r1, #128	@ 0x80
 8001846:	0049      	lsls	r1, r1, #1
 8001848:	430a      	orrs	r2, r1
 800184a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800184c:	f7ff f9bc 	bl	8000bc8 <HAL_GetTick>
 8001850:	0003      	movs	r3, r0
 8001852:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001854:	e008      	b.n	8001868 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSI_TIMEOUT_VALUE)
 8001856:	f7ff f9b7 	bl	8000bc8 <HAL_GetTick>
 800185a:	0002      	movs	r2, r0
 800185c:	693b      	ldr	r3, [r7, #16]
 800185e:	1ad3      	subs	r3, r2, r3
 8001860:	2b02      	cmp	r3, #2
 8001862:	d901      	bls.n	8001868 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001864:	2303      	movs	r3, #3
 8001866:	e0ff      	b.n	8001a68 <HAL_RCC_OscConfig+0x3b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001868:	4b62      	ldr	r3, [pc, #392]	@ (80019f4 <HAL_RCC_OscConfig+0x340>)
 800186a:	681a      	ldr	r2, [r3, #0]
 800186c:	2380      	movs	r3, #128	@ 0x80
 800186e:	00db      	lsls	r3, r3, #3
 8001870:	4013      	ands	r3, r2
 8001872:	d0f0      	beq.n	8001856 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001874:	4b5f      	ldr	r3, [pc, #380]	@ (80019f4 <HAL_RCC_OscConfig+0x340>)
 8001876:	685b      	ldr	r3, [r3, #4]
 8001878:	4a61      	ldr	r2, [pc, #388]	@ (8001a00 <HAL_RCC_OscConfig+0x34c>)
 800187a:	4013      	ands	r3, r2
 800187c:	0019      	movs	r1, r3
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	695b      	ldr	r3, [r3, #20]
 8001882:	021a      	lsls	r2, r3, #8
 8001884:	4b5b      	ldr	r3, [pc, #364]	@ (80019f4 <HAL_RCC_OscConfig+0x340>)
 8001886:	430a      	orrs	r2, r1
 8001888:	605a      	str	r2, [r3, #4]
 800188a:	e019      	b.n	80018c0 <HAL_RCC_OscConfig+0x20c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI_DISABLE();
 800188c:	4b59      	ldr	r3, [pc, #356]	@ (80019f4 <HAL_RCC_OscConfig+0x340>)
 800188e:	681a      	ldr	r2, [r3, #0]
 8001890:	4b58      	ldr	r3, [pc, #352]	@ (80019f4 <HAL_RCC_OscConfig+0x340>)
 8001892:	4960      	ldr	r1, [pc, #384]	@ (8001a14 <HAL_RCC_OscConfig+0x360>)
 8001894:	400a      	ands	r2, r1
 8001896:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001898:	f7ff f996 	bl	8000bc8 <HAL_GetTick>
 800189c:	0003      	movs	r3, r0
 800189e:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80018a0:	e008      	b.n	80018b4 <HAL_RCC_OscConfig+0x200>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSI_TIMEOUT_VALUE)
 80018a2:	f7ff f991 	bl	8000bc8 <HAL_GetTick>
 80018a6:	0002      	movs	r2, r0
 80018a8:	693b      	ldr	r3, [r7, #16]
 80018aa:	1ad3      	subs	r3, r2, r3
 80018ac:	2b02      	cmp	r3, #2
 80018ae:	d901      	bls.n	80018b4 <HAL_RCC_OscConfig+0x200>
          {
            return HAL_TIMEOUT;
 80018b0:	2303      	movs	r3, #3
 80018b2:	e0d9      	b.n	8001a68 <HAL_RCC_OscConfig+0x3b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80018b4:	4b4f      	ldr	r3, [pc, #316]	@ (80019f4 <HAL_RCC_OscConfig+0x340>)
 80018b6:	681a      	ldr	r2, [r3, #0]
 80018b8:	2380      	movs	r3, #128	@ 0x80
 80018ba:	00db      	lsls	r3, r3, #3
 80018bc:	4013      	ands	r3, r2
 80018be:	d1f0      	bne.n	80018a2 <HAL_RCC_OscConfig+0x1ee>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	681b      	ldr	r3, [r3, #0]
 80018c4:	2208      	movs	r2, #8
 80018c6:	4013      	ands	r3, r2
 80018c8:	d042      	beq.n	8001950 <HAL_RCC_OscConfig+0x29c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_LSI)
 80018ca:	4b4a      	ldr	r3, [pc, #296]	@ (80019f4 <HAL_RCC_OscConfig+0x340>)
 80018cc:	689b      	ldr	r3, [r3, #8]
 80018ce:	2238      	movs	r2, #56	@ 0x38
 80018d0:	4013      	ands	r3, r2
 80018d2:	2b18      	cmp	r3, #24
 80018d4:	d105      	bne.n	80018e2 <HAL_RCC_OscConfig+0x22e>
    {
      /* When LSI is used as system clock it will not be disabled */
      if (RCC_OscInitStruct->LSIState == RCC_LSI_OFF)
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	699b      	ldr	r3, [r3, #24]
 80018da:	2b00      	cmp	r3, #0
 80018dc:	d138      	bne.n	8001950 <HAL_RCC_OscConfig+0x29c>
      {
        return HAL_ERROR;
 80018de:	2301      	movs	r3, #1
 80018e0:	e0c2      	b.n	8001a68 <HAL_RCC_OscConfig+0x3b4>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	699b      	ldr	r3, [r3, #24]
 80018e6:	2b00      	cmp	r3, #0
 80018e8:	d019      	beq.n	800191e <HAL_RCC_OscConfig+0x26a>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 80018ea:	4b42      	ldr	r3, [pc, #264]	@ (80019f4 <HAL_RCC_OscConfig+0x340>)
 80018ec:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 80018ee:	4b41      	ldr	r3, [pc, #260]	@ (80019f4 <HAL_RCC_OscConfig+0x340>)
 80018f0:	2101      	movs	r1, #1
 80018f2:	430a      	orrs	r2, r1
 80018f4:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80018f6:	f7ff f967 	bl	8000bc8 <HAL_GetTick>
 80018fa:	0003      	movs	r3, r0
 80018fc:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR2, RCC_CSR2_LSIRDY) == 0U)
 80018fe:	e008      	b.n	8001912 <HAL_RCC_OscConfig+0x25e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSI_TIMEOUT_VALUE)
 8001900:	f7ff f962 	bl	8000bc8 <HAL_GetTick>
 8001904:	0002      	movs	r2, r0
 8001906:	693b      	ldr	r3, [r7, #16]
 8001908:	1ad3      	subs	r3, r2, r3
 800190a:	2b02      	cmp	r3, #2
 800190c:	d901      	bls.n	8001912 <HAL_RCC_OscConfig+0x25e>
          {
            return HAL_TIMEOUT;
 800190e:	2303      	movs	r3, #3
 8001910:	e0aa      	b.n	8001a68 <HAL_RCC_OscConfig+0x3b4>
        while (READ_BIT(RCC->CSR2, RCC_CSR2_LSIRDY) == 0U)
 8001912:	4b38      	ldr	r3, [pc, #224]	@ (80019f4 <HAL_RCC_OscConfig+0x340>)
 8001914:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001916:	2202      	movs	r2, #2
 8001918:	4013      	ands	r3, r2
 800191a:	d0f1      	beq.n	8001900 <HAL_RCC_OscConfig+0x24c>
 800191c:	e018      	b.n	8001950 <HAL_RCC_OscConfig+0x29c>
        }
      }
      else
      {
        /* Disable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_DISABLE();
 800191e:	4b35      	ldr	r3, [pc, #212]	@ (80019f4 <HAL_RCC_OscConfig+0x340>)
 8001920:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8001922:	4b34      	ldr	r3, [pc, #208]	@ (80019f4 <HAL_RCC_OscConfig+0x340>)
 8001924:	2101      	movs	r1, #1
 8001926:	438a      	bics	r2, r1
 8001928:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800192a:	f7ff f94d 	bl	8000bc8 <HAL_GetTick>
 800192e:	0003      	movs	r3, r0
 8001930:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is disabled */
        while (READ_BIT(RCC->CSR2, RCC_CSR2_LSIRDY) != 0U)
 8001932:	e008      	b.n	8001946 <HAL_RCC_OscConfig+0x292>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSI_TIMEOUT_VALUE)
 8001934:	f7ff f948 	bl	8000bc8 <HAL_GetTick>
 8001938:	0002      	movs	r2, r0
 800193a:	693b      	ldr	r3, [r7, #16]
 800193c:	1ad3      	subs	r3, r2, r3
 800193e:	2b02      	cmp	r3, #2
 8001940:	d901      	bls.n	8001946 <HAL_RCC_OscConfig+0x292>
          {
            return HAL_TIMEOUT;
 8001942:	2303      	movs	r3, #3
 8001944:	e090      	b.n	8001a68 <HAL_RCC_OscConfig+0x3b4>
        while (READ_BIT(RCC->CSR2, RCC_CSR2_LSIRDY) != 0U)
 8001946:	4b2b      	ldr	r3, [pc, #172]	@ (80019f4 <HAL_RCC_OscConfig+0x340>)
 8001948:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800194a:	2202      	movs	r2, #2
 800194c:	4013      	ands	r3, r2
 800194e:	d1f1      	bne.n	8001934 <HAL_RCC_OscConfig+0x280>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	681b      	ldr	r3, [r3, #0]
 8001954:	2204      	movs	r2, #4
 8001956:	4013      	ands	r3, r2
 8001958:	d100      	bne.n	800195c <HAL_RCC_OscConfig+0x2a8>
 800195a:	e084      	b.n	8001a66 <HAL_RCC_OscConfig+0x3b2>
  {
    FlagStatus       pwrclkchanged = RESET;
 800195c:	230f      	movs	r3, #15
 800195e:	18fb      	adds	r3, r7, r3
 8001960:	2200      	movs	r2, #0
 8001962:	701a      	strb	r2, [r3, #0]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_LSE)
 8001964:	4b23      	ldr	r3, [pc, #140]	@ (80019f4 <HAL_RCC_OscConfig+0x340>)
 8001966:	689b      	ldr	r3, [r3, #8]
 8001968:	2238      	movs	r2, #56	@ 0x38
 800196a:	4013      	ands	r3, r2
 800196c:	2b20      	cmp	r3, #32
 800196e:	d106      	bne.n	800197e <HAL_RCC_OscConfig+0x2ca>
    {
      if (RCC_OscInitStruct->LSEState == RCC_LSE_OFF)
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	689b      	ldr	r3, [r3, #8]
 8001974:	2b00      	cmp	r3, #0
 8001976:	d000      	beq.n	800197a <HAL_RCC_OscConfig+0x2c6>
 8001978:	e075      	b.n	8001a66 <HAL_RCC_OscConfig+0x3b2>
      {
        return HAL_ERROR;
 800197a:	2301      	movs	r3, #1
 800197c:	e074      	b.n	8001a68 <HAL_RCC_OscConfig+0x3b4>
    }
    else
    {
      /* Update LSE configuration in RTC Domain control register    */
      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	689b      	ldr	r3, [r3, #8]
 8001982:	2b01      	cmp	r3, #1
 8001984:	d106      	bne.n	8001994 <HAL_RCC_OscConfig+0x2e0>
 8001986:	4b1b      	ldr	r3, [pc, #108]	@ (80019f4 <HAL_RCC_OscConfig+0x340>)
 8001988:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800198a:	4b1a      	ldr	r3, [pc, #104]	@ (80019f4 <HAL_RCC_OscConfig+0x340>)
 800198c:	2101      	movs	r1, #1
 800198e:	430a      	orrs	r2, r1
 8001990:	65da      	str	r2, [r3, #92]	@ 0x5c
 8001992:	e01c      	b.n	80019ce <HAL_RCC_OscConfig+0x31a>
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	689b      	ldr	r3, [r3, #8]
 8001998:	2b05      	cmp	r3, #5
 800199a:	d10c      	bne.n	80019b6 <HAL_RCC_OscConfig+0x302>
 800199c:	4b15      	ldr	r3, [pc, #84]	@ (80019f4 <HAL_RCC_OscConfig+0x340>)
 800199e:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80019a0:	4b14      	ldr	r3, [pc, #80]	@ (80019f4 <HAL_RCC_OscConfig+0x340>)
 80019a2:	2104      	movs	r1, #4
 80019a4:	430a      	orrs	r2, r1
 80019a6:	65da      	str	r2, [r3, #92]	@ 0x5c
 80019a8:	4b12      	ldr	r3, [pc, #72]	@ (80019f4 <HAL_RCC_OscConfig+0x340>)
 80019aa:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80019ac:	4b11      	ldr	r3, [pc, #68]	@ (80019f4 <HAL_RCC_OscConfig+0x340>)
 80019ae:	2101      	movs	r1, #1
 80019b0:	430a      	orrs	r2, r1
 80019b2:	65da      	str	r2, [r3, #92]	@ 0x5c
 80019b4:	e00b      	b.n	80019ce <HAL_RCC_OscConfig+0x31a>
 80019b6:	4b0f      	ldr	r3, [pc, #60]	@ (80019f4 <HAL_RCC_OscConfig+0x340>)
 80019b8:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80019ba:	4b0e      	ldr	r3, [pc, #56]	@ (80019f4 <HAL_RCC_OscConfig+0x340>)
 80019bc:	2101      	movs	r1, #1
 80019be:	438a      	bics	r2, r1
 80019c0:	65da      	str	r2, [r3, #92]	@ 0x5c
 80019c2:	4b0c      	ldr	r3, [pc, #48]	@ (80019f4 <HAL_RCC_OscConfig+0x340>)
 80019c4:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80019c6:	4b0b      	ldr	r3, [pc, #44]	@ (80019f4 <HAL_RCC_OscConfig+0x340>)
 80019c8:	2104      	movs	r1, #4
 80019ca:	438a      	bics	r2, r1
 80019cc:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	689b      	ldr	r3, [r3, #8]
 80019d2:	2b00      	cmp	r3, #0
 80019d4:	d028      	beq.n	8001a28 <HAL_RCC_OscConfig+0x374>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80019d6:	f7ff f8f7 	bl	8000bc8 <HAL_GetTick>
 80019da:	0003      	movs	r3, r0
 80019dc:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->CSR1, RCC_CSR1_LSERDY) == 0U)
 80019de:	e01d      	b.n	8001a1c <HAL_RCC_OscConfig+0x368>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80019e0:	f7ff f8f2 	bl	8000bc8 <HAL_GetTick>
 80019e4:	0002      	movs	r2, r0
 80019e6:	693b      	ldr	r3, [r7, #16]
 80019e8:	1ad3      	subs	r3, r2, r3
 80019ea:	4a0b      	ldr	r2, [pc, #44]	@ (8001a18 <HAL_RCC_OscConfig+0x364>)
 80019ec:	4293      	cmp	r3, r2
 80019ee:	d915      	bls.n	8001a1c <HAL_RCC_OscConfig+0x368>
          {
            return HAL_TIMEOUT;
 80019f0:	2303      	movs	r3, #3
 80019f2:	e039      	b.n	8001a68 <HAL_RCC_OscConfig+0x3b4>
 80019f4:	40021000 	.word	0x40021000
 80019f8:	fffeffff 	.word	0xfffeffff
 80019fc:	fffbffff 	.word	0xfffbffff
 8001a00:	ffff80ff 	.word	0xffff80ff
 8001a04:	ffffc7ff 	.word	0xffffc7ff
 8001a08:	02dc6c00 	.word	0x02dc6c00
 8001a0c:	20000008 	.word	0x20000008
 8001a10:	2000000c 	.word	0x2000000c
 8001a14:	fffffeff 	.word	0xfffffeff
 8001a18:	00001388 	.word	0x00001388
        while (READ_BIT(RCC->CSR1, RCC_CSR1_LSERDY) == 0U)
 8001a1c:	4b14      	ldr	r3, [pc, #80]	@ (8001a70 <HAL_RCC_OscConfig+0x3bc>)
 8001a1e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001a20:	2202      	movs	r2, #2
 8001a22:	4013      	ands	r3, r2
 8001a24:	d0dc      	beq.n	80019e0 <HAL_RCC_OscConfig+0x32c>
 8001a26:	e013      	b.n	8001a50 <HAL_RCC_OscConfig+0x39c>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a28:	f7ff f8ce 	bl	8000bc8 <HAL_GetTick>
 8001a2c:	0003      	movs	r3, r0
 8001a2e:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->CSR1, RCC_CSR1_LSERDY) != 0U)
 8001a30:	e009      	b.n	8001a46 <HAL_RCC_OscConfig+0x392>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001a32:	f7ff f8c9 	bl	8000bc8 <HAL_GetTick>
 8001a36:	0002      	movs	r2, r0
 8001a38:	693b      	ldr	r3, [r7, #16]
 8001a3a:	1ad3      	subs	r3, r2, r3
 8001a3c:	4a0d      	ldr	r2, [pc, #52]	@ (8001a74 <HAL_RCC_OscConfig+0x3c0>)
 8001a3e:	4293      	cmp	r3, r2
 8001a40:	d901      	bls.n	8001a46 <HAL_RCC_OscConfig+0x392>
          {
            return HAL_TIMEOUT;
 8001a42:	2303      	movs	r3, #3
 8001a44:	e010      	b.n	8001a68 <HAL_RCC_OscConfig+0x3b4>
        while (READ_BIT(RCC->CSR1, RCC_CSR1_LSERDY) != 0U)
 8001a46:	4b0a      	ldr	r3, [pc, #40]	@ (8001a70 <HAL_RCC_OscConfig+0x3bc>)
 8001a48:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001a4a:	2202      	movs	r2, #2
 8001a4c:	4013      	ands	r3, r2
 8001a4e:	d1f0      	bne.n	8001a32 <HAL_RCC_OscConfig+0x37e>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 8001a50:	230f      	movs	r3, #15
 8001a52:	18fb      	adds	r3, r7, r3
 8001a54:	781b      	ldrb	r3, [r3, #0]
 8001a56:	2b01      	cmp	r3, #1
 8001a58:	d105      	bne.n	8001a66 <HAL_RCC_OscConfig+0x3b2>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 8001a5a:	4b05      	ldr	r3, [pc, #20]	@ (8001a70 <HAL_RCC_OscConfig+0x3bc>)
 8001a5c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8001a5e:	4b04      	ldr	r3, [pc, #16]	@ (8001a70 <HAL_RCC_OscConfig+0x3bc>)
 8001a60:	4905      	ldr	r1, [pc, #20]	@ (8001a78 <HAL_RCC_OscConfig+0x3c4>)
 8001a62:	400a      	ands	r2, r1
 8001a64:	63da      	str	r2, [r3, #60]	@ 0x3c
        }
      }
    }
  }
#endif /* RCC_CR_HSIUSB48ON */
  return HAL_OK;
 8001a66:	2300      	movs	r3, #0
}
 8001a68:	0018      	movs	r0, r3
 8001a6a:	46bd      	mov	sp, r7
 8001a6c:	b006      	add	sp, #24
 8001a6e:	bd80      	pop	{r7, pc}
 8001a70:	40021000 	.word	0x40021000
 8001a74:	00001388 	.word	0x00001388
 8001a78:	efffffff 	.word	0xefffffff

08001a7c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001a7c:	b580      	push	{r7, lr}
 8001a7e:	b084      	sub	sp, #16
 8001a80:	af00      	add	r7, sp, #0
 8001a82:	6078      	str	r0, [r7, #4]
 8001a84:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	2b00      	cmp	r3, #0
 8001a8a:	d101      	bne.n	8001a90 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001a8c:	2301      	movs	r3, #1
 8001a8e:	e0e9      	b.n	8001c64 <HAL_RCC_ClockConfig+0x1e8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001a90:	4b76      	ldr	r3, [pc, #472]	@ (8001c6c <HAL_RCC_ClockConfig+0x1f0>)
 8001a92:	681b      	ldr	r3, [r3, #0]
 8001a94:	2207      	movs	r2, #7
 8001a96:	4013      	ands	r3, r2
 8001a98:	683a      	ldr	r2, [r7, #0]
 8001a9a:	429a      	cmp	r2, r3
 8001a9c:	d91e      	bls.n	8001adc <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001a9e:	4b73      	ldr	r3, [pc, #460]	@ (8001c6c <HAL_RCC_ClockConfig+0x1f0>)
 8001aa0:	681b      	ldr	r3, [r3, #0]
 8001aa2:	2207      	movs	r2, #7
 8001aa4:	4393      	bics	r3, r2
 8001aa6:	0019      	movs	r1, r3
 8001aa8:	4b70      	ldr	r3, [pc, #448]	@ (8001c6c <HAL_RCC_ClockConfig+0x1f0>)
 8001aaa:	683a      	ldr	r2, [r7, #0]
 8001aac:	430a      	orrs	r2, r1
 8001aae:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8001ab0:	f7ff f88a 	bl	8000bc8 <HAL_GetTick>
 8001ab4:	0003      	movs	r3, r0
 8001ab6:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001ab8:	e009      	b.n	8001ace <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 8001aba:	f7ff f885 	bl	8000bc8 <HAL_GetTick>
 8001abe:	0002      	movs	r2, r0
 8001ac0:	68fb      	ldr	r3, [r7, #12]
 8001ac2:	1ad3      	subs	r3, r2, r3
 8001ac4:	4a6a      	ldr	r2, [pc, #424]	@ (8001c70 <HAL_RCC_ClockConfig+0x1f4>)
 8001ac6:	4293      	cmp	r3, r2
 8001ac8:	d901      	bls.n	8001ace <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 8001aca:	2303      	movs	r3, #3
 8001acc:	e0ca      	b.n	8001c64 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001ace:	4b67      	ldr	r3, [pc, #412]	@ (8001c6c <HAL_RCC_ClockConfig+0x1f0>)
 8001ad0:	681b      	ldr	r3, [r3, #0]
 8001ad2:	2207      	movs	r2, #7
 8001ad4:	4013      	ands	r3, r2
 8001ad6:	683a      	ldr	r2, [r7, #0]
 8001ad8:	429a      	cmp	r2, r3
 8001ada:	d1ee      	bne.n	8001aba <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	681b      	ldr	r3, [r3, #0]
 8001ae0:	2202      	movs	r2, #2
 8001ae2:	4013      	ands	r3, r2
 8001ae4:	d017      	beq.n	8001b16 <HAL_RCC_ClockConfig+0x9a>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	681b      	ldr	r3, [r3, #0]
 8001aea:	2204      	movs	r2, #4
 8001aec:	4013      	ands	r3, r2
 8001aee:	d008      	beq.n	8001b02 <HAL_RCC_ClockConfig+0x86>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8001af0:	4b60      	ldr	r3, [pc, #384]	@ (8001c74 <HAL_RCC_ClockConfig+0x1f8>)
 8001af2:	689b      	ldr	r3, [r3, #8]
 8001af4:	4a60      	ldr	r2, [pc, #384]	@ (8001c78 <HAL_RCC_ClockConfig+0x1fc>)
 8001af6:	401a      	ands	r2, r3
 8001af8:	4b5e      	ldr	r3, [pc, #376]	@ (8001c74 <HAL_RCC_ClockConfig+0x1f8>)
 8001afa:	21b0      	movs	r1, #176	@ 0xb0
 8001afc:	0109      	lsls	r1, r1, #4
 8001afe:	430a      	orrs	r2, r1
 8001b00:	609a      	str	r2, [r3, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001b02:	4b5c      	ldr	r3, [pc, #368]	@ (8001c74 <HAL_RCC_ClockConfig+0x1f8>)
 8001b04:	689b      	ldr	r3, [r3, #8]
 8001b06:	4a5d      	ldr	r2, [pc, #372]	@ (8001c7c <HAL_RCC_ClockConfig+0x200>)
 8001b08:	4013      	ands	r3, r2
 8001b0a:	0019      	movs	r1, r3
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	68da      	ldr	r2, [r3, #12]
 8001b10:	4b58      	ldr	r3, [pc, #352]	@ (8001c74 <HAL_RCC_ClockConfig+0x1f8>)
 8001b12:	430a      	orrs	r2, r1
 8001b14:	609a      	str	r2, [r3, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	681b      	ldr	r3, [r3, #0]
 8001b1a:	2201      	movs	r2, #1
 8001b1c:	4013      	ands	r3, r2
 8001b1e:	d055      	beq.n	8001bcc <HAL_RCC_ClockConfig+0x150>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

#if defined(RCC_CR_SYSDIV)
    MODIFY_REG(RCC->CR, RCC_CR_SYSDIV, RCC_ClkInitStruct->SYSCLKDivider);
 8001b20:	4b54      	ldr	r3, [pc, #336]	@ (8001c74 <HAL_RCC_ClockConfig+0x1f8>)
 8001b22:	681b      	ldr	r3, [r3, #0]
 8001b24:	221c      	movs	r2, #28
 8001b26:	4393      	bics	r3, r2
 8001b28:	0019      	movs	r1, r3
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	689a      	ldr	r2, [r3, #8]
 8001b2e:	4b51      	ldr	r3, [pc, #324]	@ (8001c74 <HAL_RCC_ClockConfig+0x1f8>)
 8001b30:	430a      	orrs	r2, r1
 8001b32:	601a      	str	r2, [r3, #0]
#endif /* RCC_CR_SYSDIV */

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	685b      	ldr	r3, [r3, #4]
 8001b38:	2b01      	cmp	r3, #1
 8001b3a:	d107      	bne.n	8001b4c <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the HSE ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001b3c:	4b4d      	ldr	r3, [pc, #308]	@ (8001c74 <HAL_RCC_ClockConfig+0x1f8>)
 8001b3e:	681a      	ldr	r2, [r3, #0]
 8001b40:	2380      	movs	r3, #128	@ 0x80
 8001b42:	029b      	lsls	r3, r3, #10
 8001b44:	4013      	ands	r3, r2
 8001b46:	d11f      	bne.n	8001b88 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8001b48:	2301      	movs	r3, #1
 8001b4a:	e08b      	b.n	8001c64 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	685b      	ldr	r3, [r3, #4]
 8001b50:	2b00      	cmp	r3, #0
 8001b52:	d107      	bne.n	8001b64 <HAL_RCC_ClockConfig+0xe8>
    {
      /* Check the HSI ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001b54:	4b47      	ldr	r3, [pc, #284]	@ (8001c74 <HAL_RCC_ClockConfig+0x1f8>)
 8001b56:	681a      	ldr	r2, [r3, #0]
 8001b58:	2380      	movs	r3, #128	@ 0x80
 8001b5a:	00db      	lsls	r3, r3, #3
 8001b5c:	4013      	ands	r3, r2
 8001b5e:	d113      	bne.n	8001b88 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8001b60:	2301      	movs	r3, #1
 8001b62:	e07f      	b.n	8001c64 <HAL_RCC_ClockConfig+0x1e8>
        return HAL_ERROR;
      }
    }
#endif /* RCC_HSI48_SUPPORT */
    /* LSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	685b      	ldr	r3, [r3, #4]
 8001b68:	2b03      	cmp	r3, #3
 8001b6a:	d106      	bne.n	8001b7a <HAL_RCC_ClockConfig+0xfe>
    {
      /* Check the LSI ready flag */
      if (READ_BIT(RCC->CSR2, RCC_CSR2_LSIRDY) == 0U)
 8001b6c:	4b41      	ldr	r3, [pc, #260]	@ (8001c74 <HAL_RCC_ClockConfig+0x1f8>)
 8001b6e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001b70:	2202      	movs	r2, #2
 8001b72:	4013      	ands	r3, r2
 8001b74:	d108      	bne.n	8001b88 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8001b76:	2301      	movs	r3, #1
 8001b78:	e074      	b.n	8001c64 <HAL_RCC_ClockConfig+0x1e8>
    }
    /* LSE is selected as System Clock Source */
    else
    {
      /* Check the LSE ready flag */
      if (READ_BIT(RCC->CSR1, RCC_CSR1_LSERDY) == 0U)
 8001b7a:	4b3e      	ldr	r3, [pc, #248]	@ (8001c74 <HAL_RCC_ClockConfig+0x1f8>)
 8001b7c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001b7e:	2202      	movs	r2, #2
 8001b80:	4013      	ands	r3, r2
 8001b82:	d101      	bne.n	8001b88 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8001b84:	2301      	movs	r3, #1
 8001b86:	e06d      	b.n	8001c64 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001b88:	4b3a      	ldr	r3, [pc, #232]	@ (8001c74 <HAL_RCC_ClockConfig+0x1f8>)
 8001b8a:	689b      	ldr	r3, [r3, #8]
 8001b8c:	2207      	movs	r2, #7
 8001b8e:	4393      	bics	r3, r2
 8001b90:	0019      	movs	r1, r3
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	685a      	ldr	r2, [r3, #4]
 8001b96:	4b37      	ldr	r3, [pc, #220]	@ (8001c74 <HAL_RCC_ClockConfig+0x1f8>)
 8001b98:	430a      	orrs	r2, r1
 8001b9a:	609a      	str	r2, [r3, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001b9c:	f7ff f814 	bl	8000bc8 <HAL_GetTick>
 8001ba0:	0003      	movs	r3, r0
 8001ba2:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001ba4:	e009      	b.n	8001bba <HAL_RCC_ClockConfig+0x13e>
    {
      if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 8001ba6:	f7ff f80f 	bl	8000bc8 <HAL_GetTick>
 8001baa:	0002      	movs	r2, r0
 8001bac:	68fb      	ldr	r3, [r7, #12]
 8001bae:	1ad3      	subs	r3, r2, r3
 8001bb0:	4a2f      	ldr	r2, [pc, #188]	@ (8001c70 <HAL_RCC_ClockConfig+0x1f4>)
 8001bb2:	4293      	cmp	r3, r2
 8001bb4:	d901      	bls.n	8001bba <HAL_RCC_ClockConfig+0x13e>
      {
        return HAL_TIMEOUT;
 8001bb6:	2303      	movs	r3, #3
 8001bb8:	e054      	b.n	8001c64 <HAL_RCC_ClockConfig+0x1e8>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001bba:	4b2e      	ldr	r3, [pc, #184]	@ (8001c74 <HAL_RCC_ClockConfig+0x1f8>)
 8001bbc:	689b      	ldr	r3, [r3, #8]
 8001bbe:	2238      	movs	r2, #56	@ 0x38
 8001bc0:	401a      	ands	r2, r3
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	685b      	ldr	r3, [r3, #4]
 8001bc6:	00db      	lsls	r3, r3, #3
 8001bc8:	429a      	cmp	r2, r3
 8001bca:	d1ec      	bne.n	8001ba6 <HAL_RCC_ClockConfig+0x12a>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001bcc:	4b27      	ldr	r3, [pc, #156]	@ (8001c6c <HAL_RCC_ClockConfig+0x1f0>)
 8001bce:	681b      	ldr	r3, [r3, #0]
 8001bd0:	2207      	movs	r2, #7
 8001bd2:	4013      	ands	r3, r2
 8001bd4:	683a      	ldr	r2, [r7, #0]
 8001bd6:	429a      	cmp	r2, r3
 8001bd8:	d21e      	bcs.n	8001c18 <HAL_RCC_ClockConfig+0x19c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001bda:	4b24      	ldr	r3, [pc, #144]	@ (8001c6c <HAL_RCC_ClockConfig+0x1f0>)
 8001bdc:	681b      	ldr	r3, [r3, #0]
 8001bde:	2207      	movs	r2, #7
 8001be0:	4393      	bics	r3, r2
 8001be2:	0019      	movs	r1, r3
 8001be4:	4b21      	ldr	r3, [pc, #132]	@ (8001c6c <HAL_RCC_ClockConfig+0x1f0>)
 8001be6:	683a      	ldr	r2, [r7, #0]
 8001be8:	430a      	orrs	r2, r1
 8001bea:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8001bec:	f7fe ffec 	bl	8000bc8 <HAL_GetTick>
 8001bf0:	0003      	movs	r3, r0
 8001bf2:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001bf4:	e009      	b.n	8001c0a <HAL_RCC_ClockConfig+0x18e>
    {
      if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 8001bf6:	f7fe ffe7 	bl	8000bc8 <HAL_GetTick>
 8001bfa:	0002      	movs	r2, r0
 8001bfc:	68fb      	ldr	r3, [r7, #12]
 8001bfe:	1ad3      	subs	r3, r2, r3
 8001c00:	4a1b      	ldr	r2, [pc, #108]	@ (8001c70 <HAL_RCC_ClockConfig+0x1f4>)
 8001c02:	4293      	cmp	r3, r2
 8001c04:	d901      	bls.n	8001c0a <HAL_RCC_ClockConfig+0x18e>
      {
        return HAL_TIMEOUT;
 8001c06:	2303      	movs	r3, #3
 8001c08:	e02c      	b.n	8001c64 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001c0a:	4b18      	ldr	r3, [pc, #96]	@ (8001c6c <HAL_RCC_ClockConfig+0x1f0>)
 8001c0c:	681b      	ldr	r3, [r3, #0]
 8001c0e:	2207      	movs	r2, #7
 8001c10:	4013      	ands	r3, r2
 8001c12:	683a      	ldr	r2, [r7, #0]
 8001c14:	429a      	cmp	r2, r3
 8001c16:	d1ee      	bne.n	8001bf6 <HAL_RCC_ClockConfig+0x17a>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	681b      	ldr	r3, [r3, #0]
 8001c1c:	2204      	movs	r2, #4
 8001c1e:	4013      	ands	r3, r2
 8001c20:	d009      	beq.n	8001c36 <HAL_RCC_ClockConfig+0x1ba>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8001c22:	4b14      	ldr	r3, [pc, #80]	@ (8001c74 <HAL_RCC_ClockConfig+0x1f8>)
 8001c24:	689b      	ldr	r3, [r3, #8]
 8001c26:	4a16      	ldr	r2, [pc, #88]	@ (8001c80 <HAL_RCC_ClockConfig+0x204>)
 8001c28:	4013      	ands	r3, r2
 8001c2a:	0019      	movs	r1, r3
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	691a      	ldr	r2, [r3, #16]
 8001c30:	4b10      	ldr	r3, [pc, #64]	@ (8001c74 <HAL_RCC_ClockConfig+0x1f8>)
 8001c32:	430a      	orrs	r2, r1
 8001c34:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) \
 8001c36:	f000 f82b 	bl	8001c90 <HAL_RCC_GetSysClockFreq>
 8001c3a:	0001      	movs	r1, r0
 8001c3c:	4b0d      	ldr	r3, [pc, #52]	@ (8001c74 <HAL_RCC_ClockConfig+0x1f8>)
 8001c3e:	689b      	ldr	r3, [r3, #8]
                                                                  >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 8001c40:	0a1b      	lsrs	r3, r3, #8
 8001c42:	220f      	movs	r2, #15
 8001c44:	401a      	ands	r2, r3
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) \
 8001c46:	4b0f      	ldr	r3, [pc, #60]	@ (8001c84 <HAL_RCC_ClockConfig+0x208>)
 8001c48:	0092      	lsls	r2, r2, #2
 8001c4a:	58d3      	ldr	r3, [r2, r3]
                                                                  >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 8001c4c:	221f      	movs	r2, #31
 8001c4e:	4013      	ands	r3, r2
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) \
 8001c50:	000a      	movs	r2, r1
 8001c52:	40da      	lsrs	r2, r3
 8001c54:	4b0c      	ldr	r3, [pc, #48]	@ (8001c88 <HAL_RCC_ClockConfig+0x20c>)
 8001c56:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8001c58:	4b0c      	ldr	r3, [pc, #48]	@ (8001c8c <HAL_RCC_ClockConfig+0x210>)
 8001c5a:	681b      	ldr	r3, [r3, #0]
 8001c5c:	0018      	movs	r0, r3
 8001c5e:	f7fe ff57 	bl	8000b10 <HAL_InitTick>
 8001c62:	0003      	movs	r3, r0
}
 8001c64:	0018      	movs	r0, r3
 8001c66:	46bd      	mov	sp, r7
 8001c68:	b004      	add	sp, #16
 8001c6a:	bd80      	pop	{r7, pc}
 8001c6c:	40022000 	.word	0x40022000
 8001c70:	00001388 	.word	0x00001388
 8001c74:	40021000 	.word	0x40021000
 8001c78:	ffff84ff 	.word	0xffff84ff
 8001c7c:	fffff0ff 	.word	0xfffff0ff
 8001c80:	ffff8fff 	.word	0xffff8fff
 8001c84:	08003d30 	.word	0x08003d30
 8001c88:	20000008 	.word	0x20000008
 8001c8c:	2000000c 	.word	0x2000000c

08001c90 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001c90:	b580      	push	{r7, lr}
 8001c92:	b084      	sub	sp, #16
 8001c94:	af00      	add	r7, sp, #0
  uint32_t hsidiv;
  uint32_t sysclockfreq;
#if defined(RCC_CR_SYSDIV)
  uint32_t sysclockdiv = (uint32_t)(((RCC->CR & RCC_CR_SYSDIV) >> RCC_CR_SYSDIV_Pos) + 1U);
 8001c96:	4b23      	ldr	r3, [pc, #140]	@ (8001d24 <HAL_RCC_GetSysClockFreq+0x94>)
 8001c98:	681b      	ldr	r3, [r3, #0]
 8001c9a:	089b      	lsrs	r3, r3, #2
 8001c9c:	2207      	movs	r2, #7
 8001c9e:	4013      	ands	r3, r2
 8001ca0:	3301      	adds	r3, #1
 8001ca2:	60bb      	str	r3, [r7, #8]
#endif /* RCC_CR_SYSDIV */

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8001ca4:	4b1f      	ldr	r3, [pc, #124]	@ (8001d24 <HAL_RCC_GetSysClockFreq+0x94>)
 8001ca6:	689b      	ldr	r3, [r3, #8]
 8001ca8:	2238      	movs	r2, #56	@ 0x38
 8001caa:	4013      	ands	r3, r2
 8001cac:	d10f      	bne.n	8001cce <HAL_RCC_GetSysClockFreq+0x3e>
  {
    /* HSISYS can be derived for HSI48 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 8001cae:	4b1d      	ldr	r3, [pc, #116]	@ (8001d24 <HAL_RCC_GetSysClockFreq+0x94>)
 8001cb0:	681b      	ldr	r3, [r3, #0]
 8001cb2:	0adb      	lsrs	r3, r3, #11
 8001cb4:	2207      	movs	r2, #7
 8001cb6:	4013      	ands	r3, r2
 8001cb8:	2201      	movs	r2, #1
 8001cba:	409a      	lsls	r2, r3
 8001cbc:	0013      	movs	r3, r2
 8001cbe:	607b      	str	r3, [r7, #4]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 8001cc0:	6879      	ldr	r1, [r7, #4]
 8001cc2:	4819      	ldr	r0, [pc, #100]	@ (8001d28 <HAL_RCC_GetSysClockFreq+0x98>)
 8001cc4:	f7fe fa2a 	bl	800011c <__udivsi3>
 8001cc8:	0003      	movs	r3, r0
 8001cca:	60fb      	str	r3, [r7, #12]
 8001ccc:	e01e      	b.n	8001d0c <HAL_RCC_GetSysClockFreq+0x7c>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8001cce:	4b15      	ldr	r3, [pc, #84]	@ (8001d24 <HAL_RCC_GetSysClockFreq+0x94>)
 8001cd0:	689b      	ldr	r3, [r3, #8]
 8001cd2:	2238      	movs	r2, #56	@ 0x38
 8001cd4:	4013      	ands	r3, r2
 8001cd6:	2b08      	cmp	r3, #8
 8001cd8:	d102      	bne.n	8001ce0 <HAL_RCC_GetSysClockFreq+0x50>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8001cda:	4b14      	ldr	r3, [pc, #80]	@ (8001d2c <HAL_RCC_GetSysClockFreq+0x9c>)
 8001cdc:	60fb      	str	r3, [r7, #12]
 8001cde:	e015      	b.n	8001d0c <HAL_RCC_GetSysClockFreq+0x7c>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_LSE)
 8001ce0:	4b10      	ldr	r3, [pc, #64]	@ (8001d24 <HAL_RCC_GetSysClockFreq+0x94>)
 8001ce2:	689b      	ldr	r3, [r3, #8]
 8001ce4:	2238      	movs	r2, #56	@ 0x38
 8001ce6:	4013      	ands	r3, r2
 8001ce8:	2b20      	cmp	r3, #32
 8001cea:	d103      	bne.n	8001cf4 <HAL_RCC_GetSysClockFreq+0x64>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 8001cec:	2380      	movs	r3, #128	@ 0x80
 8001cee:	021b      	lsls	r3, r3, #8
 8001cf0:	60fb      	str	r3, [r7, #12]
 8001cf2:	e00b      	b.n	8001d0c <HAL_RCC_GetSysClockFreq+0x7c>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_LSI)
 8001cf4:	4b0b      	ldr	r3, [pc, #44]	@ (8001d24 <HAL_RCC_GetSysClockFreq+0x94>)
 8001cf6:	689b      	ldr	r3, [r3, #8]
 8001cf8:	2238      	movs	r2, #56	@ 0x38
 8001cfa:	4013      	ands	r3, r2
 8001cfc:	2b18      	cmp	r3, #24
 8001cfe:	d103      	bne.n	8001d08 <HAL_RCC_GetSysClockFreq+0x78>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 8001d00:	23fa      	movs	r3, #250	@ 0xfa
 8001d02:	01db      	lsls	r3, r3, #7
 8001d04:	60fb      	str	r3, [r7, #12]
 8001d06:	e001      	b.n	8001d0c <HAL_RCC_GetSysClockFreq+0x7c>
    sysclockfreq = HSI48_VALUE;
  }
#endif /* RCC_HSI48_SUPPORT */
  else
  {
    sysclockfreq = 0U;
 8001d08:	2300      	movs	r3, #0
 8001d0a:	60fb      	str	r3, [r7, #12]
  }
#if defined(RCC_CR_SYSDIV)
  sysclockfreq = sysclockfreq / sysclockdiv;
 8001d0c:	68b9      	ldr	r1, [r7, #8]
 8001d0e:	68f8      	ldr	r0, [r7, #12]
 8001d10:	f7fe fa04 	bl	800011c <__udivsi3>
 8001d14:	0003      	movs	r3, r0
 8001d16:	60fb      	str	r3, [r7, #12]
#endif /* RCC_CR_SYSDIV */
  return sysclockfreq;
 8001d18:	68fb      	ldr	r3, [r7, #12]
}
 8001d1a:	0018      	movs	r0, r3
 8001d1c:	46bd      	mov	sp, r7
 8001d1e:	b004      	add	sp, #16
 8001d20:	bd80      	pop	{r7, pc}
 8001d22:	46c0      	nop			@ (mov r8, r8)
 8001d24:	40021000 	.word	0x40021000
 8001d28:	02dc6c00 	.word	0x02dc6c00
 8001d2c:	007a1200 	.word	0x007a1200

08001d30 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001d30:	b580      	push	{r7, lr}
 8001d32:	af00      	add	r7, sp, #0
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) \
 8001d34:	f7ff ffac 	bl	8001c90 <HAL_RCC_GetSysClockFreq>
 8001d38:	0001      	movs	r1, r0
 8001d3a:	4b09      	ldr	r3, [pc, #36]	@ (8001d60 <HAL_RCC_GetHCLKFreq+0x30>)
 8001d3c:	689b      	ldr	r3, [r3, #8]
                                                                  >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 8001d3e:	0a1b      	lsrs	r3, r3, #8
 8001d40:	220f      	movs	r2, #15
 8001d42:	401a      	ands	r2, r3
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) \
 8001d44:	4b07      	ldr	r3, [pc, #28]	@ (8001d64 <HAL_RCC_GetHCLKFreq+0x34>)
 8001d46:	0092      	lsls	r2, r2, #2
 8001d48:	58d3      	ldr	r3, [r2, r3]
                                                                  >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 8001d4a:	221f      	movs	r2, #31
 8001d4c:	4013      	ands	r3, r2
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) \
 8001d4e:	000a      	movs	r2, r1
 8001d50:	40da      	lsrs	r2, r3
 8001d52:	4b05      	ldr	r3, [pc, #20]	@ (8001d68 <HAL_RCC_GetHCLKFreq+0x38>)
 8001d54:	601a      	str	r2, [r3, #0]
  return SystemCoreClock;
 8001d56:	4b04      	ldr	r3, [pc, #16]	@ (8001d68 <HAL_RCC_GetHCLKFreq+0x38>)
 8001d58:	681b      	ldr	r3, [r3, #0]
}
 8001d5a:	0018      	movs	r0, r3
 8001d5c:	46bd      	mov	sp, r7
 8001d5e:	bd80      	pop	{r7, pc}
 8001d60:	40021000 	.word	0x40021000
 8001d64:	08003d30 	.word	0x08003d30
 8001d68:	20000008 	.word	0x20000008

08001d6c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001d6c:	b580      	push	{r7, lr}
 8001d6e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE) >> RCC_CFGR_PPRE_Pos]) & 0x1FU));
 8001d70:	f7ff ffde 	bl	8001d30 <HAL_RCC_GetHCLKFreq>
 8001d74:	0001      	movs	r1, r0
 8001d76:	4b07      	ldr	r3, [pc, #28]	@ (8001d94 <HAL_RCC_GetPCLK1Freq+0x28>)
 8001d78:	689b      	ldr	r3, [r3, #8]
 8001d7a:	0b1b      	lsrs	r3, r3, #12
 8001d7c:	2207      	movs	r2, #7
 8001d7e:	401a      	ands	r2, r3
 8001d80:	4b05      	ldr	r3, [pc, #20]	@ (8001d98 <HAL_RCC_GetPCLK1Freq+0x2c>)
 8001d82:	0092      	lsls	r2, r2, #2
 8001d84:	58d3      	ldr	r3, [r2, r3]
 8001d86:	221f      	movs	r2, #31
 8001d88:	4013      	ands	r3, r2
 8001d8a:	40d9      	lsrs	r1, r3
 8001d8c:	000b      	movs	r3, r1
}
 8001d8e:	0018      	movs	r0, r3
 8001d90:	46bd      	mov	sp, r7
 8001d92:	bd80      	pop	{r7, pc}
 8001d94:	40021000 	.word	0x40021000
 8001d98:	08003d70 	.word	0x08003d70

08001d9c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8001d9c:	b580      	push	{r7, lr}
 8001d9e:	b082      	sub	sp, #8
 8001da0:	af00      	add	r7, sp, #0
 8001da2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	2b00      	cmp	r3, #0
 8001da8:	d101      	bne.n	8001dae <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8001daa:	2301      	movs	r3, #1
 8001dac:	e046      	b.n	8001e3c <HAL_UART_Init+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	2288      	movs	r2, #136	@ 0x88
 8001db2:	589b      	ldr	r3, [r3, r2]
 8001db4:	2b00      	cmp	r3, #0
 8001db6:	d107      	bne.n	8001dc8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	2284      	movs	r2, #132	@ 0x84
 8001dbc:	2100      	movs	r1, #0
 8001dbe:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	0018      	movs	r0, r3
 8001dc4:	f7fe fd1e 	bl	8000804 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	2288      	movs	r2, #136	@ 0x88
 8001dcc:	2124      	movs	r1, #36	@ 0x24
 8001dce:	5099      	str	r1, [r3, r2]

  __HAL_UART_DISABLE(huart);
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	681b      	ldr	r3, [r3, #0]
 8001dd4:	681a      	ldr	r2, [r3, #0]
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	681b      	ldr	r3, [r3, #0]
 8001dda:	2101      	movs	r1, #1
 8001ddc:	438a      	bics	r2, r1
 8001dde:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001de4:	2b00      	cmp	r3, #0
 8001de6:	d003      	beq.n	8001df0 <HAL_UART_Init+0x54>
  {
    UART_AdvFeatureConfig(huart);
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	0018      	movs	r0, r3
 8001dec:	f000 fb5c 	bl	80024a8 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	0018      	movs	r0, r3
 8001df4:	f000 f9c2 	bl	800217c <UART_SetConfig>
 8001df8:	0003      	movs	r3, r0
 8001dfa:	2b01      	cmp	r3, #1
 8001dfc:	d101      	bne.n	8001e02 <HAL_UART_Init+0x66>
  {
    return HAL_ERROR;
 8001dfe:	2301      	movs	r3, #1
 8001e00:	e01c      	b.n	8001e3c <HAL_UART_Init+0xa0>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	681b      	ldr	r3, [r3, #0]
 8001e06:	685a      	ldr	r2, [r3, #4]
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	681b      	ldr	r3, [r3, #0]
 8001e0c:	490d      	ldr	r1, [pc, #52]	@ (8001e44 <HAL_UART_Init+0xa8>)
 8001e0e:	400a      	ands	r2, r1
 8001e10:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	681b      	ldr	r3, [r3, #0]
 8001e16:	689a      	ldr	r2, [r3, #8]
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	681b      	ldr	r3, [r3, #0]
 8001e1c:	212a      	movs	r1, #42	@ 0x2a
 8001e1e:	438a      	bics	r2, r1
 8001e20:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	681b      	ldr	r3, [r3, #0]
 8001e26:	681a      	ldr	r2, [r3, #0]
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	681b      	ldr	r3, [r3, #0]
 8001e2c:	2101      	movs	r1, #1
 8001e2e:	430a      	orrs	r2, r1
 8001e30:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	0018      	movs	r0, r3
 8001e36:	f000 fbeb 	bl	8002610 <UART_CheckIdleState>
 8001e3a:	0003      	movs	r3, r0
}
 8001e3c:	0018      	movs	r0, r3
 8001e3e:	46bd      	mov	sp, r7
 8001e40:	b002      	add	sp, #8
 8001e42:	bd80      	pop	{r7, pc}
 8001e44:	ffffb7ff 	.word	0xffffb7ff

08001e48 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001e48:	b580      	push	{r7, lr}
 8001e4a:	b08a      	sub	sp, #40	@ 0x28
 8001e4c:	af02      	add	r7, sp, #8
 8001e4e:	60f8      	str	r0, [r7, #12]
 8001e50:	60b9      	str	r1, [r7, #8]
 8001e52:	603b      	str	r3, [r7, #0]
 8001e54:	1dbb      	adds	r3, r7, #6
 8001e56:	801a      	strh	r2, [r3, #0]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8001e58:	68fb      	ldr	r3, [r7, #12]
 8001e5a:	2288      	movs	r2, #136	@ 0x88
 8001e5c:	589b      	ldr	r3, [r3, r2]
 8001e5e:	2b20      	cmp	r3, #32
 8001e60:	d000      	beq.n	8001e64 <HAL_UART_Transmit+0x1c>
 8001e62:	e090      	b.n	8001f86 <HAL_UART_Transmit+0x13e>
  {
    if ((pData == NULL) || (Size == 0U))
 8001e64:	68bb      	ldr	r3, [r7, #8]
 8001e66:	2b00      	cmp	r3, #0
 8001e68:	d003      	beq.n	8001e72 <HAL_UART_Transmit+0x2a>
 8001e6a:	1dbb      	adds	r3, r7, #6
 8001e6c:	881b      	ldrh	r3, [r3, #0]
 8001e6e:	2b00      	cmp	r3, #0
 8001e70:	d101      	bne.n	8001e76 <HAL_UART_Transmit+0x2e>
    {
      return  HAL_ERROR;
 8001e72:	2301      	movs	r3, #1
 8001e74:	e088      	b.n	8001f88 <HAL_UART_Transmit+0x140>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001e76:	68fb      	ldr	r3, [r7, #12]
 8001e78:	689a      	ldr	r2, [r3, #8]
 8001e7a:	2380      	movs	r3, #128	@ 0x80
 8001e7c:	015b      	lsls	r3, r3, #5
 8001e7e:	429a      	cmp	r2, r3
 8001e80:	d109      	bne.n	8001e96 <HAL_UART_Transmit+0x4e>
 8001e82:	68fb      	ldr	r3, [r7, #12]
 8001e84:	691b      	ldr	r3, [r3, #16]
 8001e86:	2b00      	cmp	r3, #0
 8001e88:	d105      	bne.n	8001e96 <HAL_UART_Transmit+0x4e>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8001e8a:	68bb      	ldr	r3, [r7, #8]
 8001e8c:	2201      	movs	r2, #1
 8001e8e:	4013      	ands	r3, r2
 8001e90:	d001      	beq.n	8001e96 <HAL_UART_Transmit+0x4e>
      {
        return  HAL_ERROR;
 8001e92:	2301      	movs	r3, #1
 8001e94:	e078      	b.n	8001f88 <HAL_UART_Transmit+0x140>
      }
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001e96:	68fb      	ldr	r3, [r7, #12]
 8001e98:	2290      	movs	r2, #144	@ 0x90
 8001e9a:	2100      	movs	r1, #0
 8001e9c:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8001e9e:	68fb      	ldr	r3, [r7, #12]
 8001ea0:	2288      	movs	r2, #136	@ 0x88
 8001ea2:	2121      	movs	r1, #33	@ 0x21
 8001ea4:	5099      	str	r1, [r3, r2]

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8001ea6:	f7fe fe8f 	bl	8000bc8 <HAL_GetTick>
 8001eaa:	0003      	movs	r3, r0
 8001eac:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 8001eae:	68fb      	ldr	r3, [r7, #12]
 8001eb0:	1dba      	adds	r2, r7, #6
 8001eb2:	2154      	movs	r1, #84	@ 0x54
 8001eb4:	8812      	ldrh	r2, [r2, #0]
 8001eb6:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 8001eb8:	68fb      	ldr	r3, [r7, #12]
 8001eba:	1dba      	adds	r2, r7, #6
 8001ebc:	2156      	movs	r1, #86	@ 0x56
 8001ebe:	8812      	ldrh	r2, [r2, #0]
 8001ec0:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001ec2:	68fb      	ldr	r3, [r7, #12]
 8001ec4:	689a      	ldr	r2, [r3, #8]
 8001ec6:	2380      	movs	r3, #128	@ 0x80
 8001ec8:	015b      	lsls	r3, r3, #5
 8001eca:	429a      	cmp	r2, r3
 8001ecc:	d108      	bne.n	8001ee0 <HAL_UART_Transmit+0x98>
 8001ece:	68fb      	ldr	r3, [r7, #12]
 8001ed0:	691b      	ldr	r3, [r3, #16]
 8001ed2:	2b00      	cmp	r3, #0
 8001ed4:	d104      	bne.n	8001ee0 <HAL_UART_Transmit+0x98>
    {
      pdata8bits  = NULL;
 8001ed6:	2300      	movs	r3, #0
 8001ed8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8001eda:	68bb      	ldr	r3, [r7, #8]
 8001edc:	61bb      	str	r3, [r7, #24]
 8001ede:	e003      	b.n	8001ee8 <HAL_UART_Transmit+0xa0>
    }
    else
    {
      pdata8bits  = pData;
 8001ee0:	68bb      	ldr	r3, [r7, #8]
 8001ee2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8001ee4:	2300      	movs	r3, #0
 8001ee6:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8001ee8:	e030      	b.n	8001f4c <HAL_UART_Transmit+0x104>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8001eea:	697a      	ldr	r2, [r7, #20]
 8001eec:	68f8      	ldr	r0, [r7, #12]
 8001eee:	683b      	ldr	r3, [r7, #0]
 8001ef0:	9300      	str	r3, [sp, #0]
 8001ef2:	0013      	movs	r3, r2
 8001ef4:	2200      	movs	r2, #0
 8001ef6:	2180      	movs	r1, #128	@ 0x80
 8001ef8:	f000 fc34 	bl	8002764 <UART_WaitOnFlagUntilTimeout>
 8001efc:	1e03      	subs	r3, r0, #0
 8001efe:	d005      	beq.n	8001f0c <HAL_UART_Transmit+0xc4>
      {

        huart->gState = HAL_UART_STATE_READY;
 8001f00:	68fb      	ldr	r3, [r7, #12]
 8001f02:	2288      	movs	r2, #136	@ 0x88
 8001f04:	2120      	movs	r1, #32
 8001f06:	5099      	str	r1, [r3, r2]

        return HAL_TIMEOUT;
 8001f08:	2303      	movs	r3, #3
 8001f0a:	e03d      	b.n	8001f88 <HAL_UART_Transmit+0x140>
      }
      if (pdata8bits == NULL)
 8001f0c:	69fb      	ldr	r3, [r7, #28]
 8001f0e:	2b00      	cmp	r3, #0
 8001f10:	d10b      	bne.n	8001f2a <HAL_UART_Transmit+0xe2>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8001f12:	69bb      	ldr	r3, [r7, #24]
 8001f14:	881b      	ldrh	r3, [r3, #0]
 8001f16:	001a      	movs	r2, r3
 8001f18:	68fb      	ldr	r3, [r7, #12]
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	05d2      	lsls	r2, r2, #23
 8001f1e:	0dd2      	lsrs	r2, r2, #23
 8001f20:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8001f22:	69bb      	ldr	r3, [r7, #24]
 8001f24:	3302      	adds	r3, #2
 8001f26:	61bb      	str	r3, [r7, #24]
 8001f28:	e007      	b.n	8001f3a <HAL_UART_Transmit+0xf2>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8001f2a:	69fb      	ldr	r3, [r7, #28]
 8001f2c:	781a      	ldrb	r2, [r3, #0]
 8001f2e:	68fb      	ldr	r3, [r7, #12]
 8001f30:	681b      	ldr	r3, [r3, #0]
 8001f32:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8001f34:	69fb      	ldr	r3, [r7, #28]
 8001f36:	3301      	adds	r3, #1
 8001f38:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8001f3a:	68fb      	ldr	r3, [r7, #12]
 8001f3c:	2256      	movs	r2, #86	@ 0x56
 8001f3e:	5a9b      	ldrh	r3, [r3, r2]
 8001f40:	b29b      	uxth	r3, r3
 8001f42:	3b01      	subs	r3, #1
 8001f44:	b299      	uxth	r1, r3
 8001f46:	68fb      	ldr	r3, [r7, #12]
 8001f48:	2256      	movs	r2, #86	@ 0x56
 8001f4a:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 8001f4c:	68fb      	ldr	r3, [r7, #12]
 8001f4e:	2256      	movs	r2, #86	@ 0x56
 8001f50:	5a9b      	ldrh	r3, [r3, r2]
 8001f52:	b29b      	uxth	r3, r3
 8001f54:	2b00      	cmp	r3, #0
 8001f56:	d1c8      	bne.n	8001eea <HAL_UART_Transmit+0xa2>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8001f58:	697a      	ldr	r2, [r7, #20]
 8001f5a:	68f8      	ldr	r0, [r7, #12]
 8001f5c:	683b      	ldr	r3, [r7, #0]
 8001f5e:	9300      	str	r3, [sp, #0]
 8001f60:	0013      	movs	r3, r2
 8001f62:	2200      	movs	r2, #0
 8001f64:	2140      	movs	r1, #64	@ 0x40
 8001f66:	f000 fbfd 	bl	8002764 <UART_WaitOnFlagUntilTimeout>
 8001f6a:	1e03      	subs	r3, r0, #0
 8001f6c:	d005      	beq.n	8001f7a <HAL_UART_Transmit+0x132>
    {
      huart->gState = HAL_UART_STATE_READY;
 8001f6e:	68fb      	ldr	r3, [r7, #12]
 8001f70:	2288      	movs	r2, #136	@ 0x88
 8001f72:	2120      	movs	r1, #32
 8001f74:	5099      	str	r1, [r3, r2]

      return HAL_TIMEOUT;
 8001f76:	2303      	movs	r3, #3
 8001f78:	e006      	b.n	8001f88 <HAL_UART_Transmit+0x140>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8001f7a:	68fb      	ldr	r3, [r7, #12]
 8001f7c:	2288      	movs	r2, #136	@ 0x88
 8001f7e:	2120      	movs	r1, #32
 8001f80:	5099      	str	r1, [r3, r2]

    return HAL_OK;
 8001f82:	2300      	movs	r3, #0
 8001f84:	e000      	b.n	8001f88 <HAL_UART_Transmit+0x140>
  }
  else
  {
    return HAL_BUSY;
 8001f86:	2302      	movs	r3, #2
  }
}
 8001f88:	0018      	movs	r0, r3
 8001f8a:	46bd      	mov	sp, r7
 8001f8c:	b008      	add	sp, #32
 8001f8e:	bd80      	pop	{r7, pc}

08001f90 <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8001f90:	b580      	push	{r7, lr}
 8001f92:	b088      	sub	sp, #32
 8001f94:	af00      	add	r7, sp, #0
 8001f96:	60f8      	str	r0, [r7, #12]
 8001f98:	60b9      	str	r1, [r7, #8]
 8001f9a:	1dbb      	adds	r3, r7, #6
 8001f9c:	801a      	strh	r2, [r3, #0]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8001f9e:	68fb      	ldr	r3, [r7, #12]
 8001fa0:	228c      	movs	r2, #140	@ 0x8c
 8001fa2:	589b      	ldr	r3, [r3, r2]
 8001fa4:	2b20      	cmp	r3, #32
 8001fa6:	d145      	bne.n	8002034 <HAL_UART_Receive_DMA+0xa4>
  {
    if ((pData == NULL) || (Size == 0U))
 8001fa8:	68bb      	ldr	r3, [r7, #8]
 8001faa:	2b00      	cmp	r3, #0
 8001fac:	d003      	beq.n	8001fb6 <HAL_UART_Receive_DMA+0x26>
 8001fae:	1dbb      	adds	r3, r7, #6
 8001fb0:	881b      	ldrh	r3, [r3, #0]
 8001fb2:	2b00      	cmp	r3, #0
 8001fb4:	d101      	bne.n	8001fba <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 8001fb6:	2301      	movs	r3, #1
 8001fb8:	e03d      	b.n	8002036 <HAL_UART_Receive_DMA+0xa6>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data copy from RDR will be
       handled by DMA from a u16 frontier. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001fba:	68fb      	ldr	r3, [r7, #12]
 8001fbc:	689a      	ldr	r2, [r3, #8]
 8001fbe:	2380      	movs	r3, #128	@ 0x80
 8001fc0:	015b      	lsls	r3, r3, #5
 8001fc2:	429a      	cmp	r2, r3
 8001fc4:	d109      	bne.n	8001fda <HAL_UART_Receive_DMA+0x4a>
 8001fc6:	68fb      	ldr	r3, [r7, #12]
 8001fc8:	691b      	ldr	r3, [r3, #16]
 8001fca:	2b00      	cmp	r3, #0
 8001fcc:	d105      	bne.n	8001fda <HAL_UART_Receive_DMA+0x4a>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8001fce:	68bb      	ldr	r3, [r7, #8]
 8001fd0:	2201      	movs	r2, #1
 8001fd2:	4013      	ands	r3, r2
 8001fd4:	d001      	beq.n	8001fda <HAL_UART_Receive_DMA+0x4a>
      {
        return  HAL_ERROR;
 8001fd6:	2301      	movs	r3, #1
 8001fd8:	e02d      	b.n	8002036 <HAL_UART_Receive_DMA+0xa6>
      }
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8001fda:	68fb      	ldr	r3, [r7, #12]
 8001fdc:	2200      	movs	r2, #0
 8001fde:	66da      	str	r2, [r3, #108]	@ 0x6c

    /* Check that USART RTOEN bit is set */
    if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8001fe0:	68fb      	ldr	r3, [r7, #12]
 8001fe2:	681b      	ldr	r3, [r3, #0]
 8001fe4:	685a      	ldr	r2, [r3, #4]
 8001fe6:	2380      	movs	r3, #128	@ 0x80
 8001fe8:	041b      	lsls	r3, r3, #16
 8001fea:	4013      	ands	r3, r2
 8001fec:	d019      	beq.n	8002022 <HAL_UART_Receive_DMA+0x92>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8001fee:	f3ef 8310 	mrs	r3, PRIMASK
 8001ff2:	613b      	str	r3, [r7, #16]
  return(result);
 8001ff4:	693b      	ldr	r3, [r7, #16]
    {
      /* Enable the UART Receiver Timeout Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8001ff6:	61fb      	str	r3, [r7, #28]
 8001ff8:	2301      	movs	r3, #1
 8001ffa:	617b      	str	r3, [r7, #20]
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001ffc:	697b      	ldr	r3, [r7, #20]
 8001ffe:	f383 8810 	msr	PRIMASK, r3
}
 8002002:	46c0      	nop			@ (mov r8, r8)
 8002004:	68fb      	ldr	r3, [r7, #12]
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	681a      	ldr	r2, [r3, #0]
 800200a:	68fb      	ldr	r3, [r7, #12]
 800200c:	681b      	ldr	r3, [r3, #0]
 800200e:	2180      	movs	r1, #128	@ 0x80
 8002010:	04c9      	lsls	r1, r1, #19
 8002012:	430a      	orrs	r2, r1
 8002014:	601a      	str	r2, [r3, #0]
 8002016:	69fb      	ldr	r3, [r7, #28]
 8002018:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800201a:	69bb      	ldr	r3, [r7, #24]
 800201c:	f383 8810 	msr	PRIMASK, r3
}
 8002020:	46c0      	nop			@ (mov r8, r8)
    }

    return (UART_Start_Receive_DMA(huart, pData, Size));
 8002022:	1dbb      	adds	r3, r7, #6
 8002024:	881a      	ldrh	r2, [r3, #0]
 8002026:	68b9      	ldr	r1, [r7, #8]
 8002028:	68fb      	ldr	r3, [r7, #12]
 800202a:	0018      	movs	r0, r3
 800202c:	f000 fc0a 	bl	8002844 <UART_Start_Receive_DMA>
 8002030:	0003      	movs	r3, r0
 8002032:	e000      	b.n	8002036 <HAL_UART_Receive_DMA+0xa6>
  }
  else
  {
    return HAL_BUSY;
 8002034:	2302      	movs	r3, #2
  }
}
 8002036:	0018      	movs	r0, r3
 8002038:	46bd      	mov	sp, r7
 800203a:	b008      	add	sp, #32
 800203c:	bd80      	pop	{r7, pc}

0800203e <HAL_UART_DMAStop>:
  * @brief Stop the DMA Transfer.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_DMAStop(UART_HandleTypeDef *huart)
{
 800203e:	b580      	push	{r7, lr}
 8002040:	b08c      	sub	sp, #48	@ 0x30
 8002042:	af00      	add	r7, sp, #0
 8002044:	6078      	str	r0, [r7, #4]
     HAL_UART_TxHalfCpltCallback / HAL_UART_RxHalfCpltCallback:
     indeed, when HAL_DMA_Abort() API is called, the DMA TX/RX Transfer or Half Transfer complete
     interrupt is generated if the DMA transfer interruption occurs at the middle or at the end of
     the stream and the corresponding call back is executed. */

  const HAL_UART_StateTypeDef gstate = huart->gState;
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	2288      	movs	r2, #136	@ 0x88
 800204a:	589b      	ldr	r3, [r3, r2]
 800204c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	228c      	movs	r2, #140	@ 0x8c
 8002052:	589b      	ldr	r3, [r3, r2]
 8002054:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	681b      	ldr	r3, [r3, #0]
 800205a:	689b      	ldr	r3, [r3, #8]
 800205c:	2280      	movs	r2, #128	@ 0x80
 800205e:	4013      	ands	r3, r2
 8002060:	2b80      	cmp	r3, #128	@ 0x80
 8002062:	d138      	bne.n	80020d6 <HAL_UART_DMAStop+0x98>
 8002064:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002066:	2b21      	cmp	r3, #33	@ 0x21
 8002068:	d135      	bne.n	80020d6 <HAL_UART_DMAStop+0x98>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 800206a:	f3ef 8310 	mrs	r3, PRIMASK
 800206e:	617b      	str	r3, [r7, #20]
  return(result);
 8002070:	697b      	ldr	r3, [r7, #20]
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8002072:	627b      	str	r3, [r7, #36]	@ 0x24
 8002074:	2301      	movs	r3, #1
 8002076:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002078:	69bb      	ldr	r3, [r7, #24]
 800207a:	f383 8810 	msr	PRIMASK, r3
}
 800207e:	46c0      	nop			@ (mov r8, r8)
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	689a      	ldr	r2, [r3, #8]
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	681b      	ldr	r3, [r3, #0]
 800208a:	2180      	movs	r1, #128	@ 0x80
 800208c:	438a      	bics	r2, r1
 800208e:	609a      	str	r2, [r3, #8]
 8002090:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002092:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002094:	69fb      	ldr	r3, [r7, #28]
 8002096:	f383 8810 	msr	PRIMASK, r3
}
 800209a:	46c0      	nop			@ (mov r8, r8)

    /* Abort the UART DMA Tx channel */
    if (huart->hdmatx != NULL)
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80020a0:	2b00      	cmp	r3, #0
 80020a2:	d014      	beq.n	80020ce <HAL_UART_DMAStop+0x90>
    {
      if (HAL_DMA_Abort(huart->hdmatx) != HAL_OK)
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80020a8:	0018      	movs	r0, r3
 80020aa:	f7fe ffab 	bl	8001004 <HAL_DMA_Abort>
 80020ae:	1e03      	subs	r3, r0, #0
 80020b0:	d00d      	beq.n	80020ce <HAL_UART_DMAStop+0x90>
      {
        if (HAL_DMA_GetError(huart->hdmatx) == HAL_DMA_ERROR_TIMEOUT)
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80020b6:	0018      	movs	r0, r3
 80020b8:	f7ff f8b8 	bl	800122c <HAL_DMA_GetError>
 80020bc:	0003      	movs	r3, r0
 80020be:	2b20      	cmp	r3, #32
 80020c0:	d105      	bne.n	80020ce <HAL_UART_DMAStop+0x90>
        {
          /* Set error code to DMA */
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	2290      	movs	r2, #144	@ 0x90
 80020c6:	2110      	movs	r1, #16
 80020c8:	5099      	str	r1, [r3, r2]

          return HAL_TIMEOUT;
 80020ca:	2303      	movs	r3, #3
 80020cc:	e047      	b.n	800215e <HAL_UART_DMAStop+0x120>
        }
      }
    }

    UART_EndTxTransfer(huart);
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	0018      	movs	r0, r3
 80020d2:	f000 fc5d 	bl	8002990 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	681b      	ldr	r3, [r3, #0]
 80020da:	689b      	ldr	r3, [r3, #8]
 80020dc:	2240      	movs	r2, #64	@ 0x40
 80020de:	4013      	ands	r3, r2
 80020e0:	2b40      	cmp	r3, #64	@ 0x40
 80020e2:	d13b      	bne.n	800215c <HAL_UART_DMAStop+0x11e>
 80020e4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80020e6:	2b22      	cmp	r3, #34	@ 0x22
 80020e8:	d138      	bne.n	800215c <HAL_UART_DMAStop+0x11e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 80020ea:	f3ef 8310 	mrs	r3, PRIMASK
 80020ee:	60bb      	str	r3, [r7, #8]
  return(result);
 80020f0:	68bb      	ldr	r3, [r7, #8]
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80020f2:	623b      	str	r3, [r7, #32]
 80020f4:	2301      	movs	r3, #1
 80020f6:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80020f8:	68fb      	ldr	r3, [r7, #12]
 80020fa:	f383 8810 	msr	PRIMASK, r3
}
 80020fe:	46c0      	nop			@ (mov r8, r8)
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	689a      	ldr	r2, [r3, #8]
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	681b      	ldr	r3, [r3, #0]
 800210a:	2140      	movs	r1, #64	@ 0x40
 800210c:	438a      	bics	r2, r1
 800210e:	609a      	str	r2, [r3, #8]
 8002110:	6a3b      	ldr	r3, [r7, #32]
 8002112:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002114:	693b      	ldr	r3, [r7, #16]
 8002116:	f383 8810 	msr	PRIMASK, r3
}
 800211a:	46c0      	nop			@ (mov r8, r8)

    /* Abort the UART DMA Rx channel */
    if (huart->hdmarx != NULL)
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	2280      	movs	r2, #128	@ 0x80
 8002120:	589b      	ldr	r3, [r3, r2]
 8002122:	2b00      	cmp	r3, #0
 8002124:	d016      	beq.n	8002154 <HAL_UART_DMAStop+0x116>
    {
      if (HAL_DMA_Abort(huart->hdmarx) != HAL_OK)
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	2280      	movs	r2, #128	@ 0x80
 800212a:	589b      	ldr	r3, [r3, r2]
 800212c:	0018      	movs	r0, r3
 800212e:	f7fe ff69 	bl	8001004 <HAL_DMA_Abort>
 8002132:	1e03      	subs	r3, r0, #0
 8002134:	d00e      	beq.n	8002154 <HAL_UART_DMAStop+0x116>
      {
        if (HAL_DMA_GetError(huart->hdmarx) == HAL_DMA_ERROR_TIMEOUT)
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	2280      	movs	r2, #128	@ 0x80
 800213a:	589b      	ldr	r3, [r3, r2]
 800213c:	0018      	movs	r0, r3
 800213e:	f7ff f875 	bl	800122c <HAL_DMA_GetError>
 8002142:	0003      	movs	r3, r0
 8002144:	2b20      	cmp	r3, #32
 8002146:	d105      	bne.n	8002154 <HAL_UART_DMAStop+0x116>
        {
          /* Set error code to DMA */
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	2290      	movs	r2, #144	@ 0x90
 800214c:	2110      	movs	r1, #16
 800214e:	5099      	str	r1, [r3, r2]

          return HAL_TIMEOUT;
 8002150:	2303      	movs	r3, #3
 8002152:	e004      	b.n	800215e <HAL_UART_DMAStop+0x120>
        }
      }
    }

    UART_EndRxTransfer(huart);
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	0018      	movs	r0, r3
 8002158:	f000 fc5a 	bl	8002a10 <UART_EndRxTransfer>
  }

  return HAL_OK;
 800215c:	2300      	movs	r3, #0
}
 800215e:	0018      	movs	r0, r3
 8002160:	46bd      	mov	sp, r7
 8002162:	b00c      	add	sp, #48	@ 0x30
 8002164:	bd80      	pop	{r7, pc}

08002166 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8002166:	b580      	push	{r7, lr}
 8002168:	b082      	sub	sp, #8
 800216a:	af00      	add	r7, sp, #0
 800216c:	6078      	str	r0, [r7, #4]
 800216e:	000a      	movs	r2, r1
 8002170:	1cbb      	adds	r3, r7, #2
 8002172:	801a      	strh	r2, [r3, #0]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8002174:	46c0      	nop			@ (mov r8, r8)
 8002176:	46bd      	mov	sp, r7
 8002178:	b002      	add	sp, #8
 800217a:	bd80      	pop	{r7, pc}

0800217c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800217c:	b580      	push	{r7, lr}
 800217e:	b088      	sub	sp, #32
 8002180:	af00      	add	r7, sp, #0
 8002182:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8002184:	231e      	movs	r3, #30
 8002186:	18fb      	adds	r3, r7, r3
 8002188:	2200      	movs	r2, #0
 800218a:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	689a      	ldr	r2, [r3, #8]
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	691b      	ldr	r3, [r3, #16]
 8002194:	431a      	orrs	r2, r3
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	695b      	ldr	r3, [r3, #20]
 800219a:	431a      	orrs	r2, r3
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	69db      	ldr	r3, [r3, #28]
 80021a0:	4313      	orrs	r3, r2
 80021a2:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	681b      	ldr	r3, [r3, #0]
 80021aa:	4ab5      	ldr	r2, [pc, #724]	@ (8002480 <UART_SetConfig+0x304>)
 80021ac:	4013      	ands	r3, r2
 80021ae:	0019      	movs	r1, r3
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	697a      	ldr	r2, [r7, #20]
 80021b6:	430a      	orrs	r2, r1
 80021b8:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	681b      	ldr	r3, [r3, #0]
 80021be:	685b      	ldr	r3, [r3, #4]
 80021c0:	4ab0      	ldr	r2, [pc, #704]	@ (8002484 <UART_SetConfig+0x308>)
 80021c2:	4013      	ands	r3, r2
 80021c4:	0019      	movs	r1, r3
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	68da      	ldr	r2, [r3, #12]
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	681b      	ldr	r3, [r3, #0]
 80021ce:	430a      	orrs	r2, r1
 80021d0:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	699b      	ldr	r3, [r3, #24]
 80021d6:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	6a1b      	ldr	r3, [r3, #32]
 80021dc:	697a      	ldr	r2, [r7, #20]
 80021de:	4313      	orrs	r3, r2
 80021e0:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	689b      	ldr	r3, [r3, #8]
 80021e8:	4aa7      	ldr	r2, [pc, #668]	@ (8002488 <UART_SetConfig+0x30c>)
 80021ea:	4013      	ands	r3, r2
 80021ec:	0019      	movs	r1, r3
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	697a      	ldr	r2, [r7, #20]
 80021f4:	430a      	orrs	r2, r1
 80021f6:	609a      	str	r2, [r3, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80021fe:	220f      	movs	r2, #15
 8002200:	4393      	bics	r3, r2
 8002202:	0019      	movs	r1, r3
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	430a      	orrs	r2, r1
 800220e:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	4a9d      	ldr	r2, [pc, #628]	@ (800248c <UART_SetConfig+0x310>)
 8002216:	4293      	cmp	r3, r2
 8002218:	d127      	bne.n	800226a <UART_SetConfig+0xee>
 800221a:	4b9d      	ldr	r3, [pc, #628]	@ (8002490 <UART_SetConfig+0x314>)
 800221c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800221e:	2203      	movs	r2, #3
 8002220:	4013      	ands	r3, r2
 8002222:	2b03      	cmp	r3, #3
 8002224:	d017      	beq.n	8002256 <UART_SetConfig+0xda>
 8002226:	d81b      	bhi.n	8002260 <UART_SetConfig+0xe4>
 8002228:	2b02      	cmp	r3, #2
 800222a:	d00a      	beq.n	8002242 <UART_SetConfig+0xc6>
 800222c:	d818      	bhi.n	8002260 <UART_SetConfig+0xe4>
 800222e:	2b00      	cmp	r3, #0
 8002230:	d002      	beq.n	8002238 <UART_SetConfig+0xbc>
 8002232:	2b01      	cmp	r3, #1
 8002234:	d00a      	beq.n	800224c <UART_SetConfig+0xd0>
 8002236:	e013      	b.n	8002260 <UART_SetConfig+0xe4>
 8002238:	231f      	movs	r3, #31
 800223a:	18fb      	adds	r3, r7, r3
 800223c:	2200      	movs	r2, #0
 800223e:	701a      	strb	r2, [r3, #0]
 8002240:	e035      	b.n	80022ae <UART_SetConfig+0x132>
 8002242:	231f      	movs	r3, #31
 8002244:	18fb      	adds	r3, r7, r3
 8002246:	2202      	movs	r2, #2
 8002248:	701a      	strb	r2, [r3, #0]
 800224a:	e030      	b.n	80022ae <UART_SetConfig+0x132>
 800224c:	231f      	movs	r3, #31
 800224e:	18fb      	adds	r3, r7, r3
 8002250:	2204      	movs	r2, #4
 8002252:	701a      	strb	r2, [r3, #0]
 8002254:	e02b      	b.n	80022ae <UART_SetConfig+0x132>
 8002256:	231f      	movs	r3, #31
 8002258:	18fb      	adds	r3, r7, r3
 800225a:	2208      	movs	r2, #8
 800225c:	701a      	strb	r2, [r3, #0]
 800225e:	e026      	b.n	80022ae <UART_SetConfig+0x132>
 8002260:	231f      	movs	r3, #31
 8002262:	18fb      	adds	r3, r7, r3
 8002264:	2210      	movs	r2, #16
 8002266:	701a      	strb	r2, [r3, #0]
 8002268:	e021      	b.n	80022ae <UART_SetConfig+0x132>
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	681b      	ldr	r3, [r3, #0]
 800226e:	4a89      	ldr	r2, [pc, #548]	@ (8002494 <UART_SetConfig+0x318>)
 8002270:	4293      	cmp	r3, r2
 8002272:	d104      	bne.n	800227e <UART_SetConfig+0x102>
 8002274:	231f      	movs	r3, #31
 8002276:	18fb      	adds	r3, r7, r3
 8002278:	2200      	movs	r2, #0
 800227a:	701a      	strb	r2, [r3, #0]
 800227c:	e017      	b.n	80022ae <UART_SetConfig+0x132>
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	681b      	ldr	r3, [r3, #0]
 8002282:	4a85      	ldr	r2, [pc, #532]	@ (8002498 <UART_SetConfig+0x31c>)
 8002284:	4293      	cmp	r3, r2
 8002286:	d104      	bne.n	8002292 <UART_SetConfig+0x116>
 8002288:	231f      	movs	r3, #31
 800228a:	18fb      	adds	r3, r7, r3
 800228c:	2200      	movs	r2, #0
 800228e:	701a      	strb	r2, [r3, #0]
 8002290:	e00d      	b.n	80022ae <UART_SetConfig+0x132>
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	4a81      	ldr	r2, [pc, #516]	@ (800249c <UART_SetConfig+0x320>)
 8002298:	4293      	cmp	r3, r2
 800229a:	d104      	bne.n	80022a6 <UART_SetConfig+0x12a>
 800229c:	231f      	movs	r3, #31
 800229e:	18fb      	adds	r3, r7, r3
 80022a0:	2200      	movs	r2, #0
 80022a2:	701a      	strb	r2, [r3, #0]
 80022a4:	e003      	b.n	80022ae <UART_SetConfig+0x132>
 80022a6:	231f      	movs	r3, #31
 80022a8:	18fb      	adds	r3, r7, r3
 80022aa:	2210      	movs	r2, #16
 80022ac:	701a      	strb	r2, [r3, #0]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	69da      	ldr	r2, [r3, #28]
 80022b2:	2380      	movs	r3, #128	@ 0x80
 80022b4:	021b      	lsls	r3, r3, #8
 80022b6:	429a      	cmp	r2, r3
 80022b8:	d000      	beq.n	80022bc <UART_SetConfig+0x140>
 80022ba:	e06f      	b.n	800239c <UART_SetConfig+0x220>
  {
    switch (clocksource)
 80022bc:	231f      	movs	r3, #31
 80022be:	18fb      	adds	r3, r7, r3
 80022c0:	781b      	ldrb	r3, [r3, #0]
 80022c2:	2b08      	cmp	r3, #8
 80022c4:	d01f      	beq.n	8002306 <UART_SetConfig+0x18a>
 80022c6:	dc22      	bgt.n	800230e <UART_SetConfig+0x192>
 80022c8:	2b04      	cmp	r3, #4
 80022ca:	d017      	beq.n	80022fc <UART_SetConfig+0x180>
 80022cc:	dc1f      	bgt.n	800230e <UART_SetConfig+0x192>
 80022ce:	2b00      	cmp	r3, #0
 80022d0:	d002      	beq.n	80022d8 <UART_SetConfig+0x15c>
 80022d2:	2b02      	cmp	r3, #2
 80022d4:	d005      	beq.n	80022e2 <UART_SetConfig+0x166>
 80022d6:	e01a      	b.n	800230e <UART_SetConfig+0x192>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80022d8:	f7ff fd48 	bl	8001d6c <HAL_RCC_GetPCLK1Freq>
 80022dc:	0003      	movs	r3, r0
 80022de:	61bb      	str	r3, [r7, #24]
        break;
 80022e0:	e01c      	b.n	800231c <UART_SetConfig+0x1a0>
      case UART_CLOCKSOURCE_HSI:
        pclk = (HSI_VALUE / ((__HAL_RCC_GET_HSIKER_DIVIDER() >> RCC_CR_HSIKERDIV_Pos) + 1U));
 80022e2:	4b6b      	ldr	r3, [pc, #428]	@ (8002490 <UART_SetConfig+0x314>)
 80022e4:	681b      	ldr	r3, [r3, #0]
 80022e6:	095b      	lsrs	r3, r3, #5
 80022e8:	2207      	movs	r2, #7
 80022ea:	4013      	ands	r3, r2
 80022ec:	3301      	adds	r3, #1
 80022ee:	0019      	movs	r1, r3
 80022f0:	486b      	ldr	r0, [pc, #428]	@ (80024a0 <UART_SetConfig+0x324>)
 80022f2:	f7fd ff13 	bl	800011c <__udivsi3>
 80022f6:	0003      	movs	r3, r0
 80022f8:	61bb      	str	r3, [r7, #24]
        break;
 80022fa:	e00f      	b.n	800231c <UART_SetConfig+0x1a0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80022fc:	f7ff fcc8 	bl	8001c90 <HAL_RCC_GetSysClockFreq>
 8002300:	0003      	movs	r3, r0
 8002302:	61bb      	str	r3, [r7, #24]
        break;
 8002304:	e00a      	b.n	800231c <UART_SetConfig+0x1a0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002306:	2380      	movs	r3, #128	@ 0x80
 8002308:	021b      	lsls	r3, r3, #8
 800230a:	61bb      	str	r3, [r7, #24]
        break;
 800230c:	e006      	b.n	800231c <UART_SetConfig+0x1a0>
      default:
        pclk = 0U;
 800230e:	2300      	movs	r3, #0
 8002310:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8002312:	231e      	movs	r3, #30
 8002314:	18fb      	adds	r3, r7, r3
 8002316:	2201      	movs	r2, #1
 8002318:	701a      	strb	r2, [r3, #0]
        break;
 800231a:	46c0      	nop			@ (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800231c:	69bb      	ldr	r3, [r7, #24]
 800231e:	2b00      	cmp	r3, #0
 8002320:	d100      	bne.n	8002324 <UART_SetConfig+0x1a8>
 8002322:	e097      	b.n	8002454 <UART_SetConfig+0x2d8>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002328:	4b5e      	ldr	r3, [pc, #376]	@ (80024a4 <UART_SetConfig+0x328>)
 800232a:	0052      	lsls	r2, r2, #1
 800232c:	5ad3      	ldrh	r3, [r2, r3]
 800232e:	0019      	movs	r1, r3
 8002330:	69b8      	ldr	r0, [r7, #24]
 8002332:	f7fd fef3 	bl	800011c <__udivsi3>
 8002336:	0003      	movs	r3, r0
 8002338:	005a      	lsls	r2, r3, #1
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	685b      	ldr	r3, [r3, #4]
 800233e:	085b      	lsrs	r3, r3, #1
 8002340:	18d2      	adds	r2, r2, r3
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	685b      	ldr	r3, [r3, #4]
 8002346:	0019      	movs	r1, r3
 8002348:	0010      	movs	r0, r2
 800234a:	f7fd fee7 	bl	800011c <__udivsi3>
 800234e:	0003      	movs	r3, r0
 8002350:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002352:	693b      	ldr	r3, [r7, #16]
 8002354:	2b0f      	cmp	r3, #15
 8002356:	d91c      	bls.n	8002392 <UART_SetConfig+0x216>
 8002358:	693a      	ldr	r2, [r7, #16]
 800235a:	2380      	movs	r3, #128	@ 0x80
 800235c:	025b      	lsls	r3, r3, #9
 800235e:	429a      	cmp	r2, r3
 8002360:	d217      	bcs.n	8002392 <UART_SetConfig+0x216>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8002362:	693b      	ldr	r3, [r7, #16]
 8002364:	b29a      	uxth	r2, r3
 8002366:	200e      	movs	r0, #14
 8002368:	183b      	adds	r3, r7, r0
 800236a:	210f      	movs	r1, #15
 800236c:	438a      	bics	r2, r1
 800236e:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8002370:	693b      	ldr	r3, [r7, #16]
 8002372:	085b      	lsrs	r3, r3, #1
 8002374:	b29b      	uxth	r3, r3
 8002376:	2207      	movs	r2, #7
 8002378:	4013      	ands	r3, r2
 800237a:	b299      	uxth	r1, r3
 800237c:	183b      	adds	r3, r7, r0
 800237e:	183a      	adds	r2, r7, r0
 8002380:	8812      	ldrh	r2, [r2, #0]
 8002382:	430a      	orrs	r2, r1
 8002384:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	183a      	adds	r2, r7, r0
 800238c:	8812      	ldrh	r2, [r2, #0]
 800238e:	60da      	str	r2, [r3, #12]
 8002390:	e060      	b.n	8002454 <UART_SetConfig+0x2d8>
      }
      else
      {
        ret = HAL_ERROR;
 8002392:	231e      	movs	r3, #30
 8002394:	18fb      	adds	r3, r7, r3
 8002396:	2201      	movs	r2, #1
 8002398:	701a      	strb	r2, [r3, #0]
 800239a:	e05b      	b.n	8002454 <UART_SetConfig+0x2d8>
      }
    }
  }
  else
  {
    switch (clocksource)
 800239c:	231f      	movs	r3, #31
 800239e:	18fb      	adds	r3, r7, r3
 80023a0:	781b      	ldrb	r3, [r3, #0]
 80023a2:	2b08      	cmp	r3, #8
 80023a4:	d01f      	beq.n	80023e6 <UART_SetConfig+0x26a>
 80023a6:	dc22      	bgt.n	80023ee <UART_SetConfig+0x272>
 80023a8:	2b04      	cmp	r3, #4
 80023aa:	d017      	beq.n	80023dc <UART_SetConfig+0x260>
 80023ac:	dc1f      	bgt.n	80023ee <UART_SetConfig+0x272>
 80023ae:	2b00      	cmp	r3, #0
 80023b0:	d002      	beq.n	80023b8 <UART_SetConfig+0x23c>
 80023b2:	2b02      	cmp	r3, #2
 80023b4:	d005      	beq.n	80023c2 <UART_SetConfig+0x246>
 80023b6:	e01a      	b.n	80023ee <UART_SetConfig+0x272>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80023b8:	f7ff fcd8 	bl	8001d6c <HAL_RCC_GetPCLK1Freq>
 80023bc:	0003      	movs	r3, r0
 80023be:	61bb      	str	r3, [r7, #24]
        break;
 80023c0:	e01c      	b.n	80023fc <UART_SetConfig+0x280>
      case UART_CLOCKSOURCE_HSI:
        pclk = (HSI_VALUE / ((__HAL_RCC_GET_HSIKER_DIVIDER() >> RCC_CR_HSIKERDIV_Pos) + 1U));
 80023c2:	4b33      	ldr	r3, [pc, #204]	@ (8002490 <UART_SetConfig+0x314>)
 80023c4:	681b      	ldr	r3, [r3, #0]
 80023c6:	095b      	lsrs	r3, r3, #5
 80023c8:	2207      	movs	r2, #7
 80023ca:	4013      	ands	r3, r2
 80023cc:	3301      	adds	r3, #1
 80023ce:	0019      	movs	r1, r3
 80023d0:	4833      	ldr	r0, [pc, #204]	@ (80024a0 <UART_SetConfig+0x324>)
 80023d2:	f7fd fea3 	bl	800011c <__udivsi3>
 80023d6:	0003      	movs	r3, r0
 80023d8:	61bb      	str	r3, [r7, #24]
        break;
 80023da:	e00f      	b.n	80023fc <UART_SetConfig+0x280>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80023dc:	f7ff fc58 	bl	8001c90 <HAL_RCC_GetSysClockFreq>
 80023e0:	0003      	movs	r3, r0
 80023e2:	61bb      	str	r3, [r7, #24]
        break;
 80023e4:	e00a      	b.n	80023fc <UART_SetConfig+0x280>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80023e6:	2380      	movs	r3, #128	@ 0x80
 80023e8:	021b      	lsls	r3, r3, #8
 80023ea:	61bb      	str	r3, [r7, #24]
        break;
 80023ec:	e006      	b.n	80023fc <UART_SetConfig+0x280>
      default:
        pclk = 0U;
 80023ee:	2300      	movs	r3, #0
 80023f0:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80023f2:	231e      	movs	r3, #30
 80023f4:	18fb      	adds	r3, r7, r3
 80023f6:	2201      	movs	r2, #1
 80023f8:	701a      	strb	r2, [r3, #0]
        break;
 80023fa:	46c0      	nop			@ (mov r8, r8)
    }

    if (pclk != 0U)
 80023fc:	69bb      	ldr	r3, [r7, #24]
 80023fe:	2b00      	cmp	r3, #0
 8002400:	d028      	beq.n	8002454 <UART_SetConfig+0x2d8>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002406:	4b27      	ldr	r3, [pc, #156]	@ (80024a4 <UART_SetConfig+0x328>)
 8002408:	0052      	lsls	r2, r2, #1
 800240a:	5ad3      	ldrh	r3, [r2, r3]
 800240c:	0019      	movs	r1, r3
 800240e:	69b8      	ldr	r0, [r7, #24]
 8002410:	f7fd fe84 	bl	800011c <__udivsi3>
 8002414:	0003      	movs	r3, r0
 8002416:	001a      	movs	r2, r3
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	685b      	ldr	r3, [r3, #4]
 800241c:	085b      	lsrs	r3, r3, #1
 800241e:	18d2      	adds	r2, r2, r3
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	685b      	ldr	r3, [r3, #4]
 8002424:	0019      	movs	r1, r3
 8002426:	0010      	movs	r0, r2
 8002428:	f7fd fe78 	bl	800011c <__udivsi3>
 800242c:	0003      	movs	r3, r0
 800242e:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002430:	693b      	ldr	r3, [r7, #16]
 8002432:	2b0f      	cmp	r3, #15
 8002434:	d90a      	bls.n	800244c <UART_SetConfig+0x2d0>
 8002436:	693a      	ldr	r2, [r7, #16]
 8002438:	2380      	movs	r3, #128	@ 0x80
 800243a:	025b      	lsls	r3, r3, #9
 800243c:	429a      	cmp	r2, r3
 800243e:	d205      	bcs.n	800244c <UART_SetConfig+0x2d0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8002440:	693b      	ldr	r3, [r7, #16]
 8002442:	b29a      	uxth	r2, r3
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	60da      	str	r2, [r3, #12]
 800244a:	e003      	b.n	8002454 <UART_SetConfig+0x2d8>
      }
      else
      {
        ret = HAL_ERROR;
 800244c:	231e      	movs	r3, #30
 800244e:	18fb      	adds	r3, r7, r3
 8002450:	2201      	movs	r2, #1
 8002452:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	226a      	movs	r2, #106	@ 0x6a
 8002458:	2101      	movs	r1, #1
 800245a:	5299      	strh	r1, [r3, r2]
  huart->NbRxDataToProcess = 1;
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	2268      	movs	r2, #104	@ 0x68
 8002460:	2101      	movs	r1, #1
 8002462:	5299      	strh	r1, [r3, r2]

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	2200      	movs	r2, #0
 8002468:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	2200      	movs	r2, #0
 800246e:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8002470:	231e      	movs	r3, #30
 8002472:	18fb      	adds	r3, r7, r3
 8002474:	781b      	ldrb	r3, [r3, #0]
}
 8002476:	0018      	movs	r0, r3
 8002478:	46bd      	mov	sp, r7
 800247a:	b008      	add	sp, #32
 800247c:	bd80      	pop	{r7, pc}
 800247e:	46c0      	nop			@ (mov r8, r8)
 8002480:	cfff69f3 	.word	0xcfff69f3
 8002484:	ffffcfff 	.word	0xffffcfff
 8002488:	11fff4ff 	.word	0x11fff4ff
 800248c:	40013800 	.word	0x40013800
 8002490:	40021000 	.word	0x40021000
 8002494:	40004400 	.word	0x40004400
 8002498:	40004800 	.word	0x40004800
 800249c:	40004c00 	.word	0x40004c00
 80024a0:	02dc6c00 	.word	0x02dc6c00
 80024a4:	08003d90 	.word	0x08003d90

080024a8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80024a8:	b580      	push	{r7, lr}
 80024aa:	b082      	sub	sp, #8
 80024ac:	af00      	add	r7, sp, #0
 80024ae:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80024b4:	2208      	movs	r2, #8
 80024b6:	4013      	ands	r3, r2
 80024b8:	d00b      	beq.n	80024d2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	685b      	ldr	r3, [r3, #4]
 80024c0:	4a4a      	ldr	r2, [pc, #296]	@ (80025ec <UART_AdvFeatureConfig+0x144>)
 80024c2:	4013      	ands	r3, r2
 80024c4:	0019      	movs	r1, r3
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	430a      	orrs	r2, r1
 80024d0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80024d6:	2201      	movs	r2, #1
 80024d8:	4013      	ands	r3, r2
 80024da:	d00b      	beq.n	80024f4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	685b      	ldr	r3, [r3, #4]
 80024e2:	4a43      	ldr	r2, [pc, #268]	@ (80025f0 <UART_AdvFeatureConfig+0x148>)
 80024e4:	4013      	ands	r3, r2
 80024e6:	0019      	movs	r1, r3
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	430a      	orrs	r2, r1
 80024f2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80024f8:	2202      	movs	r2, #2
 80024fa:	4013      	ands	r3, r2
 80024fc:	d00b      	beq.n	8002516 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	685b      	ldr	r3, [r3, #4]
 8002504:	4a3b      	ldr	r2, [pc, #236]	@ (80025f4 <UART_AdvFeatureConfig+0x14c>)
 8002506:	4013      	ands	r3, r2
 8002508:	0019      	movs	r1, r3
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	430a      	orrs	r2, r1
 8002514:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800251a:	2204      	movs	r2, #4
 800251c:	4013      	ands	r3, r2
 800251e:	d00b      	beq.n	8002538 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	685b      	ldr	r3, [r3, #4]
 8002526:	4a34      	ldr	r2, [pc, #208]	@ (80025f8 <UART_AdvFeatureConfig+0x150>)
 8002528:	4013      	ands	r3, r2
 800252a:	0019      	movs	r1, r3
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	430a      	orrs	r2, r1
 8002536:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800253c:	2210      	movs	r2, #16
 800253e:	4013      	ands	r3, r2
 8002540:	d00b      	beq.n	800255a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	689b      	ldr	r3, [r3, #8]
 8002548:	4a2c      	ldr	r2, [pc, #176]	@ (80025fc <UART_AdvFeatureConfig+0x154>)
 800254a:	4013      	ands	r3, r2
 800254c:	0019      	movs	r1, r3
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	430a      	orrs	r2, r1
 8002558:	609a      	str	r2, [r3, #8]
  }

#if defined(HAL_DMA_MODULE_ENABLED)
  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800255e:	2220      	movs	r2, #32
 8002560:	4013      	ands	r3, r2
 8002562:	d00b      	beq.n	800257c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	689b      	ldr	r3, [r3, #8]
 800256a:	4a25      	ldr	r2, [pc, #148]	@ (8002600 <UART_AdvFeatureConfig+0x158>)
 800256c:	4013      	ands	r3, r2
 800256e:	0019      	movs	r1, r3
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	430a      	orrs	r2, r1
 800257a:	609a      	str	r2, [r3, #8]
  }
#endif /* HAL_DMA_MODULE_ENABLED */

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002580:	2240      	movs	r2, #64	@ 0x40
 8002582:	4013      	ands	r3, r2
 8002584:	d01d      	beq.n	80025c2 <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	681b      	ldr	r3, [r3, #0]
 800258a:	685b      	ldr	r3, [r3, #4]
 800258c:	4a1d      	ldr	r2, [pc, #116]	@ (8002604 <UART_AdvFeatureConfig+0x15c>)
 800258e:	4013      	ands	r3, r2
 8002590:	0019      	movs	r1, r3
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	430a      	orrs	r2, r1
 800259c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80025a2:	2380      	movs	r3, #128	@ 0x80
 80025a4:	035b      	lsls	r3, r3, #13
 80025a6:	429a      	cmp	r2, r3
 80025a8:	d10b      	bne.n	80025c2 <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	685b      	ldr	r3, [r3, #4]
 80025b0:	4a15      	ldr	r2, [pc, #84]	@ (8002608 <UART_AdvFeatureConfig+0x160>)
 80025b2:	4013      	ands	r3, r2
 80025b4:	0019      	movs	r1, r3
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	430a      	orrs	r2, r1
 80025c0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80025c6:	2280      	movs	r2, #128	@ 0x80
 80025c8:	4013      	ands	r3, r2
 80025ca:	d00b      	beq.n	80025e4 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	685b      	ldr	r3, [r3, #4]
 80025d2:	4a0e      	ldr	r2, [pc, #56]	@ (800260c <UART_AdvFeatureConfig+0x164>)
 80025d4:	4013      	ands	r3, r2
 80025d6:	0019      	movs	r1, r3
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	430a      	orrs	r2, r1
 80025e2:	605a      	str	r2, [r3, #4]
  }
}
 80025e4:	46c0      	nop			@ (mov r8, r8)
 80025e6:	46bd      	mov	sp, r7
 80025e8:	b002      	add	sp, #8
 80025ea:	bd80      	pop	{r7, pc}
 80025ec:	ffff7fff 	.word	0xffff7fff
 80025f0:	fffdffff 	.word	0xfffdffff
 80025f4:	fffeffff 	.word	0xfffeffff
 80025f8:	fffbffff 	.word	0xfffbffff
 80025fc:	ffffefff 	.word	0xffffefff
 8002600:	ffffdfff 	.word	0xffffdfff
 8002604:	ffefffff 	.word	0xffefffff
 8002608:	ff9fffff 	.word	0xff9fffff
 800260c:	fff7ffff 	.word	0xfff7ffff

08002610 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8002610:	b580      	push	{r7, lr}
 8002612:	b092      	sub	sp, #72	@ 0x48
 8002614:	af02      	add	r7, sp, #8
 8002616:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	2290      	movs	r2, #144	@ 0x90
 800261c:	2100      	movs	r1, #0
 800261e:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8002620:	f7fe fad2 	bl	8000bc8 <HAL_GetTick>
 8002624:	0003      	movs	r3, r0
 8002626:	63fb      	str	r3, [r7, #60]	@ 0x3c

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	2208      	movs	r2, #8
 8002630:	4013      	ands	r3, r2
 8002632:	2b08      	cmp	r3, #8
 8002634:	d12d      	bne.n	8002692 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002636:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002638:	2280      	movs	r2, #128	@ 0x80
 800263a:	0391      	lsls	r1, r2, #14
 800263c:	6878      	ldr	r0, [r7, #4]
 800263e:	4a47      	ldr	r2, [pc, #284]	@ (800275c <UART_CheckIdleState+0x14c>)
 8002640:	9200      	str	r2, [sp, #0]
 8002642:	2200      	movs	r2, #0
 8002644:	f000 f88e 	bl	8002764 <UART_WaitOnFlagUntilTimeout>
 8002648:	1e03      	subs	r3, r0, #0
 800264a:	d022      	beq.n	8002692 <UART_CheckIdleState+0x82>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 800264c:	f3ef 8310 	mrs	r3, PRIMASK
 8002650:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 8002652:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8002654:	63bb      	str	r3, [r7, #56]	@ 0x38
 8002656:	2301      	movs	r3, #1
 8002658:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800265a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800265c:	f383 8810 	msr	PRIMASK, r3
}
 8002660:	46c0      	nop			@ (mov r8, r8)
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	681a      	ldr	r2, [r3, #0]
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	2180      	movs	r1, #128	@ 0x80
 800266e:	438a      	bics	r2, r1
 8002670:	601a      	str	r2, [r3, #0]
 8002672:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002674:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002676:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002678:	f383 8810 	msr	PRIMASK, r3
}
 800267c:	46c0      	nop			@ (mov r8, r8)

      huart->gState = HAL_UART_STATE_READY;
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	2288      	movs	r2, #136	@ 0x88
 8002682:	2120      	movs	r1, #32
 8002684:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	2284      	movs	r2, #132	@ 0x84
 800268a:	2100      	movs	r1, #0
 800268c:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800268e:	2303      	movs	r3, #3
 8002690:	e060      	b.n	8002754 <UART_CheckIdleState+0x144>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	2204      	movs	r2, #4
 800269a:	4013      	ands	r3, r2
 800269c:	2b04      	cmp	r3, #4
 800269e:	d146      	bne.n	800272e <UART_CheckIdleState+0x11e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80026a0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80026a2:	2280      	movs	r2, #128	@ 0x80
 80026a4:	03d1      	lsls	r1, r2, #15
 80026a6:	6878      	ldr	r0, [r7, #4]
 80026a8:	4a2c      	ldr	r2, [pc, #176]	@ (800275c <UART_CheckIdleState+0x14c>)
 80026aa:	9200      	str	r2, [sp, #0]
 80026ac:	2200      	movs	r2, #0
 80026ae:	f000 f859 	bl	8002764 <UART_WaitOnFlagUntilTimeout>
 80026b2:	1e03      	subs	r3, r0, #0
 80026b4:	d03b      	beq.n	800272e <UART_CheckIdleState+0x11e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 80026b6:	f3ef 8310 	mrs	r3, PRIMASK
 80026ba:	60fb      	str	r3, [r7, #12]
  return(result);
 80026bc:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80026be:	637b      	str	r3, [r7, #52]	@ 0x34
 80026c0:	2301      	movs	r3, #1
 80026c2:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80026c4:	693b      	ldr	r3, [r7, #16]
 80026c6:	f383 8810 	msr	PRIMASK, r3
}
 80026ca:	46c0      	nop			@ (mov r8, r8)
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	681a      	ldr	r2, [r3, #0]
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	4922      	ldr	r1, [pc, #136]	@ (8002760 <UART_CheckIdleState+0x150>)
 80026d8:	400a      	ands	r2, r1
 80026da:	601a      	str	r2, [r3, #0]
 80026dc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80026de:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80026e0:	697b      	ldr	r3, [r7, #20]
 80026e2:	f383 8810 	msr	PRIMASK, r3
}
 80026e6:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 80026e8:	f3ef 8310 	mrs	r3, PRIMASK
 80026ec:	61bb      	str	r3, [r7, #24]
  return(result);
 80026ee:	69bb      	ldr	r3, [r7, #24]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80026f0:	633b      	str	r3, [r7, #48]	@ 0x30
 80026f2:	2301      	movs	r3, #1
 80026f4:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80026f6:	69fb      	ldr	r3, [r7, #28]
 80026f8:	f383 8810 	msr	PRIMASK, r3
}
 80026fc:	46c0      	nop			@ (mov r8, r8)
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	689a      	ldr	r2, [r3, #8]
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	2101      	movs	r1, #1
 800270a:	438a      	bics	r2, r1
 800270c:	609a      	str	r2, [r3, #8]
 800270e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002710:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002712:	6a3b      	ldr	r3, [r7, #32]
 8002714:	f383 8810 	msr	PRIMASK, r3
}
 8002718:	46c0      	nop			@ (mov r8, r8)

      huart->RxState = HAL_UART_STATE_READY;
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	228c      	movs	r2, #140	@ 0x8c
 800271e:	2120      	movs	r1, #32
 8002720:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	2284      	movs	r2, #132	@ 0x84
 8002726:	2100      	movs	r1, #0
 8002728:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800272a:	2303      	movs	r3, #3
 800272c:	e012      	b.n	8002754 <UART_CheckIdleState+0x144>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	2288      	movs	r2, #136	@ 0x88
 8002732:	2120      	movs	r1, #32
 8002734:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_READY;
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	228c      	movs	r2, #140	@ 0x8c
 800273a:	2120      	movs	r1, #32
 800273c:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	2200      	movs	r2, #0
 8002742:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	2200      	movs	r2, #0
 8002748:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	2284      	movs	r2, #132	@ 0x84
 800274e:	2100      	movs	r1, #0
 8002750:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002752:	2300      	movs	r3, #0
}
 8002754:	0018      	movs	r0, r3
 8002756:	46bd      	mov	sp, r7
 8002758:	b010      	add	sp, #64	@ 0x40
 800275a:	bd80      	pop	{r7, pc}
 800275c:	01ffffff 	.word	0x01ffffff
 8002760:	fffffedf 	.word	0xfffffedf

08002764 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8002764:	b580      	push	{r7, lr}
 8002766:	b084      	sub	sp, #16
 8002768:	af00      	add	r7, sp, #0
 800276a:	60f8      	str	r0, [r7, #12]
 800276c:	60b9      	str	r1, [r7, #8]
 800276e:	603b      	str	r3, [r7, #0]
 8002770:	1dfb      	adds	r3, r7, #7
 8002772:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002774:	e051      	b.n	800281a <UART_WaitOnFlagUntilTimeout+0xb6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002776:	69bb      	ldr	r3, [r7, #24]
 8002778:	3301      	adds	r3, #1
 800277a:	d04e      	beq.n	800281a <UART_WaitOnFlagUntilTimeout+0xb6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800277c:	f7fe fa24 	bl	8000bc8 <HAL_GetTick>
 8002780:	0002      	movs	r2, r0
 8002782:	683b      	ldr	r3, [r7, #0]
 8002784:	1ad3      	subs	r3, r2, r3
 8002786:	69ba      	ldr	r2, [r7, #24]
 8002788:	429a      	cmp	r2, r3
 800278a:	d302      	bcc.n	8002792 <UART_WaitOnFlagUntilTimeout+0x2e>
 800278c:	69bb      	ldr	r3, [r7, #24]
 800278e:	2b00      	cmp	r3, #0
 8002790:	d101      	bne.n	8002796 <UART_WaitOnFlagUntilTimeout+0x32>
      {

        return HAL_TIMEOUT;
 8002792:	2303      	movs	r3, #3
 8002794:	e051      	b.n	800283a <UART_WaitOnFlagUntilTimeout+0xd6>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8002796:	68fb      	ldr	r3, [r7, #12]
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	2204      	movs	r2, #4
 800279e:	4013      	ands	r3, r2
 80027a0:	d03b      	beq.n	800281a <UART_WaitOnFlagUntilTimeout+0xb6>
 80027a2:	68bb      	ldr	r3, [r7, #8]
 80027a4:	2b80      	cmp	r3, #128	@ 0x80
 80027a6:	d038      	beq.n	800281a <UART_WaitOnFlagUntilTimeout+0xb6>
 80027a8:	68bb      	ldr	r3, [r7, #8]
 80027aa:	2b40      	cmp	r3, #64	@ 0x40
 80027ac:	d035      	beq.n	800281a <UART_WaitOnFlagUntilTimeout+0xb6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80027ae:	68fb      	ldr	r3, [r7, #12]
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	69db      	ldr	r3, [r3, #28]
 80027b4:	2208      	movs	r2, #8
 80027b6:	4013      	ands	r3, r2
 80027b8:	2b08      	cmp	r3, #8
 80027ba:	d111      	bne.n	80027e0 <UART_WaitOnFlagUntilTimeout+0x7c>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80027bc:	68fb      	ldr	r3, [r7, #12]
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	2208      	movs	r2, #8
 80027c2:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80027c4:	68fb      	ldr	r3, [r7, #12]
 80027c6:	0018      	movs	r0, r3
 80027c8:	f000 f922 	bl	8002a10 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80027cc:	68fb      	ldr	r3, [r7, #12]
 80027ce:	2290      	movs	r2, #144	@ 0x90
 80027d0:	2108      	movs	r1, #8
 80027d2:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80027d4:	68fb      	ldr	r3, [r7, #12]
 80027d6:	2284      	movs	r2, #132	@ 0x84
 80027d8:	2100      	movs	r1, #0
 80027da:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 80027dc:	2301      	movs	r3, #1
 80027de:	e02c      	b.n	800283a <UART_WaitOnFlagUntilTimeout+0xd6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80027e0:	68fb      	ldr	r3, [r7, #12]
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	69da      	ldr	r2, [r3, #28]
 80027e6:	2380      	movs	r3, #128	@ 0x80
 80027e8:	011b      	lsls	r3, r3, #4
 80027ea:	401a      	ands	r2, r3
 80027ec:	2380      	movs	r3, #128	@ 0x80
 80027ee:	011b      	lsls	r3, r3, #4
 80027f0:	429a      	cmp	r2, r3
 80027f2:	d112      	bne.n	800281a <UART_WaitOnFlagUntilTimeout+0xb6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80027f4:	68fb      	ldr	r3, [r7, #12]
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	2280      	movs	r2, #128	@ 0x80
 80027fa:	0112      	lsls	r2, r2, #4
 80027fc:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80027fe:	68fb      	ldr	r3, [r7, #12]
 8002800:	0018      	movs	r0, r3
 8002802:	f000 f905 	bl	8002a10 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8002806:	68fb      	ldr	r3, [r7, #12]
 8002808:	2290      	movs	r2, #144	@ 0x90
 800280a:	2120      	movs	r1, #32
 800280c:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800280e:	68fb      	ldr	r3, [r7, #12]
 8002810:	2284      	movs	r2, #132	@ 0x84
 8002812:	2100      	movs	r1, #0
 8002814:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8002816:	2303      	movs	r3, #3
 8002818:	e00f      	b.n	800283a <UART_WaitOnFlagUntilTimeout+0xd6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800281a:	68fb      	ldr	r3, [r7, #12]
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	69db      	ldr	r3, [r3, #28]
 8002820:	68ba      	ldr	r2, [r7, #8]
 8002822:	4013      	ands	r3, r2
 8002824:	68ba      	ldr	r2, [r7, #8]
 8002826:	1ad3      	subs	r3, r2, r3
 8002828:	425a      	negs	r2, r3
 800282a:	4153      	adcs	r3, r2
 800282c:	b2db      	uxtb	r3, r3
 800282e:	001a      	movs	r2, r3
 8002830:	1dfb      	adds	r3, r7, #7
 8002832:	781b      	ldrb	r3, [r3, #0]
 8002834:	429a      	cmp	r2, r3
 8002836:	d09e      	beq.n	8002776 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002838:	2300      	movs	r3, #0
}
 800283a:	0018      	movs	r0, r3
 800283c:	46bd      	mov	sp, r7
 800283e:	b004      	add	sp, #16
 8002840:	bd80      	pop	{r7, pc}
	...

08002844 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8002844:	b580      	push	{r7, lr}
 8002846:	b090      	sub	sp, #64	@ 0x40
 8002848:	af00      	add	r7, sp, #0
 800284a:	60f8      	str	r0, [r7, #12]
 800284c:	60b9      	str	r1, [r7, #8]
 800284e:	1dbb      	adds	r3, r7, #6
 8002850:	801a      	strh	r2, [r3, #0]
  huart->pRxBuffPtr = pData;
 8002852:	68fb      	ldr	r3, [r7, #12]
 8002854:	68ba      	ldr	r2, [r7, #8]
 8002856:	659a      	str	r2, [r3, #88]	@ 0x58
  huart->RxXferSize = Size;
 8002858:	68fb      	ldr	r3, [r7, #12]
 800285a:	1dba      	adds	r2, r7, #6
 800285c:	215c      	movs	r1, #92	@ 0x5c
 800285e:	8812      	ldrh	r2, [r2, #0]
 8002860:	525a      	strh	r2, [r3, r1]

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002862:	68fb      	ldr	r3, [r7, #12]
 8002864:	2290      	movs	r2, #144	@ 0x90
 8002866:	2100      	movs	r1, #0
 8002868:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800286a:	68fb      	ldr	r3, [r7, #12]
 800286c:	228c      	movs	r2, #140	@ 0x8c
 800286e:	2122      	movs	r1, #34	@ 0x22
 8002870:	5099      	str	r1, [r3, r2]

  if (huart->hdmarx != NULL)
 8002872:	68fb      	ldr	r3, [r7, #12]
 8002874:	2280      	movs	r2, #128	@ 0x80
 8002876:	589b      	ldr	r3, [r3, r2]
 8002878:	2b00      	cmp	r3, #0
 800287a:	d02d      	beq.n	80028d8 <UART_Start_Receive_DMA+0x94>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800287c:	68fb      	ldr	r3, [r7, #12]
 800287e:	2280      	movs	r2, #128	@ 0x80
 8002880:	589b      	ldr	r3, [r3, r2]
 8002882:	4a40      	ldr	r2, [pc, #256]	@ (8002984 <UART_Start_Receive_DMA+0x140>)
 8002884:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8002886:	68fb      	ldr	r3, [r7, #12]
 8002888:	2280      	movs	r2, #128	@ 0x80
 800288a:	589b      	ldr	r3, [r3, r2]
 800288c:	4a3e      	ldr	r2, [pc, #248]	@ (8002988 <UART_Start_Receive_DMA+0x144>)
 800288e:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 8002890:	68fb      	ldr	r3, [r7, #12]
 8002892:	2280      	movs	r2, #128	@ 0x80
 8002894:	589b      	ldr	r3, [r3, r2]
 8002896:	4a3d      	ldr	r2, [pc, #244]	@ (800298c <UART_Start_Receive_DMA+0x148>)
 8002898:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 800289a:	68fb      	ldr	r3, [r7, #12]
 800289c:	2280      	movs	r2, #128	@ 0x80
 800289e:	589b      	ldr	r3, [r3, r2]
 80028a0:	2200      	movs	r2, #0
 80028a2:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 80028a4:	68fb      	ldr	r3, [r7, #12]
 80028a6:	2280      	movs	r2, #128	@ 0x80
 80028a8:	5898      	ldr	r0, [r3, r2]
 80028aa:	68fb      	ldr	r3, [r7, #12]
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	3324      	adds	r3, #36	@ 0x24
 80028b0:	0019      	movs	r1, r3
 80028b2:	68fb      	ldr	r3, [r7, #12]
 80028b4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80028b6:	001a      	movs	r2, r3
 80028b8:	1dbb      	adds	r3, r7, #6
 80028ba:	881b      	ldrh	r3, [r3, #0]
 80028bc:	f7fe fb1a 	bl	8000ef4 <HAL_DMA_Start_IT>
 80028c0:	1e03      	subs	r3, r0, #0
 80028c2:	d009      	beq.n	80028d8 <UART_Start_Receive_DMA+0x94>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 80028c4:	68fb      	ldr	r3, [r7, #12]
 80028c6:	2290      	movs	r2, #144	@ 0x90
 80028c8:	2110      	movs	r1, #16
 80028ca:	5099      	str	r1, [r3, r2]

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 80028cc:	68fb      	ldr	r3, [r7, #12]
 80028ce:	228c      	movs	r2, #140	@ 0x8c
 80028d0:	2120      	movs	r1, #32
 80028d2:	5099      	str	r1, [r3, r2]

      return HAL_ERROR;
 80028d4:	2301      	movs	r3, #1
 80028d6:	e050      	b.n	800297a <UART_Start_Receive_DMA+0x136>
    }
  }

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 80028d8:	68fb      	ldr	r3, [r7, #12]
 80028da:	691b      	ldr	r3, [r3, #16]
 80028dc:	2b00      	cmp	r3, #0
 80028de:	d019      	beq.n	8002914 <UART_Start_Receive_DMA+0xd0>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 80028e0:	f3ef 8310 	mrs	r3, PRIMASK
 80028e4:	62bb      	str	r3, [r7, #40]	@ 0x28
  return(result);
 80028e6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80028e8:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80028ea:	2301      	movs	r3, #1
 80028ec:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80028ee:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80028f0:	f383 8810 	msr	PRIMASK, r3
}
 80028f4:	46c0      	nop			@ (mov r8, r8)
 80028f6:	68fb      	ldr	r3, [r7, #12]
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	681a      	ldr	r2, [r3, #0]
 80028fc:	68fb      	ldr	r3, [r7, #12]
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	2180      	movs	r1, #128	@ 0x80
 8002902:	0049      	lsls	r1, r1, #1
 8002904:	430a      	orrs	r2, r1
 8002906:	601a      	str	r2, [r3, #0]
 8002908:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800290a:	633b      	str	r3, [r7, #48]	@ 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800290c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800290e:	f383 8810 	msr	PRIMASK, r3
}
 8002912:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8002914:	f3ef 8310 	mrs	r3, PRIMASK
 8002918:	613b      	str	r3, [r7, #16]
  return(result);
 800291a:	693b      	ldr	r3, [r7, #16]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800291c:	63bb      	str	r3, [r7, #56]	@ 0x38
 800291e:	2301      	movs	r3, #1
 8002920:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002922:	697b      	ldr	r3, [r7, #20]
 8002924:	f383 8810 	msr	PRIMASK, r3
}
 8002928:	46c0      	nop			@ (mov r8, r8)
 800292a:	68fb      	ldr	r3, [r7, #12]
 800292c:	681b      	ldr	r3, [r3, #0]
 800292e:	689a      	ldr	r2, [r3, #8]
 8002930:	68fb      	ldr	r3, [r7, #12]
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	2101      	movs	r1, #1
 8002936:	430a      	orrs	r2, r1
 8002938:	609a      	str	r2, [r3, #8]
 800293a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800293c:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800293e:	69bb      	ldr	r3, [r7, #24]
 8002940:	f383 8810 	msr	PRIMASK, r3
}
 8002944:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8002946:	f3ef 8310 	mrs	r3, PRIMASK
 800294a:	61fb      	str	r3, [r7, #28]
  return(result);
 800294c:	69fb      	ldr	r3, [r7, #28]

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800294e:	637b      	str	r3, [r7, #52]	@ 0x34
 8002950:	2301      	movs	r3, #1
 8002952:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002954:	6a3b      	ldr	r3, [r7, #32]
 8002956:	f383 8810 	msr	PRIMASK, r3
}
 800295a:	46c0      	nop			@ (mov r8, r8)
 800295c:	68fb      	ldr	r3, [r7, #12]
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	689a      	ldr	r2, [r3, #8]
 8002962:	68fb      	ldr	r3, [r7, #12]
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	2140      	movs	r1, #64	@ 0x40
 8002968:	430a      	orrs	r2, r1
 800296a:	609a      	str	r2, [r3, #8]
 800296c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800296e:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002970:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002972:	f383 8810 	msr	PRIMASK, r3
}
 8002976:	46c0      	nop			@ (mov r8, r8)

  return HAL_OK;
 8002978:	2300      	movs	r3, #0
}
 800297a:	0018      	movs	r0, r3
 800297c:	46bd      	mov	sp, r7
 800297e:	b010      	add	sp, #64	@ 0x40
 8002980:	bd80      	pop	{r7, pc}
 8002982:	46c0      	nop			@ (mov r8, r8)
 8002984:	08002add 	.word	0x08002add
 8002988:	08002c45 	.word	0x08002c45
 800298c:	08002cc3 	.word	0x08002cc3

08002990 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8002990:	b580      	push	{r7, lr}
 8002992:	b08a      	sub	sp, #40	@ 0x28
 8002994:	af00      	add	r7, sp, #0
 8002996:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8002998:	f3ef 8310 	mrs	r3, PRIMASK
 800299c:	60bb      	str	r3, [r7, #8]
  return(result);
 800299e:	68bb      	ldr	r3, [r7, #8]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 80029a0:	627b      	str	r3, [r7, #36]	@ 0x24
 80029a2:	2301      	movs	r3, #1
 80029a4:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80029a6:	68fb      	ldr	r3, [r7, #12]
 80029a8:	f383 8810 	msr	PRIMASK, r3
}
 80029ac:	46c0      	nop			@ (mov r8, r8)
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	681a      	ldr	r2, [r3, #0]
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	21c0      	movs	r1, #192	@ 0xc0
 80029ba:	438a      	bics	r2, r1
 80029bc:	601a      	str	r2, [r3, #0]
 80029be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80029c0:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80029c2:	693b      	ldr	r3, [r7, #16]
 80029c4:	f383 8810 	msr	PRIMASK, r3
}
 80029c8:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 80029ca:	f3ef 8310 	mrs	r3, PRIMASK
 80029ce:	617b      	str	r3, [r7, #20]
  return(result);
 80029d0:	697b      	ldr	r3, [r7, #20]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 80029d2:	623b      	str	r3, [r7, #32]
 80029d4:	2301      	movs	r3, #1
 80029d6:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80029d8:	69bb      	ldr	r3, [r7, #24]
 80029da:	f383 8810 	msr	PRIMASK, r3
}
 80029de:	46c0      	nop			@ (mov r8, r8)
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	689a      	ldr	r2, [r3, #8]
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	4908      	ldr	r1, [pc, #32]	@ (8002a0c <UART_EndTxTransfer+0x7c>)
 80029ec:	400a      	ands	r2, r1
 80029ee:	609a      	str	r2, [r3, #8]
 80029f0:	6a3b      	ldr	r3, [r7, #32]
 80029f2:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80029f4:	69fb      	ldr	r3, [r7, #28]
 80029f6:	f383 8810 	msr	PRIMASK, r3
}
 80029fa:	46c0      	nop			@ (mov r8, r8)

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	2288      	movs	r2, #136	@ 0x88
 8002a00:	2120      	movs	r1, #32
 8002a02:	5099      	str	r1, [r3, r2]
}
 8002a04:	46c0      	nop			@ (mov r8, r8)
 8002a06:	46bd      	mov	sp, r7
 8002a08:	b00a      	add	sp, #40	@ 0x28
 8002a0a:	bd80      	pop	{r7, pc}
 8002a0c:	ff7fffff 	.word	0xff7fffff

08002a10 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8002a10:	b580      	push	{r7, lr}
 8002a12:	b08e      	sub	sp, #56	@ 0x38
 8002a14:	af00      	add	r7, sp, #0
 8002a16:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8002a18:	f3ef 8310 	mrs	r3, PRIMASK
 8002a1c:	617b      	str	r3, [r7, #20]
  return(result);
 8002a1e:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8002a20:	637b      	str	r3, [r7, #52]	@ 0x34
 8002a22:	2301      	movs	r3, #1
 8002a24:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002a26:	69bb      	ldr	r3, [r7, #24]
 8002a28:	f383 8810 	msr	PRIMASK, r3
}
 8002a2c:	46c0      	nop			@ (mov r8, r8)
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	681a      	ldr	r2, [r3, #0]
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	4926      	ldr	r1, [pc, #152]	@ (8002ad4 <UART_EndRxTransfer+0xc4>)
 8002a3a:	400a      	ands	r2, r1
 8002a3c:	601a      	str	r2, [r3, #0]
 8002a3e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002a40:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002a42:	69fb      	ldr	r3, [r7, #28]
 8002a44:	f383 8810 	msr	PRIMASK, r3
}
 8002a48:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8002a4a:	f3ef 8310 	mrs	r3, PRIMASK
 8002a4e:	623b      	str	r3, [r7, #32]
  return(result);
 8002a50:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8002a52:	633b      	str	r3, [r7, #48]	@ 0x30
 8002a54:	2301      	movs	r3, #1
 8002a56:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002a58:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a5a:	f383 8810 	msr	PRIMASK, r3
}
 8002a5e:	46c0      	nop			@ (mov r8, r8)
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	689a      	ldr	r2, [r3, #8]
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	491b      	ldr	r1, [pc, #108]	@ (8002ad8 <UART_EndRxTransfer+0xc8>)
 8002a6c:	400a      	ands	r2, r1
 8002a6e:	609a      	str	r2, [r3, #8]
 8002a70:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002a72:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002a74:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002a76:	f383 8810 	msr	PRIMASK, r3
}
 8002a7a:	46c0      	nop			@ (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002a80:	2b01      	cmp	r3, #1
 8002a82:	d118      	bne.n	8002ab6 <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8002a84:	f3ef 8310 	mrs	r3, PRIMASK
 8002a88:	60bb      	str	r3, [r7, #8]
  return(result);
 8002a8a:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002a8c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002a8e:	2301      	movs	r3, #1
 8002a90:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002a92:	68fb      	ldr	r3, [r7, #12]
 8002a94:	f383 8810 	msr	PRIMASK, r3
}
 8002a98:	46c0      	nop			@ (mov r8, r8)
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	681a      	ldr	r2, [r3, #0]
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	2110      	movs	r1, #16
 8002aa6:	438a      	bics	r2, r1
 8002aa8:	601a      	str	r2, [r3, #0]
 8002aaa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002aac:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002aae:	693b      	ldr	r3, [r7, #16]
 8002ab0:	f383 8810 	msr	PRIMASK, r3
}
 8002ab4:	46c0      	nop			@ (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	228c      	movs	r2, #140	@ 0x8c
 8002aba:	2120      	movs	r1, #32
 8002abc:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	2200      	movs	r2, #0
 8002ac2:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	2200      	movs	r2, #0
 8002ac8:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8002aca:	46c0      	nop			@ (mov r8, r8)
 8002acc:	46bd      	mov	sp, r7
 8002ace:	b00e      	add	sp, #56	@ 0x38
 8002ad0:	bd80      	pop	{r7, pc}
 8002ad2:	46c0      	nop			@ (mov r8, r8)
 8002ad4:	fffffedf 	.word	0xfffffedf
 8002ad8:	effffffe 	.word	0xeffffffe

08002adc <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8002adc:	b580      	push	{r7, lr}
 8002ade:	b094      	sub	sp, #80	@ 0x50
 8002ae0:	af00      	add	r7, sp, #0
 8002ae2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002ae8:	64fb      	str	r3, [r7, #76]	@ 0x4c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	681b      	ldr	r3, [r3, #0]
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	2220      	movs	r2, #32
 8002af2:	4013      	ands	r3, r2
 8002af4:	d16f      	bne.n	8002bd6 <UART_DMAReceiveCplt+0xfa>
  {
    huart->RxXferCount = 0U;
 8002af6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8002af8:	225e      	movs	r2, #94	@ 0x5e
 8002afa:	2100      	movs	r1, #0
 8002afc:	5299      	strh	r1, [r3, r2]
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8002afe:	f3ef 8310 	mrs	r3, PRIMASK
 8002b02:	617b      	str	r3, [r7, #20]
  return(result);
 8002b04:	697b      	ldr	r3, [r7, #20]

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8002b06:	64bb      	str	r3, [r7, #72]	@ 0x48
 8002b08:	2301      	movs	r3, #1
 8002b0a:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002b0c:	69bb      	ldr	r3, [r7, #24]
 8002b0e:	f383 8810 	msr	PRIMASK, r3
}
 8002b12:	46c0      	nop			@ (mov r8, r8)
 8002b14:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	681a      	ldr	r2, [r3, #0]
 8002b1a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	4948      	ldr	r1, [pc, #288]	@ (8002c40 <UART_DMAReceiveCplt+0x164>)
 8002b20:	400a      	ands	r2, r1
 8002b22:	601a      	str	r2, [r3, #0]
 8002b24:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002b26:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002b28:	69fb      	ldr	r3, [r7, #28]
 8002b2a:	f383 8810 	msr	PRIMASK, r3
}
 8002b2e:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8002b30:	f3ef 8310 	mrs	r3, PRIMASK
 8002b34:	623b      	str	r3, [r7, #32]
  return(result);
 8002b36:	6a3b      	ldr	r3, [r7, #32]
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002b38:	647b      	str	r3, [r7, #68]	@ 0x44
 8002b3a:	2301      	movs	r3, #1
 8002b3c:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002b3e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002b40:	f383 8810 	msr	PRIMASK, r3
}
 8002b44:	46c0      	nop			@ (mov r8, r8)
 8002b46:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8002b48:	681b      	ldr	r3, [r3, #0]
 8002b4a:	689a      	ldr	r2, [r3, #8]
 8002b4c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	2101      	movs	r1, #1
 8002b52:	438a      	bics	r2, r1
 8002b54:	609a      	str	r2, [r3, #8]
 8002b56:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002b58:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002b5a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002b5c:	f383 8810 	msr	PRIMASK, r3
}
 8002b60:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8002b62:	f3ef 8310 	mrs	r3, PRIMASK
 8002b66:	62fb      	str	r3, [r7, #44]	@ 0x2c
  return(result);
 8002b68:	6afb      	ldr	r3, [r7, #44]	@ 0x2c

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002b6a:	643b      	str	r3, [r7, #64]	@ 0x40
 8002b6c:	2301      	movs	r3, #1
 8002b6e:	633b      	str	r3, [r7, #48]	@ 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002b70:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002b72:	f383 8810 	msr	PRIMASK, r3
}
 8002b76:	46c0      	nop			@ (mov r8, r8)
 8002b78:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	689a      	ldr	r2, [r3, #8]
 8002b7e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	2140      	movs	r1, #64	@ 0x40
 8002b84:	438a      	bics	r2, r1
 8002b86:	609a      	str	r2, [r3, #8]
 8002b88:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002b8a:	637b      	str	r3, [r7, #52]	@ 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002b8c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002b8e:	f383 8810 	msr	PRIMASK, r3
}
 8002b92:	46c0      	nop			@ (mov r8, r8)

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8002b94:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8002b96:	228c      	movs	r2, #140	@ 0x8c
 8002b98:	2120      	movs	r1, #32
 8002b9a:	5099      	str	r1, [r3, r2]

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002b9c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8002b9e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002ba0:	2b01      	cmp	r3, #1
 8002ba2:	d118      	bne.n	8002bd6 <UART_DMAReceiveCplt+0xfa>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8002ba4:	f3ef 8310 	mrs	r3, PRIMASK
 8002ba8:	60bb      	str	r3, [r7, #8]
  return(result);
 8002baa:	68bb      	ldr	r3, [r7, #8]
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002bac:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002bae:	2301      	movs	r3, #1
 8002bb0:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002bb2:	68fb      	ldr	r3, [r7, #12]
 8002bb4:	f383 8810 	msr	PRIMASK, r3
}
 8002bb8:	46c0      	nop			@ (mov r8, r8)
 8002bba:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	681a      	ldr	r2, [r3, #0]
 8002bc0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	2110      	movs	r1, #16
 8002bc6:	438a      	bics	r2, r1
 8002bc8:	601a      	str	r2, [r3, #0]
 8002bca:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002bcc:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002bce:	693b      	ldr	r3, [r7, #16]
 8002bd0:	f383 8810 	msr	PRIMASK, r3
}
 8002bd4:	46c0      	nop			@ (mov r8, r8)
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002bd6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8002bd8:	2200      	movs	r2, #0
 8002bda:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002bdc:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8002bde:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002be0:	2b01      	cmp	r3, #1
 8002be2:	d124      	bne.n	8002c2e <UART_DMAReceiveCplt+0x152>
  {
    huart->RxXferCount = 0;
 8002be4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8002be6:	225e      	movs	r2, #94	@ 0x5e
 8002be8:	2100      	movs	r1, #0
 8002bea:	5299      	strh	r1, [r3, r2]

    /* Check current nb of data still to be received on DMA side.
       DMA Normal mode, remaining nb of data will be 0
       DMA Circular mode, remaining nb of data is reset to RxXferSize */
    uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(hdma);
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	685a      	ldr	r2, [r3, #4]
 8002bf2:	213a      	movs	r1, #58	@ 0x3a
 8002bf4:	187b      	adds	r3, r7, r1
 8002bf6:	801a      	strh	r2, [r3, #0]
    if (nb_remaining_rx_data < huart->RxXferSize)
 8002bf8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8002bfa:	225c      	movs	r2, #92	@ 0x5c
 8002bfc:	5a9b      	ldrh	r3, [r3, r2]
 8002bfe:	187a      	adds	r2, r7, r1
 8002c00:	8812      	ldrh	r2, [r2, #0]
 8002c02:	429a      	cmp	r2, r3
 8002c04:	d204      	bcs.n	8002c10 <UART_DMAReceiveCplt+0x134>
    {
      /* Update nb of remaining data */
      huart->RxXferCount = nb_remaining_rx_data;
 8002c06:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8002c08:	187a      	adds	r2, r7, r1
 8002c0a:	215e      	movs	r1, #94	@ 0x5e
 8002c0c:	8812      	ldrh	r2, [r2, #0]
 8002c0e:	525a      	strh	r2, [r3, r1]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8002c10:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8002c12:	225c      	movs	r2, #92	@ 0x5c
 8002c14:	5a9a      	ldrh	r2, [r3, r2]
 8002c16:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8002c18:	215e      	movs	r1, #94	@ 0x5e
 8002c1a:	5a5b      	ldrh	r3, [r3, r1]
 8002c1c:	b29b      	uxth	r3, r3
 8002c1e:	1ad3      	subs	r3, r2, r3
 8002c20:	b29a      	uxth	r2, r3
 8002c22:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8002c24:	0011      	movs	r1, r2
 8002c26:	0018      	movs	r0, r3
 8002c28:	f7ff fa9d 	bl	8002166 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8002c2c:	e003      	b.n	8002c36 <UART_DMAReceiveCplt+0x15a>
    HAL_UART_RxCpltCallback(huart);
 8002c2e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8002c30:	0018      	movs	r0, r3
 8002c32:	f7fd fd59 	bl	80006e8 <HAL_UART_RxCpltCallback>
}
 8002c36:	46c0      	nop			@ (mov r8, r8)
 8002c38:	46bd      	mov	sp, r7
 8002c3a:	b014      	add	sp, #80	@ 0x50
 8002c3c:	bd80      	pop	{r7, pc}
 8002c3e:	46c0      	nop			@ (mov r8, r8)
 8002c40:	fffffeff 	.word	0xfffffeff

08002c44 <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8002c44:	b580      	push	{r7, lr}
 8002c46:	b084      	sub	sp, #16
 8002c48:	af00      	add	r7, sp, #0
 8002c4a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002c50:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 8002c52:	68fb      	ldr	r3, [r7, #12]
 8002c54:	2201      	movs	r2, #1
 8002c56:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002c58:	68fb      	ldr	r3, [r7, #12]
 8002c5a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002c5c:	2b01      	cmp	r3, #1
 8002c5e:	d128      	bne.n	8002cb2 <UART_DMARxHalfCplt+0x6e>
  {
    huart->RxXferCount = huart->RxXferSize / 2U;
 8002c60:	68fb      	ldr	r3, [r7, #12]
 8002c62:	225c      	movs	r2, #92	@ 0x5c
 8002c64:	5a9b      	ldrh	r3, [r3, r2]
 8002c66:	085b      	lsrs	r3, r3, #1
 8002c68:	b299      	uxth	r1, r3
 8002c6a:	68fb      	ldr	r3, [r7, #12]
 8002c6c:	225e      	movs	r2, #94	@ 0x5e
 8002c6e:	5299      	strh	r1, [r3, r2]

    /* Check current nb of data still to be received on DMA side. */
    uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(hdma);
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	685a      	ldr	r2, [r3, #4]
 8002c76:	210a      	movs	r1, #10
 8002c78:	187b      	adds	r3, r7, r1
 8002c7a:	801a      	strh	r2, [r3, #0]
    if (nb_remaining_rx_data <= huart->RxXferSize)
 8002c7c:	68fb      	ldr	r3, [r7, #12]
 8002c7e:	225c      	movs	r2, #92	@ 0x5c
 8002c80:	5a9b      	ldrh	r3, [r3, r2]
 8002c82:	187a      	adds	r2, r7, r1
 8002c84:	8812      	ldrh	r2, [r2, #0]
 8002c86:	429a      	cmp	r2, r3
 8002c88:	d804      	bhi.n	8002c94 <UART_DMARxHalfCplt+0x50>
    {
      /* Update nb of remaining data */
      huart->RxXferCount = nb_remaining_rx_data;
 8002c8a:	68fb      	ldr	r3, [r7, #12]
 8002c8c:	187a      	adds	r2, r7, r1
 8002c8e:	215e      	movs	r1, #94	@ 0x5e
 8002c90:	8812      	ldrh	r2, [r2, #0]
 8002c92:	525a      	strh	r2, [r3, r1]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8002c94:	68fb      	ldr	r3, [r7, #12]
 8002c96:	225c      	movs	r2, #92	@ 0x5c
 8002c98:	5a9a      	ldrh	r2, [r3, r2]
 8002c9a:	68fb      	ldr	r3, [r7, #12]
 8002c9c:	215e      	movs	r1, #94	@ 0x5e
 8002c9e:	5a5b      	ldrh	r3, [r3, r1]
 8002ca0:	b29b      	uxth	r3, r3
 8002ca2:	1ad3      	subs	r3, r2, r3
 8002ca4:	b29a      	uxth	r2, r3
 8002ca6:	68fb      	ldr	r3, [r7, #12]
 8002ca8:	0011      	movs	r1, r2
 8002caa:	0018      	movs	r0, r3
 8002cac:	f7ff fa5b 	bl	8002166 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8002cb0:	e003      	b.n	8002cba <UART_DMARxHalfCplt+0x76>
    HAL_UART_RxHalfCpltCallback(huart);
 8002cb2:	68fb      	ldr	r3, [r7, #12]
 8002cb4:	0018      	movs	r0, r3
 8002cb6:	f7fd fd1f 	bl	80006f8 <HAL_UART_RxHalfCpltCallback>
}
 8002cba:	46c0      	nop			@ (mov r8, r8)
 8002cbc:	46bd      	mov	sp, r7
 8002cbe:	b004      	add	sp, #16
 8002cc0:	bd80      	pop	{r7, pc}

08002cc2 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8002cc2:	b580      	push	{r7, lr}
 8002cc4:	b086      	sub	sp, #24
 8002cc6:	af00      	add	r7, sp, #0
 8002cc8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002cce:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 8002cd0:	697b      	ldr	r3, [r7, #20]
 8002cd2:	2288      	movs	r2, #136	@ 0x88
 8002cd4:	589b      	ldr	r3, [r3, r2]
 8002cd6:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 8002cd8:	697b      	ldr	r3, [r7, #20]
 8002cda:	228c      	movs	r2, #140	@ 0x8c
 8002cdc:	589b      	ldr	r3, [r3, r2]
 8002cde:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 8002ce0:	697b      	ldr	r3, [r7, #20]
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	689b      	ldr	r3, [r3, #8]
 8002ce6:	2280      	movs	r2, #128	@ 0x80
 8002ce8:	4013      	ands	r3, r2
 8002cea:	2b80      	cmp	r3, #128	@ 0x80
 8002cec:	d10a      	bne.n	8002d04 <UART_DMAError+0x42>
 8002cee:	693b      	ldr	r3, [r7, #16]
 8002cf0:	2b21      	cmp	r3, #33	@ 0x21
 8002cf2:	d107      	bne.n	8002d04 <UART_DMAError+0x42>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 8002cf4:	697b      	ldr	r3, [r7, #20]
 8002cf6:	2256      	movs	r2, #86	@ 0x56
 8002cf8:	2100      	movs	r1, #0
 8002cfa:	5299      	strh	r1, [r3, r2]
    UART_EndTxTransfer(huart);
 8002cfc:	697b      	ldr	r3, [r7, #20]
 8002cfe:	0018      	movs	r0, r3
 8002d00:	f7ff fe46 	bl	8002990 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 8002d04:	697b      	ldr	r3, [r7, #20]
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	689b      	ldr	r3, [r3, #8]
 8002d0a:	2240      	movs	r2, #64	@ 0x40
 8002d0c:	4013      	ands	r3, r2
 8002d0e:	2b40      	cmp	r3, #64	@ 0x40
 8002d10:	d10a      	bne.n	8002d28 <UART_DMAError+0x66>
 8002d12:	68fb      	ldr	r3, [r7, #12]
 8002d14:	2b22      	cmp	r3, #34	@ 0x22
 8002d16:	d107      	bne.n	8002d28 <UART_DMAError+0x66>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 8002d18:	697b      	ldr	r3, [r7, #20]
 8002d1a:	225e      	movs	r2, #94	@ 0x5e
 8002d1c:	2100      	movs	r1, #0
 8002d1e:	5299      	strh	r1, [r3, r2]
    UART_EndRxTransfer(huart);
 8002d20:	697b      	ldr	r3, [r7, #20]
 8002d22:	0018      	movs	r0, r3
 8002d24:	f7ff fe74 	bl	8002a10 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8002d28:	697b      	ldr	r3, [r7, #20]
 8002d2a:	2290      	movs	r2, #144	@ 0x90
 8002d2c:	589b      	ldr	r3, [r3, r2]
 8002d2e:	2210      	movs	r2, #16
 8002d30:	431a      	orrs	r2, r3
 8002d32:	697b      	ldr	r3, [r7, #20]
 8002d34:	2190      	movs	r1, #144	@ 0x90
 8002d36:	505a      	str	r2, [r3, r1]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8002d38:	697b      	ldr	r3, [r7, #20]
 8002d3a:	0018      	movs	r0, r3
 8002d3c:	f7fd fcae 	bl	800069c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8002d40:	46c0      	nop			@ (mov r8, r8)
 8002d42:	46bd      	mov	sp, r7
 8002d44:	b006      	add	sp, #24
 8002d46:	bd80      	pop	{r7, pc}

08002d48 <std>:
 8002d48:	2300      	movs	r3, #0
 8002d4a:	b510      	push	{r4, lr}
 8002d4c:	0004      	movs	r4, r0
 8002d4e:	6003      	str	r3, [r0, #0]
 8002d50:	6043      	str	r3, [r0, #4]
 8002d52:	6083      	str	r3, [r0, #8]
 8002d54:	8181      	strh	r1, [r0, #12]
 8002d56:	6643      	str	r3, [r0, #100]	@ 0x64
 8002d58:	81c2      	strh	r2, [r0, #14]
 8002d5a:	6103      	str	r3, [r0, #16]
 8002d5c:	6143      	str	r3, [r0, #20]
 8002d5e:	6183      	str	r3, [r0, #24]
 8002d60:	0019      	movs	r1, r3
 8002d62:	2208      	movs	r2, #8
 8002d64:	305c      	adds	r0, #92	@ 0x5c
 8002d66:	f000 fa0f 	bl	8003188 <memset>
 8002d6a:	4b0b      	ldr	r3, [pc, #44]	@ (8002d98 <std+0x50>)
 8002d6c:	6224      	str	r4, [r4, #32]
 8002d6e:	6263      	str	r3, [r4, #36]	@ 0x24
 8002d70:	4b0a      	ldr	r3, [pc, #40]	@ (8002d9c <std+0x54>)
 8002d72:	62a3      	str	r3, [r4, #40]	@ 0x28
 8002d74:	4b0a      	ldr	r3, [pc, #40]	@ (8002da0 <std+0x58>)
 8002d76:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8002d78:	4b0a      	ldr	r3, [pc, #40]	@ (8002da4 <std+0x5c>)
 8002d7a:	6323      	str	r3, [r4, #48]	@ 0x30
 8002d7c:	4b0a      	ldr	r3, [pc, #40]	@ (8002da8 <std+0x60>)
 8002d7e:	429c      	cmp	r4, r3
 8002d80:	d005      	beq.n	8002d8e <std+0x46>
 8002d82:	4b0a      	ldr	r3, [pc, #40]	@ (8002dac <std+0x64>)
 8002d84:	429c      	cmp	r4, r3
 8002d86:	d002      	beq.n	8002d8e <std+0x46>
 8002d88:	4b09      	ldr	r3, [pc, #36]	@ (8002db0 <std+0x68>)
 8002d8a:	429c      	cmp	r4, r3
 8002d8c:	d103      	bne.n	8002d96 <std+0x4e>
 8002d8e:	0020      	movs	r0, r4
 8002d90:	3058      	adds	r0, #88	@ 0x58
 8002d92:	f000 fa79 	bl	8003288 <__retarget_lock_init_recursive>
 8002d96:	bd10      	pop	{r4, pc}
 8002d98:	08002fb1 	.word	0x08002fb1
 8002d9c:	08002fd9 	.word	0x08002fd9
 8002da0:	08003011 	.word	0x08003011
 8002da4:	0800303d 	.word	0x0800303d
 8002da8:	2000022c 	.word	0x2000022c
 8002dac:	20000294 	.word	0x20000294
 8002db0:	200002fc 	.word	0x200002fc

08002db4 <stdio_exit_handler>:
 8002db4:	b510      	push	{r4, lr}
 8002db6:	4a03      	ldr	r2, [pc, #12]	@ (8002dc4 <stdio_exit_handler+0x10>)
 8002db8:	4903      	ldr	r1, [pc, #12]	@ (8002dc8 <stdio_exit_handler+0x14>)
 8002dba:	4804      	ldr	r0, [pc, #16]	@ (8002dcc <stdio_exit_handler+0x18>)
 8002dbc:	f000 f86c 	bl	8002e98 <_fwalk_sglue>
 8002dc0:	bd10      	pop	{r4, pc}
 8002dc2:	46c0      	nop			@ (mov r8, r8)
 8002dc4:	20000014 	.word	0x20000014
 8002dc8:	08003b25 	.word	0x08003b25
 8002dcc:	20000024 	.word	0x20000024

08002dd0 <cleanup_stdio>:
 8002dd0:	6841      	ldr	r1, [r0, #4]
 8002dd2:	4b0b      	ldr	r3, [pc, #44]	@ (8002e00 <cleanup_stdio+0x30>)
 8002dd4:	b510      	push	{r4, lr}
 8002dd6:	0004      	movs	r4, r0
 8002dd8:	4299      	cmp	r1, r3
 8002dda:	d001      	beq.n	8002de0 <cleanup_stdio+0x10>
 8002ddc:	f000 fea2 	bl	8003b24 <_fflush_r>
 8002de0:	68a1      	ldr	r1, [r4, #8]
 8002de2:	4b08      	ldr	r3, [pc, #32]	@ (8002e04 <cleanup_stdio+0x34>)
 8002de4:	4299      	cmp	r1, r3
 8002de6:	d002      	beq.n	8002dee <cleanup_stdio+0x1e>
 8002de8:	0020      	movs	r0, r4
 8002dea:	f000 fe9b 	bl	8003b24 <_fflush_r>
 8002dee:	68e1      	ldr	r1, [r4, #12]
 8002df0:	4b05      	ldr	r3, [pc, #20]	@ (8002e08 <cleanup_stdio+0x38>)
 8002df2:	4299      	cmp	r1, r3
 8002df4:	d002      	beq.n	8002dfc <cleanup_stdio+0x2c>
 8002df6:	0020      	movs	r0, r4
 8002df8:	f000 fe94 	bl	8003b24 <_fflush_r>
 8002dfc:	bd10      	pop	{r4, pc}
 8002dfe:	46c0      	nop			@ (mov r8, r8)
 8002e00:	2000022c 	.word	0x2000022c
 8002e04:	20000294 	.word	0x20000294
 8002e08:	200002fc 	.word	0x200002fc

08002e0c <global_stdio_init.part.0>:
 8002e0c:	b510      	push	{r4, lr}
 8002e0e:	4b09      	ldr	r3, [pc, #36]	@ (8002e34 <global_stdio_init.part.0+0x28>)
 8002e10:	4a09      	ldr	r2, [pc, #36]	@ (8002e38 <global_stdio_init.part.0+0x2c>)
 8002e12:	2104      	movs	r1, #4
 8002e14:	601a      	str	r2, [r3, #0]
 8002e16:	4809      	ldr	r0, [pc, #36]	@ (8002e3c <global_stdio_init.part.0+0x30>)
 8002e18:	2200      	movs	r2, #0
 8002e1a:	f7ff ff95 	bl	8002d48 <std>
 8002e1e:	2201      	movs	r2, #1
 8002e20:	2109      	movs	r1, #9
 8002e22:	4807      	ldr	r0, [pc, #28]	@ (8002e40 <global_stdio_init.part.0+0x34>)
 8002e24:	f7ff ff90 	bl	8002d48 <std>
 8002e28:	2202      	movs	r2, #2
 8002e2a:	2112      	movs	r1, #18
 8002e2c:	4805      	ldr	r0, [pc, #20]	@ (8002e44 <global_stdio_init.part.0+0x38>)
 8002e2e:	f7ff ff8b 	bl	8002d48 <std>
 8002e32:	bd10      	pop	{r4, pc}
 8002e34:	20000364 	.word	0x20000364
 8002e38:	08002db5 	.word	0x08002db5
 8002e3c:	2000022c 	.word	0x2000022c
 8002e40:	20000294 	.word	0x20000294
 8002e44:	200002fc 	.word	0x200002fc

08002e48 <__sfp_lock_acquire>:
 8002e48:	b510      	push	{r4, lr}
 8002e4a:	4802      	ldr	r0, [pc, #8]	@ (8002e54 <__sfp_lock_acquire+0xc>)
 8002e4c:	f000 fa1d 	bl	800328a <__retarget_lock_acquire_recursive>
 8002e50:	bd10      	pop	{r4, pc}
 8002e52:	46c0      	nop			@ (mov r8, r8)
 8002e54:	2000036d 	.word	0x2000036d

08002e58 <__sfp_lock_release>:
 8002e58:	b510      	push	{r4, lr}
 8002e5a:	4802      	ldr	r0, [pc, #8]	@ (8002e64 <__sfp_lock_release+0xc>)
 8002e5c:	f000 fa16 	bl	800328c <__retarget_lock_release_recursive>
 8002e60:	bd10      	pop	{r4, pc}
 8002e62:	46c0      	nop			@ (mov r8, r8)
 8002e64:	2000036d 	.word	0x2000036d

08002e68 <__sinit>:
 8002e68:	b510      	push	{r4, lr}
 8002e6a:	0004      	movs	r4, r0
 8002e6c:	f7ff ffec 	bl	8002e48 <__sfp_lock_acquire>
 8002e70:	6a23      	ldr	r3, [r4, #32]
 8002e72:	2b00      	cmp	r3, #0
 8002e74:	d002      	beq.n	8002e7c <__sinit+0x14>
 8002e76:	f7ff ffef 	bl	8002e58 <__sfp_lock_release>
 8002e7a:	bd10      	pop	{r4, pc}
 8002e7c:	4b04      	ldr	r3, [pc, #16]	@ (8002e90 <__sinit+0x28>)
 8002e7e:	6223      	str	r3, [r4, #32]
 8002e80:	4b04      	ldr	r3, [pc, #16]	@ (8002e94 <__sinit+0x2c>)
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	2b00      	cmp	r3, #0
 8002e86:	d1f6      	bne.n	8002e76 <__sinit+0xe>
 8002e88:	f7ff ffc0 	bl	8002e0c <global_stdio_init.part.0>
 8002e8c:	e7f3      	b.n	8002e76 <__sinit+0xe>
 8002e8e:	46c0      	nop			@ (mov r8, r8)
 8002e90:	08002dd1 	.word	0x08002dd1
 8002e94:	20000364 	.word	0x20000364

08002e98 <_fwalk_sglue>:
 8002e98:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8002e9a:	0014      	movs	r4, r2
 8002e9c:	2600      	movs	r6, #0
 8002e9e:	9000      	str	r0, [sp, #0]
 8002ea0:	9101      	str	r1, [sp, #4]
 8002ea2:	68a5      	ldr	r5, [r4, #8]
 8002ea4:	6867      	ldr	r7, [r4, #4]
 8002ea6:	3f01      	subs	r7, #1
 8002ea8:	d504      	bpl.n	8002eb4 <_fwalk_sglue+0x1c>
 8002eaa:	6824      	ldr	r4, [r4, #0]
 8002eac:	2c00      	cmp	r4, #0
 8002eae:	d1f8      	bne.n	8002ea2 <_fwalk_sglue+0xa>
 8002eb0:	0030      	movs	r0, r6
 8002eb2:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8002eb4:	89ab      	ldrh	r3, [r5, #12]
 8002eb6:	2b01      	cmp	r3, #1
 8002eb8:	d908      	bls.n	8002ecc <_fwalk_sglue+0x34>
 8002eba:	220e      	movs	r2, #14
 8002ebc:	5eab      	ldrsh	r3, [r5, r2]
 8002ebe:	3301      	adds	r3, #1
 8002ec0:	d004      	beq.n	8002ecc <_fwalk_sglue+0x34>
 8002ec2:	0029      	movs	r1, r5
 8002ec4:	9800      	ldr	r0, [sp, #0]
 8002ec6:	9b01      	ldr	r3, [sp, #4]
 8002ec8:	4798      	blx	r3
 8002eca:	4306      	orrs	r6, r0
 8002ecc:	3568      	adds	r5, #104	@ 0x68
 8002ece:	e7ea      	b.n	8002ea6 <_fwalk_sglue+0xe>

08002ed0 <iprintf>:
 8002ed0:	b40f      	push	{r0, r1, r2, r3}
 8002ed2:	b507      	push	{r0, r1, r2, lr}
 8002ed4:	4905      	ldr	r1, [pc, #20]	@ (8002eec <iprintf+0x1c>)
 8002ed6:	ab04      	add	r3, sp, #16
 8002ed8:	6808      	ldr	r0, [r1, #0]
 8002eda:	cb04      	ldmia	r3!, {r2}
 8002edc:	6881      	ldr	r1, [r0, #8]
 8002ede:	9301      	str	r3, [sp, #4]
 8002ee0:	f000 fb02 	bl	80034e8 <_vfiprintf_r>
 8002ee4:	b003      	add	sp, #12
 8002ee6:	bc08      	pop	{r3}
 8002ee8:	b004      	add	sp, #16
 8002eea:	4718      	bx	r3
 8002eec:	20000020 	.word	0x20000020

08002ef0 <_puts_r>:
 8002ef0:	6a03      	ldr	r3, [r0, #32]
 8002ef2:	b570      	push	{r4, r5, r6, lr}
 8002ef4:	0005      	movs	r5, r0
 8002ef6:	000e      	movs	r6, r1
 8002ef8:	6884      	ldr	r4, [r0, #8]
 8002efa:	2b00      	cmp	r3, #0
 8002efc:	d101      	bne.n	8002f02 <_puts_r+0x12>
 8002efe:	f7ff ffb3 	bl	8002e68 <__sinit>
 8002f02:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8002f04:	07db      	lsls	r3, r3, #31
 8002f06:	d405      	bmi.n	8002f14 <_puts_r+0x24>
 8002f08:	89a3      	ldrh	r3, [r4, #12]
 8002f0a:	059b      	lsls	r3, r3, #22
 8002f0c:	d402      	bmi.n	8002f14 <_puts_r+0x24>
 8002f0e:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8002f10:	f000 f9bb 	bl	800328a <__retarget_lock_acquire_recursive>
 8002f14:	89a3      	ldrh	r3, [r4, #12]
 8002f16:	071b      	lsls	r3, r3, #28
 8002f18:	d502      	bpl.n	8002f20 <_puts_r+0x30>
 8002f1a:	6923      	ldr	r3, [r4, #16]
 8002f1c:	2b00      	cmp	r3, #0
 8002f1e:	d11f      	bne.n	8002f60 <_puts_r+0x70>
 8002f20:	0021      	movs	r1, r4
 8002f22:	0028      	movs	r0, r5
 8002f24:	f000 f8d2 	bl	80030cc <__swsetup_r>
 8002f28:	2800      	cmp	r0, #0
 8002f2a:	d019      	beq.n	8002f60 <_puts_r+0x70>
 8002f2c:	2501      	movs	r5, #1
 8002f2e:	426d      	negs	r5, r5
 8002f30:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8002f32:	07db      	lsls	r3, r3, #31
 8002f34:	d405      	bmi.n	8002f42 <_puts_r+0x52>
 8002f36:	89a3      	ldrh	r3, [r4, #12]
 8002f38:	059b      	lsls	r3, r3, #22
 8002f3a:	d402      	bmi.n	8002f42 <_puts_r+0x52>
 8002f3c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8002f3e:	f000 f9a5 	bl	800328c <__retarget_lock_release_recursive>
 8002f42:	0028      	movs	r0, r5
 8002f44:	bd70      	pop	{r4, r5, r6, pc}
 8002f46:	3601      	adds	r6, #1
 8002f48:	60a3      	str	r3, [r4, #8]
 8002f4a:	2b00      	cmp	r3, #0
 8002f4c:	da04      	bge.n	8002f58 <_puts_r+0x68>
 8002f4e:	69a2      	ldr	r2, [r4, #24]
 8002f50:	429a      	cmp	r2, r3
 8002f52:	dc16      	bgt.n	8002f82 <_puts_r+0x92>
 8002f54:	290a      	cmp	r1, #10
 8002f56:	d014      	beq.n	8002f82 <_puts_r+0x92>
 8002f58:	6823      	ldr	r3, [r4, #0]
 8002f5a:	1c5a      	adds	r2, r3, #1
 8002f5c:	6022      	str	r2, [r4, #0]
 8002f5e:	7019      	strb	r1, [r3, #0]
 8002f60:	68a3      	ldr	r3, [r4, #8]
 8002f62:	7831      	ldrb	r1, [r6, #0]
 8002f64:	3b01      	subs	r3, #1
 8002f66:	2900      	cmp	r1, #0
 8002f68:	d1ed      	bne.n	8002f46 <_puts_r+0x56>
 8002f6a:	60a3      	str	r3, [r4, #8]
 8002f6c:	2b00      	cmp	r3, #0
 8002f6e:	da0f      	bge.n	8002f90 <_puts_r+0xa0>
 8002f70:	0022      	movs	r2, r4
 8002f72:	0028      	movs	r0, r5
 8002f74:	310a      	adds	r1, #10
 8002f76:	f000 f867 	bl	8003048 <__swbuf_r>
 8002f7a:	3001      	adds	r0, #1
 8002f7c:	d0d6      	beq.n	8002f2c <_puts_r+0x3c>
 8002f7e:	250a      	movs	r5, #10
 8002f80:	e7d6      	b.n	8002f30 <_puts_r+0x40>
 8002f82:	0022      	movs	r2, r4
 8002f84:	0028      	movs	r0, r5
 8002f86:	f000 f85f 	bl	8003048 <__swbuf_r>
 8002f8a:	3001      	adds	r0, #1
 8002f8c:	d1e8      	bne.n	8002f60 <_puts_r+0x70>
 8002f8e:	e7cd      	b.n	8002f2c <_puts_r+0x3c>
 8002f90:	6823      	ldr	r3, [r4, #0]
 8002f92:	1c5a      	adds	r2, r3, #1
 8002f94:	6022      	str	r2, [r4, #0]
 8002f96:	220a      	movs	r2, #10
 8002f98:	701a      	strb	r2, [r3, #0]
 8002f9a:	e7f0      	b.n	8002f7e <_puts_r+0x8e>

08002f9c <puts>:
 8002f9c:	b510      	push	{r4, lr}
 8002f9e:	4b03      	ldr	r3, [pc, #12]	@ (8002fac <puts+0x10>)
 8002fa0:	0001      	movs	r1, r0
 8002fa2:	6818      	ldr	r0, [r3, #0]
 8002fa4:	f7ff ffa4 	bl	8002ef0 <_puts_r>
 8002fa8:	bd10      	pop	{r4, pc}
 8002faa:	46c0      	nop			@ (mov r8, r8)
 8002fac:	20000020 	.word	0x20000020

08002fb0 <__sread>:
 8002fb0:	b570      	push	{r4, r5, r6, lr}
 8002fb2:	000c      	movs	r4, r1
 8002fb4:	250e      	movs	r5, #14
 8002fb6:	5f49      	ldrsh	r1, [r1, r5]
 8002fb8:	f000 f914 	bl	80031e4 <_read_r>
 8002fbc:	2800      	cmp	r0, #0
 8002fbe:	db03      	blt.n	8002fc8 <__sread+0x18>
 8002fc0:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 8002fc2:	181b      	adds	r3, r3, r0
 8002fc4:	6563      	str	r3, [r4, #84]	@ 0x54
 8002fc6:	bd70      	pop	{r4, r5, r6, pc}
 8002fc8:	89a3      	ldrh	r3, [r4, #12]
 8002fca:	4a02      	ldr	r2, [pc, #8]	@ (8002fd4 <__sread+0x24>)
 8002fcc:	4013      	ands	r3, r2
 8002fce:	81a3      	strh	r3, [r4, #12]
 8002fd0:	e7f9      	b.n	8002fc6 <__sread+0x16>
 8002fd2:	46c0      	nop			@ (mov r8, r8)
 8002fd4:	ffffefff 	.word	0xffffefff

08002fd8 <__swrite>:
 8002fd8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002fda:	001f      	movs	r7, r3
 8002fdc:	898b      	ldrh	r3, [r1, #12]
 8002fde:	0005      	movs	r5, r0
 8002fe0:	000c      	movs	r4, r1
 8002fe2:	0016      	movs	r6, r2
 8002fe4:	05db      	lsls	r3, r3, #23
 8002fe6:	d505      	bpl.n	8002ff4 <__swrite+0x1c>
 8002fe8:	230e      	movs	r3, #14
 8002fea:	5ec9      	ldrsh	r1, [r1, r3]
 8002fec:	2200      	movs	r2, #0
 8002fee:	2302      	movs	r3, #2
 8002ff0:	f000 f8e4 	bl	80031bc <_lseek_r>
 8002ff4:	89a3      	ldrh	r3, [r4, #12]
 8002ff6:	4a05      	ldr	r2, [pc, #20]	@ (800300c <__swrite+0x34>)
 8002ff8:	0028      	movs	r0, r5
 8002ffa:	4013      	ands	r3, r2
 8002ffc:	81a3      	strh	r3, [r4, #12]
 8002ffe:	0032      	movs	r2, r6
 8003000:	230e      	movs	r3, #14
 8003002:	5ee1      	ldrsh	r1, [r4, r3]
 8003004:	003b      	movs	r3, r7
 8003006:	f000 f901 	bl	800320c <_write_r>
 800300a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800300c:	ffffefff 	.word	0xffffefff

08003010 <__sseek>:
 8003010:	b570      	push	{r4, r5, r6, lr}
 8003012:	000c      	movs	r4, r1
 8003014:	250e      	movs	r5, #14
 8003016:	5f49      	ldrsh	r1, [r1, r5]
 8003018:	f000 f8d0 	bl	80031bc <_lseek_r>
 800301c:	89a3      	ldrh	r3, [r4, #12]
 800301e:	1c42      	adds	r2, r0, #1
 8003020:	d103      	bne.n	800302a <__sseek+0x1a>
 8003022:	4a05      	ldr	r2, [pc, #20]	@ (8003038 <__sseek+0x28>)
 8003024:	4013      	ands	r3, r2
 8003026:	81a3      	strh	r3, [r4, #12]
 8003028:	bd70      	pop	{r4, r5, r6, pc}
 800302a:	2280      	movs	r2, #128	@ 0x80
 800302c:	0152      	lsls	r2, r2, #5
 800302e:	4313      	orrs	r3, r2
 8003030:	81a3      	strh	r3, [r4, #12]
 8003032:	6560      	str	r0, [r4, #84]	@ 0x54
 8003034:	e7f8      	b.n	8003028 <__sseek+0x18>
 8003036:	46c0      	nop			@ (mov r8, r8)
 8003038:	ffffefff 	.word	0xffffefff

0800303c <__sclose>:
 800303c:	b510      	push	{r4, lr}
 800303e:	230e      	movs	r3, #14
 8003040:	5ec9      	ldrsh	r1, [r1, r3]
 8003042:	f000 f8a9 	bl	8003198 <_close_r>
 8003046:	bd10      	pop	{r4, pc}

08003048 <__swbuf_r>:
 8003048:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800304a:	0006      	movs	r6, r0
 800304c:	000d      	movs	r5, r1
 800304e:	0014      	movs	r4, r2
 8003050:	2800      	cmp	r0, #0
 8003052:	d004      	beq.n	800305e <__swbuf_r+0x16>
 8003054:	6a03      	ldr	r3, [r0, #32]
 8003056:	2b00      	cmp	r3, #0
 8003058:	d101      	bne.n	800305e <__swbuf_r+0x16>
 800305a:	f7ff ff05 	bl	8002e68 <__sinit>
 800305e:	69a3      	ldr	r3, [r4, #24]
 8003060:	60a3      	str	r3, [r4, #8]
 8003062:	89a3      	ldrh	r3, [r4, #12]
 8003064:	071b      	lsls	r3, r3, #28
 8003066:	d502      	bpl.n	800306e <__swbuf_r+0x26>
 8003068:	6923      	ldr	r3, [r4, #16]
 800306a:	2b00      	cmp	r3, #0
 800306c:	d109      	bne.n	8003082 <__swbuf_r+0x3a>
 800306e:	0021      	movs	r1, r4
 8003070:	0030      	movs	r0, r6
 8003072:	f000 f82b 	bl	80030cc <__swsetup_r>
 8003076:	2800      	cmp	r0, #0
 8003078:	d003      	beq.n	8003082 <__swbuf_r+0x3a>
 800307a:	2501      	movs	r5, #1
 800307c:	426d      	negs	r5, r5
 800307e:	0028      	movs	r0, r5
 8003080:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003082:	6923      	ldr	r3, [r4, #16]
 8003084:	6820      	ldr	r0, [r4, #0]
 8003086:	b2ef      	uxtb	r7, r5
 8003088:	1ac0      	subs	r0, r0, r3
 800308a:	6963      	ldr	r3, [r4, #20]
 800308c:	b2ed      	uxtb	r5, r5
 800308e:	4283      	cmp	r3, r0
 8003090:	dc05      	bgt.n	800309e <__swbuf_r+0x56>
 8003092:	0021      	movs	r1, r4
 8003094:	0030      	movs	r0, r6
 8003096:	f000 fd45 	bl	8003b24 <_fflush_r>
 800309a:	2800      	cmp	r0, #0
 800309c:	d1ed      	bne.n	800307a <__swbuf_r+0x32>
 800309e:	68a3      	ldr	r3, [r4, #8]
 80030a0:	3001      	adds	r0, #1
 80030a2:	3b01      	subs	r3, #1
 80030a4:	60a3      	str	r3, [r4, #8]
 80030a6:	6823      	ldr	r3, [r4, #0]
 80030a8:	1c5a      	adds	r2, r3, #1
 80030aa:	6022      	str	r2, [r4, #0]
 80030ac:	701f      	strb	r7, [r3, #0]
 80030ae:	6963      	ldr	r3, [r4, #20]
 80030b0:	4283      	cmp	r3, r0
 80030b2:	d004      	beq.n	80030be <__swbuf_r+0x76>
 80030b4:	89a3      	ldrh	r3, [r4, #12]
 80030b6:	07db      	lsls	r3, r3, #31
 80030b8:	d5e1      	bpl.n	800307e <__swbuf_r+0x36>
 80030ba:	2d0a      	cmp	r5, #10
 80030bc:	d1df      	bne.n	800307e <__swbuf_r+0x36>
 80030be:	0021      	movs	r1, r4
 80030c0:	0030      	movs	r0, r6
 80030c2:	f000 fd2f 	bl	8003b24 <_fflush_r>
 80030c6:	2800      	cmp	r0, #0
 80030c8:	d0d9      	beq.n	800307e <__swbuf_r+0x36>
 80030ca:	e7d6      	b.n	800307a <__swbuf_r+0x32>

080030cc <__swsetup_r>:
 80030cc:	4b2d      	ldr	r3, [pc, #180]	@ (8003184 <__swsetup_r+0xb8>)
 80030ce:	b570      	push	{r4, r5, r6, lr}
 80030d0:	0005      	movs	r5, r0
 80030d2:	6818      	ldr	r0, [r3, #0]
 80030d4:	000c      	movs	r4, r1
 80030d6:	2800      	cmp	r0, #0
 80030d8:	d004      	beq.n	80030e4 <__swsetup_r+0x18>
 80030da:	6a03      	ldr	r3, [r0, #32]
 80030dc:	2b00      	cmp	r3, #0
 80030de:	d101      	bne.n	80030e4 <__swsetup_r+0x18>
 80030e0:	f7ff fec2 	bl	8002e68 <__sinit>
 80030e4:	220c      	movs	r2, #12
 80030e6:	5ea3      	ldrsh	r3, [r4, r2]
 80030e8:	071a      	lsls	r2, r3, #28
 80030ea:	d423      	bmi.n	8003134 <__swsetup_r+0x68>
 80030ec:	06da      	lsls	r2, r3, #27
 80030ee:	d407      	bmi.n	8003100 <__swsetup_r+0x34>
 80030f0:	2209      	movs	r2, #9
 80030f2:	602a      	str	r2, [r5, #0]
 80030f4:	2240      	movs	r2, #64	@ 0x40
 80030f6:	2001      	movs	r0, #1
 80030f8:	4313      	orrs	r3, r2
 80030fa:	81a3      	strh	r3, [r4, #12]
 80030fc:	4240      	negs	r0, r0
 80030fe:	e03a      	b.n	8003176 <__swsetup_r+0xaa>
 8003100:	075b      	lsls	r3, r3, #29
 8003102:	d513      	bpl.n	800312c <__swsetup_r+0x60>
 8003104:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8003106:	2900      	cmp	r1, #0
 8003108:	d008      	beq.n	800311c <__swsetup_r+0x50>
 800310a:	0023      	movs	r3, r4
 800310c:	3344      	adds	r3, #68	@ 0x44
 800310e:	4299      	cmp	r1, r3
 8003110:	d002      	beq.n	8003118 <__swsetup_r+0x4c>
 8003112:	0028      	movs	r0, r5
 8003114:	f000 f8c4 	bl	80032a0 <_free_r>
 8003118:	2300      	movs	r3, #0
 800311a:	6363      	str	r3, [r4, #52]	@ 0x34
 800311c:	2224      	movs	r2, #36	@ 0x24
 800311e:	89a3      	ldrh	r3, [r4, #12]
 8003120:	4393      	bics	r3, r2
 8003122:	81a3      	strh	r3, [r4, #12]
 8003124:	2300      	movs	r3, #0
 8003126:	6063      	str	r3, [r4, #4]
 8003128:	6923      	ldr	r3, [r4, #16]
 800312a:	6023      	str	r3, [r4, #0]
 800312c:	2308      	movs	r3, #8
 800312e:	89a2      	ldrh	r2, [r4, #12]
 8003130:	4313      	orrs	r3, r2
 8003132:	81a3      	strh	r3, [r4, #12]
 8003134:	6923      	ldr	r3, [r4, #16]
 8003136:	2b00      	cmp	r3, #0
 8003138:	d10b      	bne.n	8003152 <__swsetup_r+0x86>
 800313a:	21a0      	movs	r1, #160	@ 0xa0
 800313c:	2280      	movs	r2, #128	@ 0x80
 800313e:	89a3      	ldrh	r3, [r4, #12]
 8003140:	0089      	lsls	r1, r1, #2
 8003142:	0092      	lsls	r2, r2, #2
 8003144:	400b      	ands	r3, r1
 8003146:	4293      	cmp	r3, r2
 8003148:	d003      	beq.n	8003152 <__swsetup_r+0x86>
 800314a:	0021      	movs	r1, r4
 800314c:	0028      	movs	r0, r5
 800314e:	f000 fd3f 	bl	8003bd0 <__smakebuf_r>
 8003152:	220c      	movs	r2, #12
 8003154:	5ea3      	ldrsh	r3, [r4, r2]
 8003156:	2101      	movs	r1, #1
 8003158:	001a      	movs	r2, r3
 800315a:	400a      	ands	r2, r1
 800315c:	420b      	tst	r3, r1
 800315e:	d00b      	beq.n	8003178 <__swsetup_r+0xac>
 8003160:	2200      	movs	r2, #0
 8003162:	60a2      	str	r2, [r4, #8]
 8003164:	6962      	ldr	r2, [r4, #20]
 8003166:	4252      	negs	r2, r2
 8003168:	61a2      	str	r2, [r4, #24]
 800316a:	2000      	movs	r0, #0
 800316c:	6922      	ldr	r2, [r4, #16]
 800316e:	4282      	cmp	r2, r0
 8003170:	d101      	bne.n	8003176 <__swsetup_r+0xaa>
 8003172:	061a      	lsls	r2, r3, #24
 8003174:	d4be      	bmi.n	80030f4 <__swsetup_r+0x28>
 8003176:	bd70      	pop	{r4, r5, r6, pc}
 8003178:	0799      	lsls	r1, r3, #30
 800317a:	d400      	bmi.n	800317e <__swsetup_r+0xb2>
 800317c:	6962      	ldr	r2, [r4, #20]
 800317e:	60a2      	str	r2, [r4, #8]
 8003180:	e7f3      	b.n	800316a <__swsetup_r+0x9e>
 8003182:	46c0      	nop			@ (mov r8, r8)
 8003184:	20000020 	.word	0x20000020

08003188 <memset>:
 8003188:	0003      	movs	r3, r0
 800318a:	1882      	adds	r2, r0, r2
 800318c:	4293      	cmp	r3, r2
 800318e:	d100      	bne.n	8003192 <memset+0xa>
 8003190:	4770      	bx	lr
 8003192:	7019      	strb	r1, [r3, #0]
 8003194:	3301      	adds	r3, #1
 8003196:	e7f9      	b.n	800318c <memset+0x4>

08003198 <_close_r>:
 8003198:	2300      	movs	r3, #0
 800319a:	b570      	push	{r4, r5, r6, lr}
 800319c:	4d06      	ldr	r5, [pc, #24]	@ (80031b8 <_close_r+0x20>)
 800319e:	0004      	movs	r4, r0
 80031a0:	0008      	movs	r0, r1
 80031a2:	602b      	str	r3, [r5, #0]
 80031a4:	f7fd fc05 	bl	80009b2 <_close>
 80031a8:	1c43      	adds	r3, r0, #1
 80031aa:	d103      	bne.n	80031b4 <_close_r+0x1c>
 80031ac:	682b      	ldr	r3, [r5, #0]
 80031ae:	2b00      	cmp	r3, #0
 80031b0:	d000      	beq.n	80031b4 <_close_r+0x1c>
 80031b2:	6023      	str	r3, [r4, #0]
 80031b4:	bd70      	pop	{r4, r5, r6, pc}
 80031b6:	46c0      	nop			@ (mov r8, r8)
 80031b8:	20000368 	.word	0x20000368

080031bc <_lseek_r>:
 80031bc:	b570      	push	{r4, r5, r6, lr}
 80031be:	0004      	movs	r4, r0
 80031c0:	0008      	movs	r0, r1
 80031c2:	0011      	movs	r1, r2
 80031c4:	001a      	movs	r2, r3
 80031c6:	2300      	movs	r3, #0
 80031c8:	4d05      	ldr	r5, [pc, #20]	@ (80031e0 <_lseek_r+0x24>)
 80031ca:	602b      	str	r3, [r5, #0]
 80031cc:	f7fd fc12 	bl	80009f4 <_lseek>
 80031d0:	1c43      	adds	r3, r0, #1
 80031d2:	d103      	bne.n	80031dc <_lseek_r+0x20>
 80031d4:	682b      	ldr	r3, [r5, #0]
 80031d6:	2b00      	cmp	r3, #0
 80031d8:	d000      	beq.n	80031dc <_lseek_r+0x20>
 80031da:	6023      	str	r3, [r4, #0]
 80031dc:	bd70      	pop	{r4, r5, r6, pc}
 80031de:	46c0      	nop			@ (mov r8, r8)
 80031e0:	20000368 	.word	0x20000368

080031e4 <_read_r>:
 80031e4:	b570      	push	{r4, r5, r6, lr}
 80031e6:	0004      	movs	r4, r0
 80031e8:	0008      	movs	r0, r1
 80031ea:	0011      	movs	r1, r2
 80031ec:	001a      	movs	r2, r3
 80031ee:	2300      	movs	r3, #0
 80031f0:	4d05      	ldr	r5, [pc, #20]	@ (8003208 <_read_r+0x24>)
 80031f2:	602b      	str	r3, [r5, #0]
 80031f4:	f7fd fba4 	bl	8000940 <_read>
 80031f8:	1c43      	adds	r3, r0, #1
 80031fa:	d103      	bne.n	8003204 <_read_r+0x20>
 80031fc:	682b      	ldr	r3, [r5, #0]
 80031fe:	2b00      	cmp	r3, #0
 8003200:	d000      	beq.n	8003204 <_read_r+0x20>
 8003202:	6023      	str	r3, [r4, #0]
 8003204:	bd70      	pop	{r4, r5, r6, pc}
 8003206:	46c0      	nop			@ (mov r8, r8)
 8003208:	20000368 	.word	0x20000368

0800320c <_write_r>:
 800320c:	b570      	push	{r4, r5, r6, lr}
 800320e:	0004      	movs	r4, r0
 8003210:	0008      	movs	r0, r1
 8003212:	0011      	movs	r1, r2
 8003214:	001a      	movs	r2, r3
 8003216:	2300      	movs	r3, #0
 8003218:	4d05      	ldr	r5, [pc, #20]	@ (8003230 <_write_r+0x24>)
 800321a:	602b      	str	r3, [r5, #0]
 800321c:	f7fd fbad 	bl	800097a <_write>
 8003220:	1c43      	adds	r3, r0, #1
 8003222:	d103      	bne.n	800322c <_write_r+0x20>
 8003224:	682b      	ldr	r3, [r5, #0]
 8003226:	2b00      	cmp	r3, #0
 8003228:	d000      	beq.n	800322c <_write_r+0x20>
 800322a:	6023      	str	r3, [r4, #0]
 800322c:	bd70      	pop	{r4, r5, r6, pc}
 800322e:	46c0      	nop			@ (mov r8, r8)
 8003230:	20000368 	.word	0x20000368

08003234 <__errno>:
 8003234:	4b01      	ldr	r3, [pc, #4]	@ (800323c <__errno+0x8>)
 8003236:	6818      	ldr	r0, [r3, #0]
 8003238:	4770      	bx	lr
 800323a:	46c0      	nop			@ (mov r8, r8)
 800323c:	20000020 	.word	0x20000020

08003240 <__libc_init_array>:
 8003240:	b570      	push	{r4, r5, r6, lr}
 8003242:	2600      	movs	r6, #0
 8003244:	4c0c      	ldr	r4, [pc, #48]	@ (8003278 <__libc_init_array+0x38>)
 8003246:	4d0d      	ldr	r5, [pc, #52]	@ (800327c <__libc_init_array+0x3c>)
 8003248:	1b64      	subs	r4, r4, r5
 800324a:	10a4      	asrs	r4, r4, #2
 800324c:	42a6      	cmp	r6, r4
 800324e:	d109      	bne.n	8003264 <__libc_init_array+0x24>
 8003250:	2600      	movs	r6, #0
 8003252:	f000 fd41 	bl	8003cd8 <_init>
 8003256:	4c0a      	ldr	r4, [pc, #40]	@ (8003280 <__libc_init_array+0x40>)
 8003258:	4d0a      	ldr	r5, [pc, #40]	@ (8003284 <__libc_init_array+0x44>)
 800325a:	1b64      	subs	r4, r4, r5
 800325c:	10a4      	asrs	r4, r4, #2
 800325e:	42a6      	cmp	r6, r4
 8003260:	d105      	bne.n	800326e <__libc_init_array+0x2e>
 8003262:	bd70      	pop	{r4, r5, r6, pc}
 8003264:	00b3      	lsls	r3, r6, #2
 8003266:	58eb      	ldr	r3, [r5, r3]
 8003268:	4798      	blx	r3
 800326a:	3601      	adds	r6, #1
 800326c:	e7ee      	b.n	800324c <__libc_init_array+0xc>
 800326e:	00b3      	lsls	r3, r6, #2
 8003270:	58eb      	ldr	r3, [r5, r3]
 8003272:	4798      	blx	r3
 8003274:	3601      	adds	r6, #1
 8003276:	e7f2      	b.n	800325e <__libc_init_array+0x1e>
 8003278:	08003ddc 	.word	0x08003ddc
 800327c:	08003ddc 	.word	0x08003ddc
 8003280:	08003de0 	.word	0x08003de0
 8003284:	08003ddc 	.word	0x08003ddc

08003288 <__retarget_lock_init_recursive>:
 8003288:	4770      	bx	lr

0800328a <__retarget_lock_acquire_recursive>:
 800328a:	4770      	bx	lr

0800328c <__retarget_lock_release_recursive>:
 800328c:	4770      	bx	lr

0800328e <memcpy>:
 800328e:	2300      	movs	r3, #0
 8003290:	b510      	push	{r4, lr}
 8003292:	429a      	cmp	r2, r3
 8003294:	d100      	bne.n	8003298 <memcpy+0xa>
 8003296:	bd10      	pop	{r4, pc}
 8003298:	5ccc      	ldrb	r4, [r1, r3]
 800329a:	54c4      	strb	r4, [r0, r3]
 800329c:	3301      	adds	r3, #1
 800329e:	e7f8      	b.n	8003292 <memcpy+0x4>

080032a0 <_free_r>:
 80032a0:	b570      	push	{r4, r5, r6, lr}
 80032a2:	0005      	movs	r5, r0
 80032a4:	1e0c      	subs	r4, r1, #0
 80032a6:	d010      	beq.n	80032ca <_free_r+0x2a>
 80032a8:	3c04      	subs	r4, #4
 80032aa:	6823      	ldr	r3, [r4, #0]
 80032ac:	2b00      	cmp	r3, #0
 80032ae:	da00      	bge.n	80032b2 <_free_r+0x12>
 80032b0:	18e4      	adds	r4, r4, r3
 80032b2:	0028      	movs	r0, r5
 80032b4:	f000 f8e0 	bl	8003478 <__malloc_lock>
 80032b8:	4a1d      	ldr	r2, [pc, #116]	@ (8003330 <_free_r+0x90>)
 80032ba:	6813      	ldr	r3, [r2, #0]
 80032bc:	2b00      	cmp	r3, #0
 80032be:	d105      	bne.n	80032cc <_free_r+0x2c>
 80032c0:	6063      	str	r3, [r4, #4]
 80032c2:	6014      	str	r4, [r2, #0]
 80032c4:	0028      	movs	r0, r5
 80032c6:	f000 f8df 	bl	8003488 <__malloc_unlock>
 80032ca:	bd70      	pop	{r4, r5, r6, pc}
 80032cc:	42a3      	cmp	r3, r4
 80032ce:	d908      	bls.n	80032e2 <_free_r+0x42>
 80032d0:	6820      	ldr	r0, [r4, #0]
 80032d2:	1821      	adds	r1, r4, r0
 80032d4:	428b      	cmp	r3, r1
 80032d6:	d1f3      	bne.n	80032c0 <_free_r+0x20>
 80032d8:	6819      	ldr	r1, [r3, #0]
 80032da:	685b      	ldr	r3, [r3, #4]
 80032dc:	1809      	adds	r1, r1, r0
 80032de:	6021      	str	r1, [r4, #0]
 80032e0:	e7ee      	b.n	80032c0 <_free_r+0x20>
 80032e2:	001a      	movs	r2, r3
 80032e4:	685b      	ldr	r3, [r3, #4]
 80032e6:	2b00      	cmp	r3, #0
 80032e8:	d001      	beq.n	80032ee <_free_r+0x4e>
 80032ea:	42a3      	cmp	r3, r4
 80032ec:	d9f9      	bls.n	80032e2 <_free_r+0x42>
 80032ee:	6811      	ldr	r1, [r2, #0]
 80032f0:	1850      	adds	r0, r2, r1
 80032f2:	42a0      	cmp	r0, r4
 80032f4:	d10b      	bne.n	800330e <_free_r+0x6e>
 80032f6:	6820      	ldr	r0, [r4, #0]
 80032f8:	1809      	adds	r1, r1, r0
 80032fa:	1850      	adds	r0, r2, r1
 80032fc:	6011      	str	r1, [r2, #0]
 80032fe:	4283      	cmp	r3, r0
 8003300:	d1e0      	bne.n	80032c4 <_free_r+0x24>
 8003302:	6818      	ldr	r0, [r3, #0]
 8003304:	685b      	ldr	r3, [r3, #4]
 8003306:	1841      	adds	r1, r0, r1
 8003308:	6011      	str	r1, [r2, #0]
 800330a:	6053      	str	r3, [r2, #4]
 800330c:	e7da      	b.n	80032c4 <_free_r+0x24>
 800330e:	42a0      	cmp	r0, r4
 8003310:	d902      	bls.n	8003318 <_free_r+0x78>
 8003312:	230c      	movs	r3, #12
 8003314:	602b      	str	r3, [r5, #0]
 8003316:	e7d5      	b.n	80032c4 <_free_r+0x24>
 8003318:	6820      	ldr	r0, [r4, #0]
 800331a:	1821      	adds	r1, r4, r0
 800331c:	428b      	cmp	r3, r1
 800331e:	d103      	bne.n	8003328 <_free_r+0x88>
 8003320:	6819      	ldr	r1, [r3, #0]
 8003322:	685b      	ldr	r3, [r3, #4]
 8003324:	1809      	adds	r1, r1, r0
 8003326:	6021      	str	r1, [r4, #0]
 8003328:	6063      	str	r3, [r4, #4]
 800332a:	6054      	str	r4, [r2, #4]
 800332c:	e7ca      	b.n	80032c4 <_free_r+0x24>
 800332e:	46c0      	nop			@ (mov r8, r8)
 8003330:	20000374 	.word	0x20000374

08003334 <sbrk_aligned>:
 8003334:	b570      	push	{r4, r5, r6, lr}
 8003336:	4e0f      	ldr	r6, [pc, #60]	@ (8003374 <sbrk_aligned+0x40>)
 8003338:	000d      	movs	r5, r1
 800333a:	6831      	ldr	r1, [r6, #0]
 800333c:	0004      	movs	r4, r0
 800333e:	2900      	cmp	r1, #0
 8003340:	d102      	bne.n	8003348 <sbrk_aligned+0x14>
 8003342:	f000 fcab 	bl	8003c9c <_sbrk_r>
 8003346:	6030      	str	r0, [r6, #0]
 8003348:	0029      	movs	r1, r5
 800334a:	0020      	movs	r0, r4
 800334c:	f000 fca6 	bl	8003c9c <_sbrk_r>
 8003350:	1c43      	adds	r3, r0, #1
 8003352:	d103      	bne.n	800335c <sbrk_aligned+0x28>
 8003354:	2501      	movs	r5, #1
 8003356:	426d      	negs	r5, r5
 8003358:	0028      	movs	r0, r5
 800335a:	bd70      	pop	{r4, r5, r6, pc}
 800335c:	2303      	movs	r3, #3
 800335e:	1cc5      	adds	r5, r0, #3
 8003360:	439d      	bics	r5, r3
 8003362:	42a8      	cmp	r0, r5
 8003364:	d0f8      	beq.n	8003358 <sbrk_aligned+0x24>
 8003366:	1a29      	subs	r1, r5, r0
 8003368:	0020      	movs	r0, r4
 800336a:	f000 fc97 	bl	8003c9c <_sbrk_r>
 800336e:	3001      	adds	r0, #1
 8003370:	d1f2      	bne.n	8003358 <sbrk_aligned+0x24>
 8003372:	e7ef      	b.n	8003354 <sbrk_aligned+0x20>
 8003374:	20000370 	.word	0x20000370

08003378 <_malloc_r>:
 8003378:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800337a:	2203      	movs	r2, #3
 800337c:	1ccb      	adds	r3, r1, #3
 800337e:	4393      	bics	r3, r2
 8003380:	3308      	adds	r3, #8
 8003382:	0005      	movs	r5, r0
 8003384:	001f      	movs	r7, r3
 8003386:	2b0c      	cmp	r3, #12
 8003388:	d234      	bcs.n	80033f4 <_malloc_r+0x7c>
 800338a:	270c      	movs	r7, #12
 800338c:	42b9      	cmp	r1, r7
 800338e:	d833      	bhi.n	80033f8 <_malloc_r+0x80>
 8003390:	0028      	movs	r0, r5
 8003392:	f000 f871 	bl	8003478 <__malloc_lock>
 8003396:	4e37      	ldr	r6, [pc, #220]	@ (8003474 <_malloc_r+0xfc>)
 8003398:	6833      	ldr	r3, [r6, #0]
 800339a:	001c      	movs	r4, r3
 800339c:	2c00      	cmp	r4, #0
 800339e:	d12f      	bne.n	8003400 <_malloc_r+0x88>
 80033a0:	0039      	movs	r1, r7
 80033a2:	0028      	movs	r0, r5
 80033a4:	f7ff ffc6 	bl	8003334 <sbrk_aligned>
 80033a8:	0004      	movs	r4, r0
 80033aa:	1c43      	adds	r3, r0, #1
 80033ac:	d15f      	bne.n	800346e <_malloc_r+0xf6>
 80033ae:	6834      	ldr	r4, [r6, #0]
 80033b0:	9400      	str	r4, [sp, #0]
 80033b2:	9b00      	ldr	r3, [sp, #0]
 80033b4:	2b00      	cmp	r3, #0
 80033b6:	d14a      	bne.n	800344e <_malloc_r+0xd6>
 80033b8:	2c00      	cmp	r4, #0
 80033ba:	d052      	beq.n	8003462 <_malloc_r+0xea>
 80033bc:	6823      	ldr	r3, [r4, #0]
 80033be:	0028      	movs	r0, r5
 80033c0:	18e3      	adds	r3, r4, r3
 80033c2:	9900      	ldr	r1, [sp, #0]
 80033c4:	9301      	str	r3, [sp, #4]
 80033c6:	f000 fc69 	bl	8003c9c <_sbrk_r>
 80033ca:	9b01      	ldr	r3, [sp, #4]
 80033cc:	4283      	cmp	r3, r0
 80033ce:	d148      	bne.n	8003462 <_malloc_r+0xea>
 80033d0:	6823      	ldr	r3, [r4, #0]
 80033d2:	0028      	movs	r0, r5
 80033d4:	1aff      	subs	r7, r7, r3
 80033d6:	0039      	movs	r1, r7
 80033d8:	f7ff ffac 	bl	8003334 <sbrk_aligned>
 80033dc:	3001      	adds	r0, #1
 80033de:	d040      	beq.n	8003462 <_malloc_r+0xea>
 80033e0:	6823      	ldr	r3, [r4, #0]
 80033e2:	19db      	adds	r3, r3, r7
 80033e4:	6023      	str	r3, [r4, #0]
 80033e6:	6833      	ldr	r3, [r6, #0]
 80033e8:	685a      	ldr	r2, [r3, #4]
 80033ea:	2a00      	cmp	r2, #0
 80033ec:	d133      	bne.n	8003456 <_malloc_r+0xde>
 80033ee:	9b00      	ldr	r3, [sp, #0]
 80033f0:	6033      	str	r3, [r6, #0]
 80033f2:	e019      	b.n	8003428 <_malloc_r+0xb0>
 80033f4:	2b00      	cmp	r3, #0
 80033f6:	dac9      	bge.n	800338c <_malloc_r+0x14>
 80033f8:	230c      	movs	r3, #12
 80033fa:	602b      	str	r3, [r5, #0]
 80033fc:	2000      	movs	r0, #0
 80033fe:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8003400:	6821      	ldr	r1, [r4, #0]
 8003402:	1bc9      	subs	r1, r1, r7
 8003404:	d420      	bmi.n	8003448 <_malloc_r+0xd0>
 8003406:	290b      	cmp	r1, #11
 8003408:	d90a      	bls.n	8003420 <_malloc_r+0xa8>
 800340a:	19e2      	adds	r2, r4, r7
 800340c:	6027      	str	r7, [r4, #0]
 800340e:	42a3      	cmp	r3, r4
 8003410:	d104      	bne.n	800341c <_malloc_r+0xa4>
 8003412:	6032      	str	r2, [r6, #0]
 8003414:	6863      	ldr	r3, [r4, #4]
 8003416:	6011      	str	r1, [r2, #0]
 8003418:	6053      	str	r3, [r2, #4]
 800341a:	e005      	b.n	8003428 <_malloc_r+0xb0>
 800341c:	605a      	str	r2, [r3, #4]
 800341e:	e7f9      	b.n	8003414 <_malloc_r+0x9c>
 8003420:	6862      	ldr	r2, [r4, #4]
 8003422:	42a3      	cmp	r3, r4
 8003424:	d10e      	bne.n	8003444 <_malloc_r+0xcc>
 8003426:	6032      	str	r2, [r6, #0]
 8003428:	0028      	movs	r0, r5
 800342a:	f000 f82d 	bl	8003488 <__malloc_unlock>
 800342e:	0020      	movs	r0, r4
 8003430:	2207      	movs	r2, #7
 8003432:	300b      	adds	r0, #11
 8003434:	1d23      	adds	r3, r4, #4
 8003436:	4390      	bics	r0, r2
 8003438:	1ac2      	subs	r2, r0, r3
 800343a:	4298      	cmp	r0, r3
 800343c:	d0df      	beq.n	80033fe <_malloc_r+0x86>
 800343e:	1a1b      	subs	r3, r3, r0
 8003440:	50a3      	str	r3, [r4, r2]
 8003442:	e7dc      	b.n	80033fe <_malloc_r+0x86>
 8003444:	605a      	str	r2, [r3, #4]
 8003446:	e7ef      	b.n	8003428 <_malloc_r+0xb0>
 8003448:	0023      	movs	r3, r4
 800344a:	6864      	ldr	r4, [r4, #4]
 800344c:	e7a6      	b.n	800339c <_malloc_r+0x24>
 800344e:	9c00      	ldr	r4, [sp, #0]
 8003450:	6863      	ldr	r3, [r4, #4]
 8003452:	9300      	str	r3, [sp, #0]
 8003454:	e7ad      	b.n	80033b2 <_malloc_r+0x3a>
 8003456:	001a      	movs	r2, r3
 8003458:	685b      	ldr	r3, [r3, #4]
 800345a:	42a3      	cmp	r3, r4
 800345c:	d1fb      	bne.n	8003456 <_malloc_r+0xde>
 800345e:	2300      	movs	r3, #0
 8003460:	e7da      	b.n	8003418 <_malloc_r+0xa0>
 8003462:	230c      	movs	r3, #12
 8003464:	0028      	movs	r0, r5
 8003466:	602b      	str	r3, [r5, #0]
 8003468:	f000 f80e 	bl	8003488 <__malloc_unlock>
 800346c:	e7c6      	b.n	80033fc <_malloc_r+0x84>
 800346e:	6007      	str	r7, [r0, #0]
 8003470:	e7da      	b.n	8003428 <_malloc_r+0xb0>
 8003472:	46c0      	nop			@ (mov r8, r8)
 8003474:	20000374 	.word	0x20000374

08003478 <__malloc_lock>:
 8003478:	b510      	push	{r4, lr}
 800347a:	4802      	ldr	r0, [pc, #8]	@ (8003484 <__malloc_lock+0xc>)
 800347c:	f7ff ff05 	bl	800328a <__retarget_lock_acquire_recursive>
 8003480:	bd10      	pop	{r4, pc}
 8003482:	46c0      	nop			@ (mov r8, r8)
 8003484:	2000036c 	.word	0x2000036c

08003488 <__malloc_unlock>:
 8003488:	b510      	push	{r4, lr}
 800348a:	4802      	ldr	r0, [pc, #8]	@ (8003494 <__malloc_unlock+0xc>)
 800348c:	f7ff fefe 	bl	800328c <__retarget_lock_release_recursive>
 8003490:	bd10      	pop	{r4, pc}
 8003492:	46c0      	nop			@ (mov r8, r8)
 8003494:	2000036c 	.word	0x2000036c

08003498 <__sfputc_r>:
 8003498:	6893      	ldr	r3, [r2, #8]
 800349a:	b510      	push	{r4, lr}
 800349c:	3b01      	subs	r3, #1
 800349e:	6093      	str	r3, [r2, #8]
 80034a0:	2b00      	cmp	r3, #0
 80034a2:	da04      	bge.n	80034ae <__sfputc_r+0x16>
 80034a4:	6994      	ldr	r4, [r2, #24]
 80034a6:	42a3      	cmp	r3, r4
 80034a8:	db07      	blt.n	80034ba <__sfputc_r+0x22>
 80034aa:	290a      	cmp	r1, #10
 80034ac:	d005      	beq.n	80034ba <__sfputc_r+0x22>
 80034ae:	6813      	ldr	r3, [r2, #0]
 80034b0:	1c58      	adds	r0, r3, #1
 80034b2:	6010      	str	r0, [r2, #0]
 80034b4:	7019      	strb	r1, [r3, #0]
 80034b6:	0008      	movs	r0, r1
 80034b8:	bd10      	pop	{r4, pc}
 80034ba:	f7ff fdc5 	bl	8003048 <__swbuf_r>
 80034be:	0001      	movs	r1, r0
 80034c0:	e7f9      	b.n	80034b6 <__sfputc_r+0x1e>

080034c2 <__sfputs_r>:
 80034c2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80034c4:	0006      	movs	r6, r0
 80034c6:	000f      	movs	r7, r1
 80034c8:	0014      	movs	r4, r2
 80034ca:	18d5      	adds	r5, r2, r3
 80034cc:	42ac      	cmp	r4, r5
 80034ce:	d101      	bne.n	80034d4 <__sfputs_r+0x12>
 80034d0:	2000      	movs	r0, #0
 80034d2:	e007      	b.n	80034e4 <__sfputs_r+0x22>
 80034d4:	7821      	ldrb	r1, [r4, #0]
 80034d6:	003a      	movs	r2, r7
 80034d8:	0030      	movs	r0, r6
 80034da:	f7ff ffdd 	bl	8003498 <__sfputc_r>
 80034de:	3401      	adds	r4, #1
 80034e0:	1c43      	adds	r3, r0, #1
 80034e2:	d1f3      	bne.n	80034cc <__sfputs_r+0xa>
 80034e4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080034e8 <_vfiprintf_r>:
 80034e8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80034ea:	b0a1      	sub	sp, #132	@ 0x84
 80034ec:	000f      	movs	r7, r1
 80034ee:	0015      	movs	r5, r2
 80034f0:	001e      	movs	r6, r3
 80034f2:	9003      	str	r0, [sp, #12]
 80034f4:	2800      	cmp	r0, #0
 80034f6:	d004      	beq.n	8003502 <_vfiprintf_r+0x1a>
 80034f8:	6a03      	ldr	r3, [r0, #32]
 80034fa:	2b00      	cmp	r3, #0
 80034fc:	d101      	bne.n	8003502 <_vfiprintf_r+0x1a>
 80034fe:	f7ff fcb3 	bl	8002e68 <__sinit>
 8003502:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8003504:	07db      	lsls	r3, r3, #31
 8003506:	d405      	bmi.n	8003514 <_vfiprintf_r+0x2c>
 8003508:	89bb      	ldrh	r3, [r7, #12]
 800350a:	059b      	lsls	r3, r3, #22
 800350c:	d402      	bmi.n	8003514 <_vfiprintf_r+0x2c>
 800350e:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 8003510:	f7ff febb 	bl	800328a <__retarget_lock_acquire_recursive>
 8003514:	89bb      	ldrh	r3, [r7, #12]
 8003516:	071b      	lsls	r3, r3, #28
 8003518:	d502      	bpl.n	8003520 <_vfiprintf_r+0x38>
 800351a:	693b      	ldr	r3, [r7, #16]
 800351c:	2b00      	cmp	r3, #0
 800351e:	d113      	bne.n	8003548 <_vfiprintf_r+0x60>
 8003520:	0039      	movs	r1, r7
 8003522:	9803      	ldr	r0, [sp, #12]
 8003524:	f7ff fdd2 	bl	80030cc <__swsetup_r>
 8003528:	2800      	cmp	r0, #0
 800352a:	d00d      	beq.n	8003548 <_vfiprintf_r+0x60>
 800352c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800352e:	07db      	lsls	r3, r3, #31
 8003530:	d503      	bpl.n	800353a <_vfiprintf_r+0x52>
 8003532:	2001      	movs	r0, #1
 8003534:	4240      	negs	r0, r0
 8003536:	b021      	add	sp, #132	@ 0x84
 8003538:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800353a:	89bb      	ldrh	r3, [r7, #12]
 800353c:	059b      	lsls	r3, r3, #22
 800353e:	d4f8      	bmi.n	8003532 <_vfiprintf_r+0x4a>
 8003540:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 8003542:	f7ff fea3 	bl	800328c <__retarget_lock_release_recursive>
 8003546:	e7f4      	b.n	8003532 <_vfiprintf_r+0x4a>
 8003548:	2300      	movs	r3, #0
 800354a:	ac08      	add	r4, sp, #32
 800354c:	6163      	str	r3, [r4, #20]
 800354e:	3320      	adds	r3, #32
 8003550:	7663      	strb	r3, [r4, #25]
 8003552:	3310      	adds	r3, #16
 8003554:	76a3      	strb	r3, [r4, #26]
 8003556:	9607      	str	r6, [sp, #28]
 8003558:	002e      	movs	r6, r5
 800355a:	7833      	ldrb	r3, [r6, #0]
 800355c:	2b00      	cmp	r3, #0
 800355e:	d001      	beq.n	8003564 <_vfiprintf_r+0x7c>
 8003560:	2b25      	cmp	r3, #37	@ 0x25
 8003562:	d148      	bne.n	80035f6 <_vfiprintf_r+0x10e>
 8003564:	1b73      	subs	r3, r6, r5
 8003566:	9305      	str	r3, [sp, #20]
 8003568:	42ae      	cmp	r6, r5
 800356a:	d00b      	beq.n	8003584 <_vfiprintf_r+0x9c>
 800356c:	002a      	movs	r2, r5
 800356e:	0039      	movs	r1, r7
 8003570:	9803      	ldr	r0, [sp, #12]
 8003572:	f7ff ffa6 	bl	80034c2 <__sfputs_r>
 8003576:	3001      	adds	r0, #1
 8003578:	d100      	bne.n	800357c <_vfiprintf_r+0x94>
 800357a:	e0ae      	b.n	80036da <_vfiprintf_r+0x1f2>
 800357c:	6963      	ldr	r3, [r4, #20]
 800357e:	9a05      	ldr	r2, [sp, #20]
 8003580:	189b      	adds	r3, r3, r2
 8003582:	6163      	str	r3, [r4, #20]
 8003584:	7833      	ldrb	r3, [r6, #0]
 8003586:	2b00      	cmp	r3, #0
 8003588:	d100      	bne.n	800358c <_vfiprintf_r+0xa4>
 800358a:	e0a6      	b.n	80036da <_vfiprintf_r+0x1f2>
 800358c:	2201      	movs	r2, #1
 800358e:	2300      	movs	r3, #0
 8003590:	4252      	negs	r2, r2
 8003592:	6062      	str	r2, [r4, #4]
 8003594:	a904      	add	r1, sp, #16
 8003596:	3254      	adds	r2, #84	@ 0x54
 8003598:	1852      	adds	r2, r2, r1
 800359a:	1c75      	adds	r5, r6, #1
 800359c:	6023      	str	r3, [r4, #0]
 800359e:	60e3      	str	r3, [r4, #12]
 80035a0:	60a3      	str	r3, [r4, #8]
 80035a2:	7013      	strb	r3, [r2, #0]
 80035a4:	65a3      	str	r3, [r4, #88]	@ 0x58
 80035a6:	4b59      	ldr	r3, [pc, #356]	@ (800370c <_vfiprintf_r+0x224>)
 80035a8:	2205      	movs	r2, #5
 80035aa:	0018      	movs	r0, r3
 80035ac:	7829      	ldrb	r1, [r5, #0]
 80035ae:	9305      	str	r3, [sp, #20]
 80035b0:	f000 fb86 	bl	8003cc0 <memchr>
 80035b4:	1c6e      	adds	r6, r5, #1
 80035b6:	2800      	cmp	r0, #0
 80035b8:	d11f      	bne.n	80035fa <_vfiprintf_r+0x112>
 80035ba:	6822      	ldr	r2, [r4, #0]
 80035bc:	06d3      	lsls	r3, r2, #27
 80035be:	d504      	bpl.n	80035ca <_vfiprintf_r+0xe2>
 80035c0:	2353      	movs	r3, #83	@ 0x53
 80035c2:	a904      	add	r1, sp, #16
 80035c4:	185b      	adds	r3, r3, r1
 80035c6:	2120      	movs	r1, #32
 80035c8:	7019      	strb	r1, [r3, #0]
 80035ca:	0713      	lsls	r3, r2, #28
 80035cc:	d504      	bpl.n	80035d8 <_vfiprintf_r+0xf0>
 80035ce:	2353      	movs	r3, #83	@ 0x53
 80035d0:	a904      	add	r1, sp, #16
 80035d2:	185b      	adds	r3, r3, r1
 80035d4:	212b      	movs	r1, #43	@ 0x2b
 80035d6:	7019      	strb	r1, [r3, #0]
 80035d8:	782b      	ldrb	r3, [r5, #0]
 80035da:	2b2a      	cmp	r3, #42	@ 0x2a
 80035dc:	d016      	beq.n	800360c <_vfiprintf_r+0x124>
 80035de:	002e      	movs	r6, r5
 80035e0:	2100      	movs	r1, #0
 80035e2:	200a      	movs	r0, #10
 80035e4:	68e3      	ldr	r3, [r4, #12]
 80035e6:	7832      	ldrb	r2, [r6, #0]
 80035e8:	1c75      	adds	r5, r6, #1
 80035ea:	3a30      	subs	r2, #48	@ 0x30
 80035ec:	2a09      	cmp	r2, #9
 80035ee:	d950      	bls.n	8003692 <_vfiprintf_r+0x1aa>
 80035f0:	2900      	cmp	r1, #0
 80035f2:	d111      	bne.n	8003618 <_vfiprintf_r+0x130>
 80035f4:	e017      	b.n	8003626 <_vfiprintf_r+0x13e>
 80035f6:	3601      	adds	r6, #1
 80035f8:	e7af      	b.n	800355a <_vfiprintf_r+0x72>
 80035fa:	9b05      	ldr	r3, [sp, #20]
 80035fc:	6822      	ldr	r2, [r4, #0]
 80035fe:	1ac0      	subs	r0, r0, r3
 8003600:	2301      	movs	r3, #1
 8003602:	4083      	lsls	r3, r0
 8003604:	4313      	orrs	r3, r2
 8003606:	0035      	movs	r5, r6
 8003608:	6023      	str	r3, [r4, #0]
 800360a:	e7cc      	b.n	80035a6 <_vfiprintf_r+0xbe>
 800360c:	9b07      	ldr	r3, [sp, #28]
 800360e:	1d19      	adds	r1, r3, #4
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	9107      	str	r1, [sp, #28]
 8003614:	2b00      	cmp	r3, #0
 8003616:	db01      	blt.n	800361c <_vfiprintf_r+0x134>
 8003618:	930b      	str	r3, [sp, #44]	@ 0x2c
 800361a:	e004      	b.n	8003626 <_vfiprintf_r+0x13e>
 800361c:	425b      	negs	r3, r3
 800361e:	60e3      	str	r3, [r4, #12]
 8003620:	2302      	movs	r3, #2
 8003622:	4313      	orrs	r3, r2
 8003624:	6023      	str	r3, [r4, #0]
 8003626:	7833      	ldrb	r3, [r6, #0]
 8003628:	2b2e      	cmp	r3, #46	@ 0x2e
 800362a:	d10c      	bne.n	8003646 <_vfiprintf_r+0x15e>
 800362c:	7873      	ldrb	r3, [r6, #1]
 800362e:	2b2a      	cmp	r3, #42	@ 0x2a
 8003630:	d134      	bne.n	800369c <_vfiprintf_r+0x1b4>
 8003632:	9b07      	ldr	r3, [sp, #28]
 8003634:	3602      	adds	r6, #2
 8003636:	1d1a      	adds	r2, r3, #4
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	9207      	str	r2, [sp, #28]
 800363c:	2b00      	cmp	r3, #0
 800363e:	da01      	bge.n	8003644 <_vfiprintf_r+0x15c>
 8003640:	2301      	movs	r3, #1
 8003642:	425b      	negs	r3, r3
 8003644:	9309      	str	r3, [sp, #36]	@ 0x24
 8003646:	4d32      	ldr	r5, [pc, #200]	@ (8003710 <_vfiprintf_r+0x228>)
 8003648:	2203      	movs	r2, #3
 800364a:	0028      	movs	r0, r5
 800364c:	7831      	ldrb	r1, [r6, #0]
 800364e:	f000 fb37 	bl	8003cc0 <memchr>
 8003652:	2800      	cmp	r0, #0
 8003654:	d006      	beq.n	8003664 <_vfiprintf_r+0x17c>
 8003656:	2340      	movs	r3, #64	@ 0x40
 8003658:	1b40      	subs	r0, r0, r5
 800365a:	4083      	lsls	r3, r0
 800365c:	6822      	ldr	r2, [r4, #0]
 800365e:	3601      	adds	r6, #1
 8003660:	4313      	orrs	r3, r2
 8003662:	6023      	str	r3, [r4, #0]
 8003664:	7831      	ldrb	r1, [r6, #0]
 8003666:	2206      	movs	r2, #6
 8003668:	482a      	ldr	r0, [pc, #168]	@ (8003714 <_vfiprintf_r+0x22c>)
 800366a:	1c75      	adds	r5, r6, #1
 800366c:	7621      	strb	r1, [r4, #24]
 800366e:	f000 fb27 	bl	8003cc0 <memchr>
 8003672:	2800      	cmp	r0, #0
 8003674:	d040      	beq.n	80036f8 <_vfiprintf_r+0x210>
 8003676:	4b28      	ldr	r3, [pc, #160]	@ (8003718 <_vfiprintf_r+0x230>)
 8003678:	2b00      	cmp	r3, #0
 800367a:	d122      	bne.n	80036c2 <_vfiprintf_r+0x1da>
 800367c:	2207      	movs	r2, #7
 800367e:	9b07      	ldr	r3, [sp, #28]
 8003680:	3307      	adds	r3, #7
 8003682:	4393      	bics	r3, r2
 8003684:	3308      	adds	r3, #8
 8003686:	9307      	str	r3, [sp, #28]
 8003688:	6963      	ldr	r3, [r4, #20]
 800368a:	9a04      	ldr	r2, [sp, #16]
 800368c:	189b      	adds	r3, r3, r2
 800368e:	6163      	str	r3, [r4, #20]
 8003690:	e762      	b.n	8003558 <_vfiprintf_r+0x70>
 8003692:	4343      	muls	r3, r0
 8003694:	002e      	movs	r6, r5
 8003696:	2101      	movs	r1, #1
 8003698:	189b      	adds	r3, r3, r2
 800369a:	e7a4      	b.n	80035e6 <_vfiprintf_r+0xfe>
 800369c:	2300      	movs	r3, #0
 800369e:	200a      	movs	r0, #10
 80036a0:	0019      	movs	r1, r3
 80036a2:	3601      	adds	r6, #1
 80036a4:	6063      	str	r3, [r4, #4]
 80036a6:	7832      	ldrb	r2, [r6, #0]
 80036a8:	1c75      	adds	r5, r6, #1
 80036aa:	3a30      	subs	r2, #48	@ 0x30
 80036ac:	2a09      	cmp	r2, #9
 80036ae:	d903      	bls.n	80036b8 <_vfiprintf_r+0x1d0>
 80036b0:	2b00      	cmp	r3, #0
 80036b2:	d0c8      	beq.n	8003646 <_vfiprintf_r+0x15e>
 80036b4:	9109      	str	r1, [sp, #36]	@ 0x24
 80036b6:	e7c6      	b.n	8003646 <_vfiprintf_r+0x15e>
 80036b8:	4341      	muls	r1, r0
 80036ba:	002e      	movs	r6, r5
 80036bc:	2301      	movs	r3, #1
 80036be:	1889      	adds	r1, r1, r2
 80036c0:	e7f1      	b.n	80036a6 <_vfiprintf_r+0x1be>
 80036c2:	aa07      	add	r2, sp, #28
 80036c4:	9200      	str	r2, [sp, #0]
 80036c6:	0021      	movs	r1, r4
 80036c8:	003a      	movs	r2, r7
 80036ca:	4b14      	ldr	r3, [pc, #80]	@ (800371c <_vfiprintf_r+0x234>)
 80036cc:	9803      	ldr	r0, [sp, #12]
 80036ce:	e000      	b.n	80036d2 <_vfiprintf_r+0x1ea>
 80036d0:	bf00      	nop
 80036d2:	9004      	str	r0, [sp, #16]
 80036d4:	9b04      	ldr	r3, [sp, #16]
 80036d6:	3301      	adds	r3, #1
 80036d8:	d1d6      	bne.n	8003688 <_vfiprintf_r+0x1a0>
 80036da:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80036dc:	07db      	lsls	r3, r3, #31
 80036de:	d405      	bmi.n	80036ec <_vfiprintf_r+0x204>
 80036e0:	89bb      	ldrh	r3, [r7, #12]
 80036e2:	059b      	lsls	r3, r3, #22
 80036e4:	d402      	bmi.n	80036ec <_vfiprintf_r+0x204>
 80036e6:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 80036e8:	f7ff fdd0 	bl	800328c <__retarget_lock_release_recursive>
 80036ec:	89bb      	ldrh	r3, [r7, #12]
 80036ee:	065b      	lsls	r3, r3, #25
 80036f0:	d500      	bpl.n	80036f4 <_vfiprintf_r+0x20c>
 80036f2:	e71e      	b.n	8003532 <_vfiprintf_r+0x4a>
 80036f4:	980d      	ldr	r0, [sp, #52]	@ 0x34
 80036f6:	e71e      	b.n	8003536 <_vfiprintf_r+0x4e>
 80036f8:	aa07      	add	r2, sp, #28
 80036fa:	9200      	str	r2, [sp, #0]
 80036fc:	0021      	movs	r1, r4
 80036fe:	003a      	movs	r2, r7
 8003700:	4b06      	ldr	r3, [pc, #24]	@ (800371c <_vfiprintf_r+0x234>)
 8003702:	9803      	ldr	r0, [sp, #12]
 8003704:	f000 f87c 	bl	8003800 <_printf_i>
 8003708:	e7e3      	b.n	80036d2 <_vfiprintf_r+0x1ea>
 800370a:	46c0      	nop			@ (mov r8, r8)
 800370c:	08003da8 	.word	0x08003da8
 8003710:	08003dae 	.word	0x08003dae
 8003714:	08003db2 	.word	0x08003db2
 8003718:	00000000 	.word	0x00000000
 800371c:	080034c3 	.word	0x080034c3

08003720 <_printf_common>:
 8003720:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8003722:	0016      	movs	r6, r2
 8003724:	9301      	str	r3, [sp, #4]
 8003726:	688a      	ldr	r2, [r1, #8]
 8003728:	690b      	ldr	r3, [r1, #16]
 800372a:	000c      	movs	r4, r1
 800372c:	9000      	str	r0, [sp, #0]
 800372e:	4293      	cmp	r3, r2
 8003730:	da00      	bge.n	8003734 <_printf_common+0x14>
 8003732:	0013      	movs	r3, r2
 8003734:	0022      	movs	r2, r4
 8003736:	6033      	str	r3, [r6, #0]
 8003738:	3243      	adds	r2, #67	@ 0x43
 800373a:	7812      	ldrb	r2, [r2, #0]
 800373c:	2a00      	cmp	r2, #0
 800373e:	d001      	beq.n	8003744 <_printf_common+0x24>
 8003740:	3301      	adds	r3, #1
 8003742:	6033      	str	r3, [r6, #0]
 8003744:	6823      	ldr	r3, [r4, #0]
 8003746:	069b      	lsls	r3, r3, #26
 8003748:	d502      	bpl.n	8003750 <_printf_common+0x30>
 800374a:	6833      	ldr	r3, [r6, #0]
 800374c:	3302      	adds	r3, #2
 800374e:	6033      	str	r3, [r6, #0]
 8003750:	6822      	ldr	r2, [r4, #0]
 8003752:	2306      	movs	r3, #6
 8003754:	0015      	movs	r5, r2
 8003756:	401d      	ands	r5, r3
 8003758:	421a      	tst	r2, r3
 800375a:	d027      	beq.n	80037ac <_printf_common+0x8c>
 800375c:	0023      	movs	r3, r4
 800375e:	3343      	adds	r3, #67	@ 0x43
 8003760:	781b      	ldrb	r3, [r3, #0]
 8003762:	1e5a      	subs	r2, r3, #1
 8003764:	4193      	sbcs	r3, r2
 8003766:	6822      	ldr	r2, [r4, #0]
 8003768:	0692      	lsls	r2, r2, #26
 800376a:	d430      	bmi.n	80037ce <_printf_common+0xae>
 800376c:	0022      	movs	r2, r4
 800376e:	9901      	ldr	r1, [sp, #4]
 8003770:	9800      	ldr	r0, [sp, #0]
 8003772:	9d08      	ldr	r5, [sp, #32]
 8003774:	3243      	adds	r2, #67	@ 0x43
 8003776:	47a8      	blx	r5
 8003778:	3001      	adds	r0, #1
 800377a:	d025      	beq.n	80037c8 <_printf_common+0xa8>
 800377c:	2206      	movs	r2, #6
 800377e:	6823      	ldr	r3, [r4, #0]
 8003780:	2500      	movs	r5, #0
 8003782:	4013      	ands	r3, r2
 8003784:	2b04      	cmp	r3, #4
 8003786:	d105      	bne.n	8003794 <_printf_common+0x74>
 8003788:	6833      	ldr	r3, [r6, #0]
 800378a:	68e5      	ldr	r5, [r4, #12]
 800378c:	1aed      	subs	r5, r5, r3
 800378e:	43eb      	mvns	r3, r5
 8003790:	17db      	asrs	r3, r3, #31
 8003792:	401d      	ands	r5, r3
 8003794:	68a3      	ldr	r3, [r4, #8]
 8003796:	6922      	ldr	r2, [r4, #16]
 8003798:	4293      	cmp	r3, r2
 800379a:	dd01      	ble.n	80037a0 <_printf_common+0x80>
 800379c:	1a9b      	subs	r3, r3, r2
 800379e:	18ed      	adds	r5, r5, r3
 80037a0:	2600      	movs	r6, #0
 80037a2:	42b5      	cmp	r5, r6
 80037a4:	d120      	bne.n	80037e8 <_printf_common+0xc8>
 80037a6:	2000      	movs	r0, #0
 80037a8:	e010      	b.n	80037cc <_printf_common+0xac>
 80037aa:	3501      	adds	r5, #1
 80037ac:	68e3      	ldr	r3, [r4, #12]
 80037ae:	6832      	ldr	r2, [r6, #0]
 80037b0:	1a9b      	subs	r3, r3, r2
 80037b2:	42ab      	cmp	r3, r5
 80037b4:	ddd2      	ble.n	800375c <_printf_common+0x3c>
 80037b6:	0022      	movs	r2, r4
 80037b8:	2301      	movs	r3, #1
 80037ba:	9901      	ldr	r1, [sp, #4]
 80037bc:	9800      	ldr	r0, [sp, #0]
 80037be:	9f08      	ldr	r7, [sp, #32]
 80037c0:	3219      	adds	r2, #25
 80037c2:	47b8      	blx	r7
 80037c4:	3001      	adds	r0, #1
 80037c6:	d1f0      	bne.n	80037aa <_printf_common+0x8a>
 80037c8:	2001      	movs	r0, #1
 80037ca:	4240      	negs	r0, r0
 80037cc:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80037ce:	2030      	movs	r0, #48	@ 0x30
 80037d0:	18e1      	adds	r1, r4, r3
 80037d2:	3143      	adds	r1, #67	@ 0x43
 80037d4:	7008      	strb	r0, [r1, #0]
 80037d6:	0021      	movs	r1, r4
 80037d8:	1c5a      	adds	r2, r3, #1
 80037da:	3145      	adds	r1, #69	@ 0x45
 80037dc:	7809      	ldrb	r1, [r1, #0]
 80037de:	18a2      	adds	r2, r4, r2
 80037e0:	3243      	adds	r2, #67	@ 0x43
 80037e2:	3302      	adds	r3, #2
 80037e4:	7011      	strb	r1, [r2, #0]
 80037e6:	e7c1      	b.n	800376c <_printf_common+0x4c>
 80037e8:	0022      	movs	r2, r4
 80037ea:	2301      	movs	r3, #1
 80037ec:	9901      	ldr	r1, [sp, #4]
 80037ee:	9800      	ldr	r0, [sp, #0]
 80037f0:	9f08      	ldr	r7, [sp, #32]
 80037f2:	321a      	adds	r2, #26
 80037f4:	47b8      	blx	r7
 80037f6:	3001      	adds	r0, #1
 80037f8:	d0e6      	beq.n	80037c8 <_printf_common+0xa8>
 80037fa:	3601      	adds	r6, #1
 80037fc:	e7d1      	b.n	80037a2 <_printf_common+0x82>
	...

08003800 <_printf_i>:
 8003800:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003802:	b08b      	sub	sp, #44	@ 0x2c
 8003804:	9206      	str	r2, [sp, #24]
 8003806:	000a      	movs	r2, r1
 8003808:	3243      	adds	r2, #67	@ 0x43
 800380a:	9307      	str	r3, [sp, #28]
 800380c:	9005      	str	r0, [sp, #20]
 800380e:	9203      	str	r2, [sp, #12]
 8003810:	7e0a      	ldrb	r2, [r1, #24]
 8003812:	000c      	movs	r4, r1
 8003814:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8003816:	2a78      	cmp	r2, #120	@ 0x78
 8003818:	d809      	bhi.n	800382e <_printf_i+0x2e>
 800381a:	2a62      	cmp	r2, #98	@ 0x62
 800381c:	d80b      	bhi.n	8003836 <_printf_i+0x36>
 800381e:	2a00      	cmp	r2, #0
 8003820:	d100      	bne.n	8003824 <_printf_i+0x24>
 8003822:	e0ba      	b.n	800399a <_printf_i+0x19a>
 8003824:	497a      	ldr	r1, [pc, #488]	@ (8003a10 <_printf_i+0x210>)
 8003826:	9104      	str	r1, [sp, #16]
 8003828:	2a58      	cmp	r2, #88	@ 0x58
 800382a:	d100      	bne.n	800382e <_printf_i+0x2e>
 800382c:	e08e      	b.n	800394c <_printf_i+0x14c>
 800382e:	0025      	movs	r5, r4
 8003830:	3542      	adds	r5, #66	@ 0x42
 8003832:	702a      	strb	r2, [r5, #0]
 8003834:	e022      	b.n	800387c <_printf_i+0x7c>
 8003836:	0010      	movs	r0, r2
 8003838:	3863      	subs	r0, #99	@ 0x63
 800383a:	2815      	cmp	r0, #21
 800383c:	d8f7      	bhi.n	800382e <_printf_i+0x2e>
 800383e:	f7fc fc63 	bl	8000108 <__gnu_thumb1_case_shi>
 8003842:	0016      	.short	0x0016
 8003844:	fff6001f 	.word	0xfff6001f
 8003848:	fff6fff6 	.word	0xfff6fff6
 800384c:	001ffff6 	.word	0x001ffff6
 8003850:	fff6fff6 	.word	0xfff6fff6
 8003854:	fff6fff6 	.word	0xfff6fff6
 8003858:	0036009f 	.word	0x0036009f
 800385c:	fff6007e 	.word	0xfff6007e
 8003860:	00b0fff6 	.word	0x00b0fff6
 8003864:	0036fff6 	.word	0x0036fff6
 8003868:	fff6fff6 	.word	0xfff6fff6
 800386c:	0082      	.short	0x0082
 800386e:	0025      	movs	r5, r4
 8003870:	681a      	ldr	r2, [r3, #0]
 8003872:	3542      	adds	r5, #66	@ 0x42
 8003874:	1d11      	adds	r1, r2, #4
 8003876:	6019      	str	r1, [r3, #0]
 8003878:	6813      	ldr	r3, [r2, #0]
 800387a:	702b      	strb	r3, [r5, #0]
 800387c:	2301      	movs	r3, #1
 800387e:	e09e      	b.n	80039be <_printf_i+0x1be>
 8003880:	6818      	ldr	r0, [r3, #0]
 8003882:	6809      	ldr	r1, [r1, #0]
 8003884:	1d02      	adds	r2, r0, #4
 8003886:	060d      	lsls	r5, r1, #24
 8003888:	d50b      	bpl.n	80038a2 <_printf_i+0xa2>
 800388a:	6806      	ldr	r6, [r0, #0]
 800388c:	601a      	str	r2, [r3, #0]
 800388e:	2e00      	cmp	r6, #0
 8003890:	da03      	bge.n	800389a <_printf_i+0x9a>
 8003892:	232d      	movs	r3, #45	@ 0x2d
 8003894:	9a03      	ldr	r2, [sp, #12]
 8003896:	4276      	negs	r6, r6
 8003898:	7013      	strb	r3, [r2, #0]
 800389a:	4b5d      	ldr	r3, [pc, #372]	@ (8003a10 <_printf_i+0x210>)
 800389c:	270a      	movs	r7, #10
 800389e:	9304      	str	r3, [sp, #16]
 80038a0:	e018      	b.n	80038d4 <_printf_i+0xd4>
 80038a2:	6806      	ldr	r6, [r0, #0]
 80038a4:	601a      	str	r2, [r3, #0]
 80038a6:	0649      	lsls	r1, r1, #25
 80038a8:	d5f1      	bpl.n	800388e <_printf_i+0x8e>
 80038aa:	b236      	sxth	r6, r6
 80038ac:	e7ef      	b.n	800388e <_printf_i+0x8e>
 80038ae:	6808      	ldr	r0, [r1, #0]
 80038b0:	6819      	ldr	r1, [r3, #0]
 80038b2:	c940      	ldmia	r1!, {r6}
 80038b4:	0605      	lsls	r5, r0, #24
 80038b6:	d402      	bmi.n	80038be <_printf_i+0xbe>
 80038b8:	0640      	lsls	r0, r0, #25
 80038ba:	d500      	bpl.n	80038be <_printf_i+0xbe>
 80038bc:	b2b6      	uxth	r6, r6
 80038be:	6019      	str	r1, [r3, #0]
 80038c0:	4b53      	ldr	r3, [pc, #332]	@ (8003a10 <_printf_i+0x210>)
 80038c2:	270a      	movs	r7, #10
 80038c4:	9304      	str	r3, [sp, #16]
 80038c6:	2a6f      	cmp	r2, #111	@ 0x6f
 80038c8:	d100      	bne.n	80038cc <_printf_i+0xcc>
 80038ca:	3f02      	subs	r7, #2
 80038cc:	0023      	movs	r3, r4
 80038ce:	2200      	movs	r2, #0
 80038d0:	3343      	adds	r3, #67	@ 0x43
 80038d2:	701a      	strb	r2, [r3, #0]
 80038d4:	6863      	ldr	r3, [r4, #4]
 80038d6:	60a3      	str	r3, [r4, #8]
 80038d8:	2b00      	cmp	r3, #0
 80038da:	db06      	blt.n	80038ea <_printf_i+0xea>
 80038dc:	2104      	movs	r1, #4
 80038de:	6822      	ldr	r2, [r4, #0]
 80038e0:	9d03      	ldr	r5, [sp, #12]
 80038e2:	438a      	bics	r2, r1
 80038e4:	6022      	str	r2, [r4, #0]
 80038e6:	4333      	orrs	r3, r6
 80038e8:	d00c      	beq.n	8003904 <_printf_i+0x104>
 80038ea:	9d03      	ldr	r5, [sp, #12]
 80038ec:	0030      	movs	r0, r6
 80038ee:	0039      	movs	r1, r7
 80038f0:	f7fc fc9a 	bl	8000228 <__aeabi_uidivmod>
 80038f4:	9b04      	ldr	r3, [sp, #16]
 80038f6:	3d01      	subs	r5, #1
 80038f8:	5c5b      	ldrb	r3, [r3, r1]
 80038fa:	702b      	strb	r3, [r5, #0]
 80038fc:	0033      	movs	r3, r6
 80038fe:	0006      	movs	r6, r0
 8003900:	429f      	cmp	r7, r3
 8003902:	d9f3      	bls.n	80038ec <_printf_i+0xec>
 8003904:	2f08      	cmp	r7, #8
 8003906:	d109      	bne.n	800391c <_printf_i+0x11c>
 8003908:	6823      	ldr	r3, [r4, #0]
 800390a:	07db      	lsls	r3, r3, #31
 800390c:	d506      	bpl.n	800391c <_printf_i+0x11c>
 800390e:	6862      	ldr	r2, [r4, #4]
 8003910:	6923      	ldr	r3, [r4, #16]
 8003912:	429a      	cmp	r2, r3
 8003914:	dc02      	bgt.n	800391c <_printf_i+0x11c>
 8003916:	2330      	movs	r3, #48	@ 0x30
 8003918:	3d01      	subs	r5, #1
 800391a:	702b      	strb	r3, [r5, #0]
 800391c:	9b03      	ldr	r3, [sp, #12]
 800391e:	1b5b      	subs	r3, r3, r5
 8003920:	6123      	str	r3, [r4, #16]
 8003922:	9b07      	ldr	r3, [sp, #28]
 8003924:	0021      	movs	r1, r4
 8003926:	9300      	str	r3, [sp, #0]
 8003928:	9805      	ldr	r0, [sp, #20]
 800392a:	9b06      	ldr	r3, [sp, #24]
 800392c:	aa09      	add	r2, sp, #36	@ 0x24
 800392e:	f7ff fef7 	bl	8003720 <_printf_common>
 8003932:	3001      	adds	r0, #1
 8003934:	d148      	bne.n	80039c8 <_printf_i+0x1c8>
 8003936:	2001      	movs	r0, #1
 8003938:	4240      	negs	r0, r0
 800393a:	b00b      	add	sp, #44	@ 0x2c
 800393c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800393e:	2220      	movs	r2, #32
 8003940:	6809      	ldr	r1, [r1, #0]
 8003942:	430a      	orrs	r2, r1
 8003944:	6022      	str	r2, [r4, #0]
 8003946:	2278      	movs	r2, #120	@ 0x78
 8003948:	4932      	ldr	r1, [pc, #200]	@ (8003a14 <_printf_i+0x214>)
 800394a:	9104      	str	r1, [sp, #16]
 800394c:	0021      	movs	r1, r4
 800394e:	3145      	adds	r1, #69	@ 0x45
 8003950:	700a      	strb	r2, [r1, #0]
 8003952:	6819      	ldr	r1, [r3, #0]
 8003954:	6822      	ldr	r2, [r4, #0]
 8003956:	c940      	ldmia	r1!, {r6}
 8003958:	0610      	lsls	r0, r2, #24
 800395a:	d402      	bmi.n	8003962 <_printf_i+0x162>
 800395c:	0650      	lsls	r0, r2, #25
 800395e:	d500      	bpl.n	8003962 <_printf_i+0x162>
 8003960:	b2b6      	uxth	r6, r6
 8003962:	6019      	str	r1, [r3, #0]
 8003964:	07d3      	lsls	r3, r2, #31
 8003966:	d502      	bpl.n	800396e <_printf_i+0x16e>
 8003968:	2320      	movs	r3, #32
 800396a:	4313      	orrs	r3, r2
 800396c:	6023      	str	r3, [r4, #0]
 800396e:	2e00      	cmp	r6, #0
 8003970:	d001      	beq.n	8003976 <_printf_i+0x176>
 8003972:	2710      	movs	r7, #16
 8003974:	e7aa      	b.n	80038cc <_printf_i+0xcc>
 8003976:	2220      	movs	r2, #32
 8003978:	6823      	ldr	r3, [r4, #0]
 800397a:	4393      	bics	r3, r2
 800397c:	6023      	str	r3, [r4, #0]
 800397e:	e7f8      	b.n	8003972 <_printf_i+0x172>
 8003980:	681a      	ldr	r2, [r3, #0]
 8003982:	680d      	ldr	r5, [r1, #0]
 8003984:	1d10      	adds	r0, r2, #4
 8003986:	6949      	ldr	r1, [r1, #20]
 8003988:	6018      	str	r0, [r3, #0]
 800398a:	6813      	ldr	r3, [r2, #0]
 800398c:	062e      	lsls	r6, r5, #24
 800398e:	d501      	bpl.n	8003994 <_printf_i+0x194>
 8003990:	6019      	str	r1, [r3, #0]
 8003992:	e002      	b.n	800399a <_printf_i+0x19a>
 8003994:	066d      	lsls	r5, r5, #25
 8003996:	d5fb      	bpl.n	8003990 <_printf_i+0x190>
 8003998:	8019      	strh	r1, [r3, #0]
 800399a:	2300      	movs	r3, #0
 800399c:	9d03      	ldr	r5, [sp, #12]
 800399e:	6123      	str	r3, [r4, #16]
 80039a0:	e7bf      	b.n	8003922 <_printf_i+0x122>
 80039a2:	681a      	ldr	r2, [r3, #0]
 80039a4:	1d11      	adds	r1, r2, #4
 80039a6:	6019      	str	r1, [r3, #0]
 80039a8:	6815      	ldr	r5, [r2, #0]
 80039aa:	2100      	movs	r1, #0
 80039ac:	0028      	movs	r0, r5
 80039ae:	6862      	ldr	r2, [r4, #4]
 80039b0:	f000 f986 	bl	8003cc0 <memchr>
 80039b4:	2800      	cmp	r0, #0
 80039b6:	d001      	beq.n	80039bc <_printf_i+0x1bc>
 80039b8:	1b40      	subs	r0, r0, r5
 80039ba:	6060      	str	r0, [r4, #4]
 80039bc:	6863      	ldr	r3, [r4, #4]
 80039be:	6123      	str	r3, [r4, #16]
 80039c0:	2300      	movs	r3, #0
 80039c2:	9a03      	ldr	r2, [sp, #12]
 80039c4:	7013      	strb	r3, [r2, #0]
 80039c6:	e7ac      	b.n	8003922 <_printf_i+0x122>
 80039c8:	002a      	movs	r2, r5
 80039ca:	6923      	ldr	r3, [r4, #16]
 80039cc:	9906      	ldr	r1, [sp, #24]
 80039ce:	9805      	ldr	r0, [sp, #20]
 80039d0:	9d07      	ldr	r5, [sp, #28]
 80039d2:	47a8      	blx	r5
 80039d4:	3001      	adds	r0, #1
 80039d6:	d0ae      	beq.n	8003936 <_printf_i+0x136>
 80039d8:	6823      	ldr	r3, [r4, #0]
 80039da:	079b      	lsls	r3, r3, #30
 80039dc:	d415      	bmi.n	8003a0a <_printf_i+0x20a>
 80039de:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80039e0:	68e0      	ldr	r0, [r4, #12]
 80039e2:	4298      	cmp	r0, r3
 80039e4:	daa9      	bge.n	800393a <_printf_i+0x13a>
 80039e6:	0018      	movs	r0, r3
 80039e8:	e7a7      	b.n	800393a <_printf_i+0x13a>
 80039ea:	0022      	movs	r2, r4
 80039ec:	2301      	movs	r3, #1
 80039ee:	9906      	ldr	r1, [sp, #24]
 80039f0:	9805      	ldr	r0, [sp, #20]
 80039f2:	9e07      	ldr	r6, [sp, #28]
 80039f4:	3219      	adds	r2, #25
 80039f6:	47b0      	blx	r6
 80039f8:	3001      	adds	r0, #1
 80039fa:	d09c      	beq.n	8003936 <_printf_i+0x136>
 80039fc:	3501      	adds	r5, #1
 80039fe:	68e3      	ldr	r3, [r4, #12]
 8003a00:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8003a02:	1a9b      	subs	r3, r3, r2
 8003a04:	42ab      	cmp	r3, r5
 8003a06:	dcf0      	bgt.n	80039ea <_printf_i+0x1ea>
 8003a08:	e7e9      	b.n	80039de <_printf_i+0x1de>
 8003a0a:	2500      	movs	r5, #0
 8003a0c:	e7f7      	b.n	80039fe <_printf_i+0x1fe>
 8003a0e:	46c0      	nop			@ (mov r8, r8)
 8003a10:	08003db9 	.word	0x08003db9
 8003a14:	08003dca 	.word	0x08003dca

08003a18 <__sflush_r>:
 8003a18:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8003a1a:	220c      	movs	r2, #12
 8003a1c:	5e8b      	ldrsh	r3, [r1, r2]
 8003a1e:	0005      	movs	r5, r0
 8003a20:	000c      	movs	r4, r1
 8003a22:	071a      	lsls	r2, r3, #28
 8003a24:	d456      	bmi.n	8003ad4 <__sflush_r+0xbc>
 8003a26:	684a      	ldr	r2, [r1, #4]
 8003a28:	2a00      	cmp	r2, #0
 8003a2a:	dc02      	bgt.n	8003a32 <__sflush_r+0x1a>
 8003a2c:	6c0a      	ldr	r2, [r1, #64]	@ 0x40
 8003a2e:	2a00      	cmp	r2, #0
 8003a30:	dd4e      	ble.n	8003ad0 <__sflush_r+0xb8>
 8003a32:	6ae7      	ldr	r7, [r4, #44]	@ 0x2c
 8003a34:	2f00      	cmp	r7, #0
 8003a36:	d04b      	beq.n	8003ad0 <__sflush_r+0xb8>
 8003a38:	2200      	movs	r2, #0
 8003a3a:	2080      	movs	r0, #128	@ 0x80
 8003a3c:	682e      	ldr	r6, [r5, #0]
 8003a3e:	602a      	str	r2, [r5, #0]
 8003a40:	001a      	movs	r2, r3
 8003a42:	0140      	lsls	r0, r0, #5
 8003a44:	6a21      	ldr	r1, [r4, #32]
 8003a46:	4002      	ands	r2, r0
 8003a48:	4203      	tst	r3, r0
 8003a4a:	d033      	beq.n	8003ab4 <__sflush_r+0x9c>
 8003a4c:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8003a4e:	89a3      	ldrh	r3, [r4, #12]
 8003a50:	075b      	lsls	r3, r3, #29
 8003a52:	d506      	bpl.n	8003a62 <__sflush_r+0x4a>
 8003a54:	6863      	ldr	r3, [r4, #4]
 8003a56:	1ad2      	subs	r2, r2, r3
 8003a58:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8003a5a:	2b00      	cmp	r3, #0
 8003a5c:	d001      	beq.n	8003a62 <__sflush_r+0x4a>
 8003a5e:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8003a60:	1ad2      	subs	r2, r2, r3
 8003a62:	2300      	movs	r3, #0
 8003a64:	0028      	movs	r0, r5
 8003a66:	6ae7      	ldr	r7, [r4, #44]	@ 0x2c
 8003a68:	6a21      	ldr	r1, [r4, #32]
 8003a6a:	47b8      	blx	r7
 8003a6c:	89a2      	ldrh	r2, [r4, #12]
 8003a6e:	1c43      	adds	r3, r0, #1
 8003a70:	d106      	bne.n	8003a80 <__sflush_r+0x68>
 8003a72:	6829      	ldr	r1, [r5, #0]
 8003a74:	291d      	cmp	r1, #29
 8003a76:	d846      	bhi.n	8003b06 <__sflush_r+0xee>
 8003a78:	4b29      	ldr	r3, [pc, #164]	@ (8003b20 <__sflush_r+0x108>)
 8003a7a:	40cb      	lsrs	r3, r1
 8003a7c:	07db      	lsls	r3, r3, #31
 8003a7e:	d542      	bpl.n	8003b06 <__sflush_r+0xee>
 8003a80:	2300      	movs	r3, #0
 8003a82:	6063      	str	r3, [r4, #4]
 8003a84:	6923      	ldr	r3, [r4, #16]
 8003a86:	6023      	str	r3, [r4, #0]
 8003a88:	04d2      	lsls	r2, r2, #19
 8003a8a:	d505      	bpl.n	8003a98 <__sflush_r+0x80>
 8003a8c:	1c43      	adds	r3, r0, #1
 8003a8e:	d102      	bne.n	8003a96 <__sflush_r+0x7e>
 8003a90:	682b      	ldr	r3, [r5, #0]
 8003a92:	2b00      	cmp	r3, #0
 8003a94:	d100      	bne.n	8003a98 <__sflush_r+0x80>
 8003a96:	6560      	str	r0, [r4, #84]	@ 0x54
 8003a98:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8003a9a:	602e      	str	r6, [r5, #0]
 8003a9c:	2900      	cmp	r1, #0
 8003a9e:	d017      	beq.n	8003ad0 <__sflush_r+0xb8>
 8003aa0:	0023      	movs	r3, r4
 8003aa2:	3344      	adds	r3, #68	@ 0x44
 8003aa4:	4299      	cmp	r1, r3
 8003aa6:	d002      	beq.n	8003aae <__sflush_r+0x96>
 8003aa8:	0028      	movs	r0, r5
 8003aaa:	f7ff fbf9 	bl	80032a0 <_free_r>
 8003aae:	2300      	movs	r3, #0
 8003ab0:	6363      	str	r3, [r4, #52]	@ 0x34
 8003ab2:	e00d      	b.n	8003ad0 <__sflush_r+0xb8>
 8003ab4:	2301      	movs	r3, #1
 8003ab6:	0028      	movs	r0, r5
 8003ab8:	47b8      	blx	r7
 8003aba:	0002      	movs	r2, r0
 8003abc:	1c43      	adds	r3, r0, #1
 8003abe:	d1c6      	bne.n	8003a4e <__sflush_r+0x36>
 8003ac0:	682b      	ldr	r3, [r5, #0]
 8003ac2:	2b00      	cmp	r3, #0
 8003ac4:	d0c3      	beq.n	8003a4e <__sflush_r+0x36>
 8003ac6:	2b1d      	cmp	r3, #29
 8003ac8:	d001      	beq.n	8003ace <__sflush_r+0xb6>
 8003aca:	2b16      	cmp	r3, #22
 8003acc:	d11a      	bne.n	8003b04 <__sflush_r+0xec>
 8003ace:	602e      	str	r6, [r5, #0]
 8003ad0:	2000      	movs	r0, #0
 8003ad2:	e01e      	b.n	8003b12 <__sflush_r+0xfa>
 8003ad4:	690e      	ldr	r6, [r1, #16]
 8003ad6:	2e00      	cmp	r6, #0
 8003ad8:	d0fa      	beq.n	8003ad0 <__sflush_r+0xb8>
 8003ada:	680f      	ldr	r7, [r1, #0]
 8003adc:	600e      	str	r6, [r1, #0]
 8003ade:	1bba      	subs	r2, r7, r6
 8003ae0:	9201      	str	r2, [sp, #4]
 8003ae2:	2200      	movs	r2, #0
 8003ae4:	079b      	lsls	r3, r3, #30
 8003ae6:	d100      	bne.n	8003aea <__sflush_r+0xd2>
 8003ae8:	694a      	ldr	r2, [r1, #20]
 8003aea:	60a2      	str	r2, [r4, #8]
 8003aec:	9b01      	ldr	r3, [sp, #4]
 8003aee:	2b00      	cmp	r3, #0
 8003af0:	ddee      	ble.n	8003ad0 <__sflush_r+0xb8>
 8003af2:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 8003af4:	0032      	movs	r2, r6
 8003af6:	001f      	movs	r7, r3
 8003af8:	0028      	movs	r0, r5
 8003afa:	9b01      	ldr	r3, [sp, #4]
 8003afc:	6a21      	ldr	r1, [r4, #32]
 8003afe:	47b8      	blx	r7
 8003b00:	2800      	cmp	r0, #0
 8003b02:	dc07      	bgt.n	8003b14 <__sflush_r+0xfc>
 8003b04:	89a2      	ldrh	r2, [r4, #12]
 8003b06:	2340      	movs	r3, #64	@ 0x40
 8003b08:	2001      	movs	r0, #1
 8003b0a:	4313      	orrs	r3, r2
 8003b0c:	b21b      	sxth	r3, r3
 8003b0e:	81a3      	strh	r3, [r4, #12]
 8003b10:	4240      	negs	r0, r0
 8003b12:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8003b14:	9b01      	ldr	r3, [sp, #4]
 8003b16:	1836      	adds	r6, r6, r0
 8003b18:	1a1b      	subs	r3, r3, r0
 8003b1a:	9301      	str	r3, [sp, #4]
 8003b1c:	e7e6      	b.n	8003aec <__sflush_r+0xd4>
 8003b1e:	46c0      	nop			@ (mov r8, r8)
 8003b20:	20400001 	.word	0x20400001

08003b24 <_fflush_r>:
 8003b24:	690b      	ldr	r3, [r1, #16]
 8003b26:	b570      	push	{r4, r5, r6, lr}
 8003b28:	0005      	movs	r5, r0
 8003b2a:	000c      	movs	r4, r1
 8003b2c:	2b00      	cmp	r3, #0
 8003b2e:	d102      	bne.n	8003b36 <_fflush_r+0x12>
 8003b30:	2500      	movs	r5, #0
 8003b32:	0028      	movs	r0, r5
 8003b34:	bd70      	pop	{r4, r5, r6, pc}
 8003b36:	2800      	cmp	r0, #0
 8003b38:	d004      	beq.n	8003b44 <_fflush_r+0x20>
 8003b3a:	6a03      	ldr	r3, [r0, #32]
 8003b3c:	2b00      	cmp	r3, #0
 8003b3e:	d101      	bne.n	8003b44 <_fflush_r+0x20>
 8003b40:	f7ff f992 	bl	8002e68 <__sinit>
 8003b44:	220c      	movs	r2, #12
 8003b46:	5ea3      	ldrsh	r3, [r4, r2]
 8003b48:	2b00      	cmp	r3, #0
 8003b4a:	d0f1      	beq.n	8003b30 <_fflush_r+0xc>
 8003b4c:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8003b4e:	07d2      	lsls	r2, r2, #31
 8003b50:	d404      	bmi.n	8003b5c <_fflush_r+0x38>
 8003b52:	059b      	lsls	r3, r3, #22
 8003b54:	d402      	bmi.n	8003b5c <_fflush_r+0x38>
 8003b56:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8003b58:	f7ff fb97 	bl	800328a <__retarget_lock_acquire_recursive>
 8003b5c:	0028      	movs	r0, r5
 8003b5e:	0021      	movs	r1, r4
 8003b60:	f7ff ff5a 	bl	8003a18 <__sflush_r>
 8003b64:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8003b66:	0005      	movs	r5, r0
 8003b68:	07db      	lsls	r3, r3, #31
 8003b6a:	d4e2      	bmi.n	8003b32 <_fflush_r+0xe>
 8003b6c:	89a3      	ldrh	r3, [r4, #12]
 8003b6e:	059b      	lsls	r3, r3, #22
 8003b70:	d4df      	bmi.n	8003b32 <_fflush_r+0xe>
 8003b72:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8003b74:	f7ff fb8a 	bl	800328c <__retarget_lock_release_recursive>
 8003b78:	e7db      	b.n	8003b32 <_fflush_r+0xe>
	...

08003b7c <__swhatbuf_r>:
 8003b7c:	b570      	push	{r4, r5, r6, lr}
 8003b7e:	000e      	movs	r6, r1
 8003b80:	001d      	movs	r5, r3
 8003b82:	230e      	movs	r3, #14
 8003b84:	5ec9      	ldrsh	r1, [r1, r3]
 8003b86:	0014      	movs	r4, r2
 8003b88:	b096      	sub	sp, #88	@ 0x58
 8003b8a:	2900      	cmp	r1, #0
 8003b8c:	da0c      	bge.n	8003ba8 <__swhatbuf_r+0x2c>
 8003b8e:	89b2      	ldrh	r2, [r6, #12]
 8003b90:	2380      	movs	r3, #128	@ 0x80
 8003b92:	0011      	movs	r1, r2
 8003b94:	4019      	ands	r1, r3
 8003b96:	421a      	tst	r2, r3
 8003b98:	d114      	bne.n	8003bc4 <__swhatbuf_r+0x48>
 8003b9a:	2380      	movs	r3, #128	@ 0x80
 8003b9c:	00db      	lsls	r3, r3, #3
 8003b9e:	2000      	movs	r0, #0
 8003ba0:	6029      	str	r1, [r5, #0]
 8003ba2:	6023      	str	r3, [r4, #0]
 8003ba4:	b016      	add	sp, #88	@ 0x58
 8003ba6:	bd70      	pop	{r4, r5, r6, pc}
 8003ba8:	466a      	mov	r2, sp
 8003baa:	f000 f853 	bl	8003c54 <_fstat_r>
 8003bae:	2800      	cmp	r0, #0
 8003bb0:	dbed      	blt.n	8003b8e <__swhatbuf_r+0x12>
 8003bb2:	23f0      	movs	r3, #240	@ 0xf0
 8003bb4:	9901      	ldr	r1, [sp, #4]
 8003bb6:	021b      	lsls	r3, r3, #8
 8003bb8:	4019      	ands	r1, r3
 8003bba:	4b04      	ldr	r3, [pc, #16]	@ (8003bcc <__swhatbuf_r+0x50>)
 8003bbc:	18c9      	adds	r1, r1, r3
 8003bbe:	424b      	negs	r3, r1
 8003bc0:	4159      	adcs	r1, r3
 8003bc2:	e7ea      	b.n	8003b9a <__swhatbuf_r+0x1e>
 8003bc4:	2100      	movs	r1, #0
 8003bc6:	2340      	movs	r3, #64	@ 0x40
 8003bc8:	e7e9      	b.n	8003b9e <__swhatbuf_r+0x22>
 8003bca:	46c0      	nop			@ (mov r8, r8)
 8003bcc:	ffffe000 	.word	0xffffe000

08003bd0 <__smakebuf_r>:
 8003bd0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003bd2:	2602      	movs	r6, #2
 8003bd4:	898b      	ldrh	r3, [r1, #12]
 8003bd6:	0005      	movs	r5, r0
 8003bd8:	000c      	movs	r4, r1
 8003bda:	b085      	sub	sp, #20
 8003bdc:	4233      	tst	r3, r6
 8003bde:	d007      	beq.n	8003bf0 <__smakebuf_r+0x20>
 8003be0:	0023      	movs	r3, r4
 8003be2:	3347      	adds	r3, #71	@ 0x47
 8003be4:	6023      	str	r3, [r4, #0]
 8003be6:	6123      	str	r3, [r4, #16]
 8003be8:	2301      	movs	r3, #1
 8003bea:	6163      	str	r3, [r4, #20]
 8003bec:	b005      	add	sp, #20
 8003bee:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003bf0:	ab03      	add	r3, sp, #12
 8003bf2:	aa02      	add	r2, sp, #8
 8003bf4:	f7ff ffc2 	bl	8003b7c <__swhatbuf_r>
 8003bf8:	9f02      	ldr	r7, [sp, #8]
 8003bfa:	9001      	str	r0, [sp, #4]
 8003bfc:	0039      	movs	r1, r7
 8003bfe:	0028      	movs	r0, r5
 8003c00:	f7ff fbba 	bl	8003378 <_malloc_r>
 8003c04:	2800      	cmp	r0, #0
 8003c06:	d108      	bne.n	8003c1a <__smakebuf_r+0x4a>
 8003c08:	220c      	movs	r2, #12
 8003c0a:	5ea3      	ldrsh	r3, [r4, r2]
 8003c0c:	059a      	lsls	r2, r3, #22
 8003c0e:	d4ed      	bmi.n	8003bec <__smakebuf_r+0x1c>
 8003c10:	2203      	movs	r2, #3
 8003c12:	4393      	bics	r3, r2
 8003c14:	431e      	orrs	r6, r3
 8003c16:	81a6      	strh	r6, [r4, #12]
 8003c18:	e7e2      	b.n	8003be0 <__smakebuf_r+0x10>
 8003c1a:	2380      	movs	r3, #128	@ 0x80
 8003c1c:	89a2      	ldrh	r2, [r4, #12]
 8003c1e:	6020      	str	r0, [r4, #0]
 8003c20:	4313      	orrs	r3, r2
 8003c22:	81a3      	strh	r3, [r4, #12]
 8003c24:	9b03      	ldr	r3, [sp, #12]
 8003c26:	6120      	str	r0, [r4, #16]
 8003c28:	6167      	str	r7, [r4, #20]
 8003c2a:	2b00      	cmp	r3, #0
 8003c2c:	d00c      	beq.n	8003c48 <__smakebuf_r+0x78>
 8003c2e:	0028      	movs	r0, r5
 8003c30:	230e      	movs	r3, #14
 8003c32:	5ee1      	ldrsh	r1, [r4, r3]
 8003c34:	f000 f820 	bl	8003c78 <_isatty_r>
 8003c38:	2800      	cmp	r0, #0
 8003c3a:	d005      	beq.n	8003c48 <__smakebuf_r+0x78>
 8003c3c:	2303      	movs	r3, #3
 8003c3e:	89a2      	ldrh	r2, [r4, #12]
 8003c40:	439a      	bics	r2, r3
 8003c42:	3b02      	subs	r3, #2
 8003c44:	4313      	orrs	r3, r2
 8003c46:	81a3      	strh	r3, [r4, #12]
 8003c48:	89a3      	ldrh	r3, [r4, #12]
 8003c4a:	9a01      	ldr	r2, [sp, #4]
 8003c4c:	4313      	orrs	r3, r2
 8003c4e:	81a3      	strh	r3, [r4, #12]
 8003c50:	e7cc      	b.n	8003bec <__smakebuf_r+0x1c>
	...

08003c54 <_fstat_r>:
 8003c54:	2300      	movs	r3, #0
 8003c56:	b570      	push	{r4, r5, r6, lr}
 8003c58:	4d06      	ldr	r5, [pc, #24]	@ (8003c74 <_fstat_r+0x20>)
 8003c5a:	0004      	movs	r4, r0
 8003c5c:	0008      	movs	r0, r1
 8003c5e:	0011      	movs	r1, r2
 8003c60:	602b      	str	r3, [r5, #0]
 8003c62:	f7fc feb0 	bl	80009c6 <_fstat>
 8003c66:	1c43      	adds	r3, r0, #1
 8003c68:	d103      	bne.n	8003c72 <_fstat_r+0x1e>
 8003c6a:	682b      	ldr	r3, [r5, #0]
 8003c6c:	2b00      	cmp	r3, #0
 8003c6e:	d000      	beq.n	8003c72 <_fstat_r+0x1e>
 8003c70:	6023      	str	r3, [r4, #0]
 8003c72:	bd70      	pop	{r4, r5, r6, pc}
 8003c74:	20000368 	.word	0x20000368

08003c78 <_isatty_r>:
 8003c78:	2300      	movs	r3, #0
 8003c7a:	b570      	push	{r4, r5, r6, lr}
 8003c7c:	4d06      	ldr	r5, [pc, #24]	@ (8003c98 <_isatty_r+0x20>)
 8003c7e:	0004      	movs	r4, r0
 8003c80:	0008      	movs	r0, r1
 8003c82:	602b      	str	r3, [r5, #0]
 8003c84:	f7fc fead 	bl	80009e2 <_isatty>
 8003c88:	1c43      	adds	r3, r0, #1
 8003c8a:	d103      	bne.n	8003c94 <_isatty_r+0x1c>
 8003c8c:	682b      	ldr	r3, [r5, #0]
 8003c8e:	2b00      	cmp	r3, #0
 8003c90:	d000      	beq.n	8003c94 <_isatty_r+0x1c>
 8003c92:	6023      	str	r3, [r4, #0]
 8003c94:	bd70      	pop	{r4, r5, r6, pc}
 8003c96:	46c0      	nop			@ (mov r8, r8)
 8003c98:	20000368 	.word	0x20000368

08003c9c <_sbrk_r>:
 8003c9c:	2300      	movs	r3, #0
 8003c9e:	b570      	push	{r4, r5, r6, lr}
 8003ca0:	4d06      	ldr	r5, [pc, #24]	@ (8003cbc <_sbrk_r+0x20>)
 8003ca2:	0004      	movs	r4, r0
 8003ca4:	0008      	movs	r0, r1
 8003ca6:	602b      	str	r3, [r5, #0]
 8003ca8:	f7fc feb0 	bl	8000a0c <_sbrk>
 8003cac:	1c43      	adds	r3, r0, #1
 8003cae:	d103      	bne.n	8003cb8 <_sbrk_r+0x1c>
 8003cb0:	682b      	ldr	r3, [r5, #0]
 8003cb2:	2b00      	cmp	r3, #0
 8003cb4:	d000      	beq.n	8003cb8 <_sbrk_r+0x1c>
 8003cb6:	6023      	str	r3, [r4, #0]
 8003cb8:	bd70      	pop	{r4, r5, r6, pc}
 8003cba:	46c0      	nop			@ (mov r8, r8)
 8003cbc:	20000368 	.word	0x20000368

08003cc0 <memchr>:
 8003cc0:	b2c9      	uxtb	r1, r1
 8003cc2:	1882      	adds	r2, r0, r2
 8003cc4:	4290      	cmp	r0, r2
 8003cc6:	d101      	bne.n	8003ccc <memchr+0xc>
 8003cc8:	2000      	movs	r0, #0
 8003cca:	4770      	bx	lr
 8003ccc:	7803      	ldrb	r3, [r0, #0]
 8003cce:	428b      	cmp	r3, r1
 8003cd0:	d0fb      	beq.n	8003cca <memchr+0xa>
 8003cd2:	3001      	adds	r0, #1
 8003cd4:	e7f6      	b.n	8003cc4 <memchr+0x4>
	...

08003cd8 <_init>:
 8003cd8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003cda:	46c0      	nop			@ (mov r8, r8)
 8003cdc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003cde:	bc08      	pop	{r3}
 8003ce0:	469e      	mov	lr, r3
 8003ce2:	4770      	bx	lr

08003ce4 <_fini>:
 8003ce4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003ce6:	46c0      	nop			@ (mov r8, r8)
 8003ce8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003cea:	bc08      	pop	{r3}
 8003cec:	469e      	mov	lr, r3
 8003cee:	4770      	bx	lr
