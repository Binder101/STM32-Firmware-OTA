
TestPySerial.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003fd4  080000c0  080000c0  000010c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000104  08004094  08004094  00005094  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004198  08004198  00006070  2**0
                  CONTENTS, READONLY
  4 .ARM          00000000  08004198  08004198  00006070  2**0
                  CONTENTS, READONLY
  5 .preinit_array 00000000  08004198  08004198  00006070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004198  08004198  00005198  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800419c  0800419c  0000519c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000070  20000000  080041a0  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000003d0  20000070  08004210  00006070  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000440  08004210  00006440  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00006070  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000a00b  00000000  00000000  00006098  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000019b1  00000000  00000000  000100a3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000820  00000000  00000000  00011a58  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000063e  00000000  00000000  00012278  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000159d9  00000000  00000000  000128b6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000a66e  00000000  00000000  0002828f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00083952  00000000  00000000  000328fd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000b624f  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000023b8  00000000  00000000  000b6294  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000070  00000000  00000000  000b864c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	@ (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	@ (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	@ (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000070 	.word	0x20000070
 80000e0:	00000000 	.word	0x00000000
 80000e4:	0800407c 	.word	0x0800407c

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	@ (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	@ (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	@ (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			@ (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000074 	.word	0x20000074
 8000104:	0800407c 	.word	0x0800407c

08000108 <strlen>:
 8000108:	2300      	movs	r3, #0
 800010a:	5cc2      	ldrb	r2, [r0, r3]
 800010c:	3301      	adds	r3, #1
 800010e:	2a00      	cmp	r2, #0
 8000110:	d1fb      	bne.n	800010a <strlen+0x2>
 8000112:	1e58      	subs	r0, r3, #1
 8000114:	4770      	bx	lr
	...

08000118 <__gnu_thumb1_case_shi>:
 8000118:	b403      	push	{r0, r1}
 800011a:	4671      	mov	r1, lr
 800011c:	0849      	lsrs	r1, r1, #1
 800011e:	0040      	lsls	r0, r0, #1
 8000120:	0049      	lsls	r1, r1, #1
 8000122:	5e09      	ldrsh	r1, [r1, r0]
 8000124:	0049      	lsls	r1, r1, #1
 8000126:	448e      	add	lr, r1
 8000128:	bc03      	pop	{r0, r1}
 800012a:	4770      	bx	lr

0800012c <__udivsi3>:
 800012c:	2200      	movs	r2, #0
 800012e:	0843      	lsrs	r3, r0, #1
 8000130:	428b      	cmp	r3, r1
 8000132:	d374      	bcc.n	800021e <__udivsi3+0xf2>
 8000134:	0903      	lsrs	r3, r0, #4
 8000136:	428b      	cmp	r3, r1
 8000138:	d35f      	bcc.n	80001fa <__udivsi3+0xce>
 800013a:	0a03      	lsrs	r3, r0, #8
 800013c:	428b      	cmp	r3, r1
 800013e:	d344      	bcc.n	80001ca <__udivsi3+0x9e>
 8000140:	0b03      	lsrs	r3, r0, #12
 8000142:	428b      	cmp	r3, r1
 8000144:	d328      	bcc.n	8000198 <__udivsi3+0x6c>
 8000146:	0c03      	lsrs	r3, r0, #16
 8000148:	428b      	cmp	r3, r1
 800014a:	d30d      	bcc.n	8000168 <__udivsi3+0x3c>
 800014c:	22ff      	movs	r2, #255	@ 0xff
 800014e:	0209      	lsls	r1, r1, #8
 8000150:	ba12      	rev	r2, r2
 8000152:	0c03      	lsrs	r3, r0, #16
 8000154:	428b      	cmp	r3, r1
 8000156:	d302      	bcc.n	800015e <__udivsi3+0x32>
 8000158:	1212      	asrs	r2, r2, #8
 800015a:	0209      	lsls	r1, r1, #8
 800015c:	d065      	beq.n	800022a <__udivsi3+0xfe>
 800015e:	0b03      	lsrs	r3, r0, #12
 8000160:	428b      	cmp	r3, r1
 8000162:	d319      	bcc.n	8000198 <__udivsi3+0x6c>
 8000164:	e000      	b.n	8000168 <__udivsi3+0x3c>
 8000166:	0a09      	lsrs	r1, r1, #8
 8000168:	0bc3      	lsrs	r3, r0, #15
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x46>
 800016e:	03cb      	lsls	r3, r1, #15
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0b83      	lsrs	r3, r0, #14
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x52>
 800017a:	038b      	lsls	r3, r1, #14
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0b43      	lsrs	r3, r0, #13
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x5e>
 8000186:	034b      	lsls	r3, r1, #13
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0b03      	lsrs	r3, r0, #12
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x6a>
 8000192:	030b      	lsls	r3, r1, #12
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0ac3      	lsrs	r3, r0, #11
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x76>
 800019e:	02cb      	lsls	r3, r1, #11
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	0a83      	lsrs	r3, r0, #10
 80001a6:	428b      	cmp	r3, r1
 80001a8:	d301      	bcc.n	80001ae <__udivsi3+0x82>
 80001aa:	028b      	lsls	r3, r1, #10
 80001ac:	1ac0      	subs	r0, r0, r3
 80001ae:	4152      	adcs	r2, r2
 80001b0:	0a43      	lsrs	r3, r0, #9
 80001b2:	428b      	cmp	r3, r1
 80001b4:	d301      	bcc.n	80001ba <__udivsi3+0x8e>
 80001b6:	024b      	lsls	r3, r1, #9
 80001b8:	1ac0      	subs	r0, r0, r3
 80001ba:	4152      	adcs	r2, r2
 80001bc:	0a03      	lsrs	r3, r0, #8
 80001be:	428b      	cmp	r3, r1
 80001c0:	d301      	bcc.n	80001c6 <__udivsi3+0x9a>
 80001c2:	020b      	lsls	r3, r1, #8
 80001c4:	1ac0      	subs	r0, r0, r3
 80001c6:	4152      	adcs	r2, r2
 80001c8:	d2cd      	bcs.n	8000166 <__udivsi3+0x3a>
 80001ca:	09c3      	lsrs	r3, r0, #7
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xa8>
 80001d0:	01cb      	lsls	r3, r1, #7
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	0983      	lsrs	r3, r0, #6
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xb4>
 80001dc:	018b      	lsls	r3, r1, #6
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0943      	lsrs	r3, r0, #5
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xc0>
 80001e8:	014b      	lsls	r3, r1, #5
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0903      	lsrs	r3, r0, #4
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xcc>
 80001f4:	010b      	lsls	r3, r1, #4
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	08c3      	lsrs	r3, r0, #3
 80001fc:	428b      	cmp	r3, r1
 80001fe:	d301      	bcc.n	8000204 <__udivsi3+0xd8>
 8000200:	00cb      	lsls	r3, r1, #3
 8000202:	1ac0      	subs	r0, r0, r3
 8000204:	4152      	adcs	r2, r2
 8000206:	0883      	lsrs	r3, r0, #2
 8000208:	428b      	cmp	r3, r1
 800020a:	d301      	bcc.n	8000210 <__udivsi3+0xe4>
 800020c:	008b      	lsls	r3, r1, #2
 800020e:	1ac0      	subs	r0, r0, r3
 8000210:	4152      	adcs	r2, r2
 8000212:	0843      	lsrs	r3, r0, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d301      	bcc.n	800021c <__udivsi3+0xf0>
 8000218:	004b      	lsls	r3, r1, #1
 800021a:	1ac0      	subs	r0, r0, r3
 800021c:	4152      	adcs	r2, r2
 800021e:	1a41      	subs	r1, r0, r1
 8000220:	d200      	bcs.n	8000224 <__udivsi3+0xf8>
 8000222:	4601      	mov	r1, r0
 8000224:	4152      	adcs	r2, r2
 8000226:	4610      	mov	r0, r2
 8000228:	4770      	bx	lr
 800022a:	e7ff      	b.n	800022c <__udivsi3+0x100>
 800022c:	b501      	push	{r0, lr}
 800022e:	2000      	movs	r0, #0
 8000230:	f000 f806 	bl	8000240 <__aeabi_idiv0>
 8000234:	bd02      	pop	{r1, pc}
 8000236:	46c0      	nop			@ (mov r8, r8)

08000238 <__aeabi_uidivmod>:
 8000238:	2900      	cmp	r1, #0
 800023a:	d0f7      	beq.n	800022c <__udivsi3+0x100>
 800023c:	e776      	b.n	800012c <__udivsi3>
 800023e:	4770      	bx	lr

08000240 <__aeabi_idiv0>:
 8000240:	4770      	bx	lr
 8000242:	46c0      	nop			@ (mov r8, r8)

08000244 <UART_DMA_Init>:
UART_HandleTypeDef huart2;
DMA_HandleTypeDef hdma_usart2_rx;

/* USER CODE BEGIN PV */
void UART_DMA_Init(void)
{
 8000244:	b580      	push	{r7, lr}
 8000246:	af00      	add	r7, sp, #0
    // Start DMA reception in circular mode
    HAL_UART_Receive_DMA(&huart2, rxBuffer, RX_BUFFER_SIZE);
 8000248:	4904      	ldr	r1, [pc, #16]	@ (800025c <UART_DMA_Init+0x18>)
 800024a:	4b05      	ldr	r3, [pc, #20]	@ (8000260 <UART_DMA_Init+0x1c>)
 800024c:	2280      	movs	r2, #128	@ 0x80
 800024e:	0018      	movs	r0, r3
 8000250:	f002 f870 	bl	8002334 <HAL_UART_Receive_DMA>
}
 8000254:	46c0      	nop			@ (mov r8, r8)
 8000256:	46bd      	mov	sp, r7
 8000258:	bd80      	pop	{r7, pc}
 800025a:	46c0      	nop			@ (mov r8, r8)
 800025c:	2000008c 	.word	0x2000008c
 8000260:	200001fc 	.word	0x200001fc

08000264 <UartRx_Circular_Reset>:

void UartRx_Circular_Reset(void) {
 8000264:	b580      	push	{r7, lr}
 8000266:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000268:	b672      	cpsid	i
}
 800026a:	46c0      	nop			@ (mov r8, r8)
    __disable_irq();
    oldPos = 0;
 800026c:	4b0f      	ldr	r3, [pc, #60]	@ (80002ac <UartRx_Circular_Reset+0x48>)
 800026e:	2200      	movs	r2, #0
 8000270:	801a      	strh	r2, [r3, #0]
    newPos = RX_BUFFER_SIZE - __HAL_DMA_GET_COUNTER(huart2.hdmarx); // snapshot if needed
 8000272:	4b0f      	ldr	r3, [pc, #60]	@ (80002b0 <UartRx_Circular_Reset+0x4c>)
 8000274:	2280      	movs	r2, #128	@ 0x80
 8000276:	589b      	ldr	r3, [r3, r2]
 8000278:	681b      	ldr	r3, [r3, #0]
 800027a:	685b      	ldr	r3, [r3, #4]
 800027c:	b29b      	uxth	r3, r3
 800027e:	2280      	movs	r2, #128	@ 0x80
 8000280:	1ad3      	subs	r3, r2, r3
 8000282:	b29a      	uxth	r2, r3
 8000284:	4b0b      	ldr	r3, [pc, #44]	@ (80002b4 <UartRx_Circular_Reset+0x50>)
 8000286:	801a      	strh	r2, [r3, #0]
    dataReady = 0;
 8000288:	4b0b      	ldr	r3, [pc, #44]	@ (80002b8 <UartRx_Circular_Reset+0x54>)
 800028a:	2200      	movs	r2, #0
 800028c:	701a      	strb	r2, [r3, #0]
    dataLength = 0;
 800028e:	4b0b      	ldr	r3, [pc, #44]	@ (80002bc <UartRx_Circular_Reset+0x58>)
 8000290:	2200      	movs	r2, #0
 8000292:	801a      	strh	r2, [r3, #0]
    memset(rxBuffer, 0, RX_BUFFER_SIZE); // optional
 8000294:	4b0a      	ldr	r3, [pc, #40]	@ (80002c0 <UartRx_Circular_Reset+0x5c>)
 8000296:	2280      	movs	r2, #128	@ 0x80
 8000298:	2100      	movs	r1, #0
 800029a:	0018      	movs	r0, r3
 800029c:	f003 f946 	bl	800352c <memset>
  __ASM volatile ("cpsie i" : : : "memory");
 80002a0:	b662      	cpsie	i
}
 80002a2:	46c0      	nop			@ (mov r8, r8)
    __enable_irq();
}
 80002a4:	46c0      	nop			@ (mov r8, r8)
 80002a6:	46bd      	mov	sp, r7
 80002a8:	bd80      	pop	{r7, pc}
 80002aa:	46c0      	nop			@ (mov r8, r8)
 80002ac:	20000174 	.word	0x20000174
 80002b0:	200001fc 	.word	0x200001fc
 80002b4:	20000176 	.word	0x20000176
 80002b8:	20000178 	.word	0x20000178
 80002bc:	2000017a 	.word	0x2000017a
 80002c0:	2000008c 	.word	0x2000008c

080002c4 <crc32_update>:



static uint32_t crc32_update(uint32_t crc, const uint8_t *p, size_t len) {
 80002c4:	b580      	push	{r7, lr}
 80002c6:	b086      	sub	sp, #24
 80002c8:	af00      	add	r7, sp, #0
 80002ca:	60f8      	str	r0, [r7, #12]
 80002cc:	60b9      	str	r1, [r7, #8]
 80002ce:	607a      	str	r2, [r7, #4]
    while (len--) {
 80002d0:	e01c      	b.n	800030c <crc32_update+0x48>
        crc ^= *p++;
 80002d2:	68bb      	ldr	r3, [r7, #8]
 80002d4:	1c5a      	adds	r2, r3, #1
 80002d6:	60ba      	str	r2, [r7, #8]
 80002d8:	781b      	ldrb	r3, [r3, #0]
 80002da:	001a      	movs	r2, r3
 80002dc:	68fb      	ldr	r3, [r7, #12]
 80002de:	4053      	eors	r3, r2
 80002e0:	60fb      	str	r3, [r7, #12]
        for (int i = 0; i < 8; ++i) {
 80002e2:	2300      	movs	r3, #0
 80002e4:	617b      	str	r3, [r7, #20]
 80002e6:	e00e      	b.n	8000306 <crc32_update+0x42>
            uint32_t mask = -(crc & 1u);
 80002e8:	68fb      	ldr	r3, [r7, #12]
 80002ea:	2201      	movs	r2, #1
 80002ec:	4013      	ands	r3, r2
 80002ee:	425b      	negs	r3, r3
 80002f0:	613b      	str	r3, [r7, #16]
            crc = (crc >> 1) ^ (0xEDB88320u & mask);
 80002f2:	68fb      	ldr	r3, [r7, #12]
 80002f4:	085a      	lsrs	r2, r3, #1
 80002f6:	693b      	ldr	r3, [r7, #16]
 80002f8:	4909      	ldr	r1, [pc, #36]	@ (8000320 <crc32_update+0x5c>)
 80002fa:	400b      	ands	r3, r1
 80002fc:	4053      	eors	r3, r2
 80002fe:	60fb      	str	r3, [r7, #12]
        for (int i = 0; i < 8; ++i) {
 8000300:	697b      	ldr	r3, [r7, #20]
 8000302:	3301      	adds	r3, #1
 8000304:	617b      	str	r3, [r7, #20]
 8000306:	697b      	ldr	r3, [r7, #20]
 8000308:	2b07      	cmp	r3, #7
 800030a:	dded      	ble.n	80002e8 <crc32_update+0x24>
    while (len--) {
 800030c:	687b      	ldr	r3, [r7, #4]
 800030e:	1e5a      	subs	r2, r3, #1
 8000310:	607a      	str	r2, [r7, #4]
 8000312:	2b00      	cmp	r3, #0
 8000314:	d1dd      	bne.n	80002d2 <crc32_update+0xe>
        }
    }
    return crc;
 8000316:	68fb      	ldr	r3, [r7, #12]
}
 8000318:	0018      	movs	r0, r3
 800031a:	46bd      	mov	sp, r7
 800031c:	b006      	add	sp, #24
 800031e:	bd80      	pop	{r7, pc}
 8000320:	edb88320 	.word	0xedb88320

08000324 <verify_crc32_payload_crc>:

bool verify_crc32_payload_crc(const uint8_t *packet, size_t packet_len) {
 8000324:	b580      	push	{r7, lr}
 8000326:	b086      	sub	sp, #24
 8000328:	af00      	add	r7, sp, #0
 800032a:	6078      	str	r0, [r7, #4]
 800032c:	6039      	str	r1, [r7, #0]
    if (packet_len < 4) return false; // not enough for CRC
 800032e:	683b      	ldr	r3, [r7, #0]
 8000330:	2b03      	cmp	r3, #3
 8000332:	d801      	bhi.n	8000338 <verify_crc32_payload_crc+0x14>
 8000334:	2300      	movs	r3, #0
 8000336:	e032      	b.n	800039e <verify_crc32_payload_crc+0x7a>
    size_t payload_len = packet_len - 4;
 8000338:	683b      	ldr	r3, [r7, #0]
 800033a:	3b04      	subs	r3, #4
 800033c:	617b      	str	r3, [r7, #20]
    uint32_t crc = 0xFFFFFFFFu;
 800033e:	2301      	movs	r3, #1
 8000340:	425b      	negs	r3, r3
 8000342:	613b      	str	r3, [r7, #16]
    crc = crc32_update(crc, packet, payload_len);
 8000344:	697a      	ldr	r2, [r7, #20]
 8000346:	6879      	ldr	r1, [r7, #4]
 8000348:	693b      	ldr	r3, [r7, #16]
 800034a:	0018      	movs	r0, r3
 800034c:	f7ff ffba 	bl	80002c4 <crc32_update>
 8000350:	0003      	movs	r3, r0
 8000352:	613b      	str	r3, [r7, #16]
    crc ^= 0xFFFFFFFFu;
 8000354:	693b      	ldr	r3, [r7, #16]
 8000356:	43db      	mvns	r3, r3
 8000358:	613b      	str	r3, [r7, #16]

    uint32_t rx = (uint32_t)packet[payload_len]
 800035a:	687a      	ldr	r2, [r7, #4]
 800035c:	697b      	ldr	r3, [r7, #20]
 800035e:	18d3      	adds	r3, r2, r3
 8000360:	781b      	ldrb	r3, [r3, #0]
 8000362:	0019      	movs	r1, r3
                | ((uint32_t)packet[payload_len+1] << 8)
 8000364:	697b      	ldr	r3, [r7, #20]
 8000366:	3301      	adds	r3, #1
 8000368:	687a      	ldr	r2, [r7, #4]
 800036a:	18d3      	adds	r3, r2, r3
 800036c:	781b      	ldrb	r3, [r3, #0]
 800036e:	021b      	lsls	r3, r3, #8
 8000370:	000a      	movs	r2, r1
 8000372:	431a      	orrs	r2, r3
                | ((uint32_t)packet[payload_len+2] << 16)
 8000374:	697b      	ldr	r3, [r7, #20]
 8000376:	3302      	adds	r3, #2
 8000378:	6879      	ldr	r1, [r7, #4]
 800037a:	18cb      	adds	r3, r1, r3
 800037c:	781b      	ldrb	r3, [r3, #0]
 800037e:	041b      	lsls	r3, r3, #16
 8000380:	431a      	orrs	r2, r3
                | ((uint32_t)packet[payload_len+3] << 24);
 8000382:	697b      	ldr	r3, [r7, #20]
 8000384:	3303      	adds	r3, #3
 8000386:	6879      	ldr	r1, [r7, #4]
 8000388:	18cb      	adds	r3, r1, r3
 800038a:	781b      	ldrb	r3, [r3, #0]
 800038c:	061b      	lsls	r3, r3, #24
    uint32_t rx = (uint32_t)packet[payload_len]
 800038e:	4313      	orrs	r3, r2
 8000390:	60fb      	str	r3, [r7, #12]

    return crc == rx;
 8000392:	693a      	ldr	r2, [r7, #16]
 8000394:	68fb      	ldr	r3, [r7, #12]
 8000396:	1ad3      	subs	r3, r2, r3
 8000398:	425a      	negs	r2, r3
 800039a:	4153      	adcs	r3, r2
 800039c:	b2db      	uxtb	r3, r3
}
 800039e:	0018      	movs	r0, r3
 80003a0:	46bd      	mov	sp, r7
 80003a2:	b006      	add	sp, #24
 80003a4:	bd80      	pop	{r7, pc}
	...

080003a8 <appendByte>:

void appendByte(uint8_t value){
 80003a8:	b580      	push	{r7, lr}
 80003aa:	b084      	sub	sp, #16
 80003ac:	af00      	add	r7, sp, #0
 80003ae:	0002      	movs	r2, r0
 80003b0:	1dfb      	adds	r3, r7, #7
 80003b2:	701a      	strb	r2, [r3, #0]
	if(responseLength < RESPONSE_LENGTH){
 80003b4:	4b10      	ldr	r3, [pc, #64]	@ (80003f8 <appendByte+0x50>)
 80003b6:	681b      	ldr	r3, [r3, #0]
 80003b8:	2b07      	cmp	r3, #7
 80003ba:	dc0b      	bgt.n	80003d4 <appendByte+0x2c>
		response[responseLength] = value;
 80003bc:	4b0e      	ldr	r3, [pc, #56]	@ (80003f8 <appendByte+0x50>)
 80003be:	681b      	ldr	r3, [r3, #0]
 80003c0:	4a0e      	ldr	r2, [pc, #56]	@ (80003fc <appendByte+0x54>)
 80003c2:	1df9      	adds	r1, r7, #7
 80003c4:	7809      	ldrb	r1, [r1, #0]
 80003c6:	54d1      	strb	r1, [r2, r3]
		responseLength++;
 80003c8:	4b0b      	ldr	r3, [pc, #44]	@ (80003f8 <appendByte+0x50>)
 80003ca:	681b      	ldr	r3, [r3, #0]
 80003cc:	1c5a      	adds	r2, r3, #1
 80003ce:	4b0a      	ldr	r3, [pc, #40]	@ (80003f8 <appendByte+0x50>)
 80003d0:	601a      	str	r2, [r3, #0]
	}
	else{
		char *msg = "Response length full";
		HAL_UART_Transmit(&huart2, (uint8_t*)msg, strlen(msg), 100);
	}
}
 80003d2:	e00c      	b.n	80003ee <appendByte+0x46>
		char *msg = "Response length full";
 80003d4:	4b0a      	ldr	r3, [pc, #40]	@ (8000400 <appendByte+0x58>)
 80003d6:	60fb      	str	r3, [r7, #12]
		HAL_UART_Transmit(&huart2, (uint8_t*)msg, strlen(msg), 100);
 80003d8:	68fb      	ldr	r3, [r7, #12]
 80003da:	0018      	movs	r0, r3
 80003dc:	f7ff fe94 	bl	8000108 <strlen>
 80003e0:	0003      	movs	r3, r0
 80003e2:	b29a      	uxth	r2, r3
 80003e4:	68f9      	ldr	r1, [r7, #12]
 80003e6:	4807      	ldr	r0, [pc, #28]	@ (8000404 <appendByte+0x5c>)
 80003e8:	2364      	movs	r3, #100	@ 0x64
 80003ea:	f001 feff 	bl	80021ec <HAL_UART_Transmit>
}
 80003ee:	46c0      	nop			@ (mov r8, r8)
 80003f0:	46bd      	mov	sp, r7
 80003f2:	b004      	add	sp, #16
 80003f4:	bd80      	pop	{r7, pc}
 80003f6:	46c0      	nop			@ (mov r8, r8)
 80003f8:	20000170 	.word	0x20000170
 80003fc:	2000010c 	.word	0x2000010c
 8000400:	08004094 	.word	0x08004094
 8000404:	200001fc 	.word	0x200001fc

08000408 <processDataHeaders>:

void processDataHeaders(void){
 8000408:	b580      	push	{r7, lr}
 800040a:	af00      	add	r7, sp, #0
	if(processedData[0] == 0xAA && processedData[1] == 0x55){
 800040c:	4b09      	ldr	r3, [pc, #36]	@ (8000434 <processDataHeaders+0x2c>)
 800040e:	781b      	ldrb	r3, [r3, #0]
 8000410:	2baa      	cmp	r3, #170	@ 0xaa
 8000412:	d107      	bne.n	8000424 <processDataHeaders+0x1c>
 8000414:	4b07      	ldr	r3, [pc, #28]	@ (8000434 <processDataHeaders+0x2c>)
 8000416:	785b      	ldrb	r3, [r3, #1]
 8000418:	2b55      	cmp	r3, #85	@ 0x55
 800041a:	d103      	bne.n	8000424 <processDataHeaders+0x1c>
		// HAL_UART_Transmit(&huart2, &header_good_byte, 1, 100);
		appendByte(0x11);
 800041c:	2011      	movs	r0, #17
 800041e:	f7ff ffc3 	bl	80003a8 <appendByte>
 8000422:	e003      	b.n	800042c <processDataHeaders+0x24>
	} else {
		// HAL_UART_Transmit(&huart2, &header_bad_byte, 1, 100);
		appendByte(0x01);
 8000424:	2001      	movs	r0, #1
 8000426:	f7ff ffbf 	bl	80003a8 <appendByte>
	}
}
 800042a:	46c0      	nop			@ (mov r8, r8)
 800042c:	46c0      	nop			@ (mov r8, r8)
 800042e:	46bd      	mov	sp, r7
 8000430:	bd80      	pop	{r7, pc}
 8000432:	46c0      	nop			@ (mov r8, r8)
 8000434:	2000017c 	.word	0x2000017c

08000438 <processDataSequence>:

void processDataSequence(void){
 8000438:	b580      	push	{r7, lr}
 800043a:	b084      	sub	sp, #16
 800043c:	af00      	add	r7, sp, #0
	unsigned int tens = processedData[2];
 800043e:	4b18      	ldr	r3, [pc, #96]	@ (80004a0 <processDataSequence+0x68>)
 8000440:	789b      	ldrb	r3, [r3, #2]
 8000442:	60bb      	str	r3, [r7, #8]
	unsigned int ones = processedData[3];
 8000444:	4b16      	ldr	r3, [pc, #88]	@ (80004a0 <processDataSequence+0x68>)
 8000446:	78db      	ldrb	r3, [r3, #3]
 8000448:	607b      	str	r3, [r7, #4]
	int sequenceNo = 0;
 800044a:	2300      	movs	r3, #0
 800044c:	60fb      	str	r3, [r7, #12]
	if(ones == 0){
 800044e:	687b      	ldr	r3, [r7, #4]
 8000450:	2b00      	cmp	r3, #0
 8000452:	d102      	bne.n	800045a <processDataSequence+0x22>
		sequenceNo = tens;
 8000454:	68bb      	ldr	r3, [r7, #8]
 8000456:	60fb      	str	r3, [r7, #12]
 8000458:	e003      	b.n	8000462 <processDataSequence+0x2a>
	} else {
		sequenceNo = tens + ones;
 800045a:	68ba      	ldr	r2, [r7, #8]
 800045c:	687b      	ldr	r3, [r7, #4]
 800045e:	18d3      	adds	r3, r2, r3
 8000460:	60fb      	str	r3, [r7, #12]
	}
	sequence1 = tens;
 8000462:	68ba      	ldr	r2, [r7, #8]
 8000464:	4b0f      	ldr	r3, [pc, #60]	@ (80004a4 <processDataSequence+0x6c>)
 8000466:	601a      	str	r2, [r3, #0]
	sequence2 = ones;
 8000468:	687a      	ldr	r2, [r7, #4]
 800046a:	4b0f      	ldr	r3, [pc, #60]	@ (80004a8 <processDataSequence+0x70>)
 800046c:	601a      	str	r2, [r3, #0]

	sequence = sequenceNo;
 800046e:	4b0f      	ldr	r3, [pc, #60]	@ (80004ac <processDataSequence+0x74>)
 8000470:	68fa      	ldr	r2, [r7, #12]
 8000472:	601a      	str	r2, [r3, #0]
	if(sequence == nextSequence){
 8000474:	4b0d      	ldr	r3, [pc, #52]	@ (80004ac <processDataSequence+0x74>)
 8000476:	681a      	ldr	r2, [r3, #0]
 8000478:	4b0d      	ldr	r3, [pc, #52]	@ (80004b0 <processDataSequence+0x78>)
 800047a:	681b      	ldr	r3, [r3, #0]
 800047c:	429a      	cmp	r2, r3
 800047e:	d107      	bne.n	8000490 <processDataSequence+0x58>
		nextSequence = sequenceNo + 1;
 8000480:	68fb      	ldr	r3, [r7, #12]
 8000482:	1c5a      	adds	r2, r3, #1
 8000484:	4b0a      	ldr	r3, [pc, #40]	@ (80004b0 <processDataSequence+0x78>)
 8000486:	601a      	str	r2, [r3, #0]
		appendByte(0x11);
 8000488:	2011      	movs	r0, #17
 800048a:	f7ff ff8d 	bl	80003a8 <appendByte>
	}
	else {
		appendByte(0x01);
	}
	// HAL_UART_Transmit(&huart2, &sequenceNo, 1, 100);
}
 800048e:	e002      	b.n	8000496 <processDataSequence+0x5e>
		appendByte(0x01);
 8000490:	2001      	movs	r0, #1
 8000492:	f7ff ff89 	bl	80003a8 <appendByte>
}
 8000496:	46c0      	nop			@ (mov r8, r8)
 8000498:	46bd      	mov	sp, r7
 800049a:	b004      	add	sp, #16
 800049c:	bd80      	pop	{r7, pc}
 800049e:	46c0      	nop			@ (mov r8, r8)
 80004a0:	2000017c 	.word	0x2000017c
 80004a4:	20000164 	.word	0x20000164
 80004a8:	20000168 	.word	0x20000168
 80004ac:	20000160 	.word	0x20000160
 80004b0:	2000016c 	.word	0x2000016c

080004b4 <processDataFooters>:

void processDataFooters(void){
 80004b4:	b580      	push	{r7, lr}
 80004b6:	b082      	sub	sp, #8
 80004b8:	af00      	add	r7, sp, #0
	uint8_t footer_byte_1 = processedData[73];
 80004ba:	1dfb      	adds	r3, r7, #7
 80004bc:	4a0e      	ldr	r2, [pc, #56]	@ (80004f8 <processDataFooters+0x44>)
 80004be:	2149      	movs	r1, #73	@ 0x49
 80004c0:	5c52      	ldrb	r2, [r2, r1]
 80004c2:	701a      	strb	r2, [r3, #0]
	uint8_t footer_byte_2 = processedData[74];
 80004c4:	1dbb      	adds	r3, r7, #6
 80004c6:	4a0c      	ldr	r2, [pc, #48]	@ (80004f8 <processDataFooters+0x44>)
 80004c8:	214a      	movs	r1, #74	@ 0x4a
 80004ca:	5c52      	ldrb	r2, [r2, r1]
 80004cc:	701a      	strb	r2, [r3, #0]
	if(footer_byte_1 == 0x0D && footer_byte_2 == 0x0A){
 80004ce:	1dfb      	adds	r3, r7, #7
 80004d0:	781b      	ldrb	r3, [r3, #0]
 80004d2:	2b0d      	cmp	r3, #13
 80004d4:	d107      	bne.n	80004e6 <processDataFooters+0x32>
 80004d6:	1dbb      	adds	r3, r7, #6
 80004d8:	781b      	ldrb	r3, [r3, #0]
 80004da:	2b0a      	cmp	r3, #10
 80004dc:	d103      	bne.n	80004e6 <processDataFooters+0x32>
		appendByte(0x11);
 80004de:	2011      	movs	r0, #17
 80004e0:	f7ff ff62 	bl	80003a8 <appendByte>
 80004e4:	e003      	b.n	80004ee <processDataFooters+0x3a>
	} else {
		appendByte(0x01);
 80004e6:	2001      	movs	r0, #1
 80004e8:	f7ff ff5e 	bl	80003a8 <appendByte>
	}
}
 80004ec:	46c0      	nop			@ (mov r8, r8)
 80004ee:	46c0      	nop			@ (mov r8, r8)
 80004f0:	46bd      	mov	sp, r7
 80004f2:	b002      	add	sp, #8
 80004f4:	bd80      	pop	{r7, pc}
 80004f6:	46c0      	nop			@ (mov r8, r8)
 80004f8:	2000017c 	.word	0x2000017c

080004fc <processLastFlag>:

void processLastFlag(void) {
 80004fc:	b580      	push	{r7, lr}
 80004fe:	b084      	sub	sp, #16
 8000500:	af00      	add	r7, sp, #0
	uint8_t last_flag_byte = processedData[75];
 8000502:	200f      	movs	r0, #15
 8000504:	183b      	adds	r3, r7, r0
 8000506:	4a33      	ldr	r2, [pc, #204]	@ (80005d4 <processLastFlag+0xd8>)
 8000508:	214b      	movs	r1, #75	@ 0x4b
 800050a:	5c52      	ldrb	r2, [r2, r1]
 800050c:	701a      	strb	r2, [r3, #0]

	int initLen = 2;
 800050e:	2302      	movs	r3, #2
 8000510:	60bb      	str	r3, [r7, #8]
	int endLen = 3;
 8000512:	2303      	movs	r3, #3
 8000514:	607b      	str	r3, [r7, #4]
	// size_t n = sizeof(processedData)/sizeof(processedData[0]);

	if(last_flag_byte == 0x01){
 8000516:	183b      	adds	r3, r7, r0
 8000518:	781b      	ldrb	r3, [r3, #0]
 800051a:	2b01      	cmp	r3, #1
 800051c:	d126      	bne.n	800056c <processLastFlag+0x70>
		memcpy(payload, processedData + initLen, lengthData - endLen - initLen);
 800051e:	68ba      	ldr	r2, [r7, #8]
 8000520:	4b2c      	ldr	r3, [pc, #176]	@ (80005d4 <processLastFlag+0xd8>)
 8000522:	18d1      	adds	r1, r2, r3
 8000524:	4b2c      	ldr	r3, [pc, #176]	@ (80005d8 <processLastFlag+0xdc>)
 8000526:	681a      	ldr	r2, [r3, #0]
 8000528:	687b      	ldr	r3, [r7, #4]
 800052a:	1ad2      	subs	r2, r2, r3
 800052c:	68bb      	ldr	r3, [r7, #8]
 800052e:	1ad3      	subs	r3, r2, r3
 8000530:	001a      	movs	r2, r3
 8000532:	4b2a      	ldr	r3, [pc, #168]	@ (80005dc <processLastFlag+0xe0>)
 8000534:	0018      	movs	r0, r3
 8000536:	f003 f87c 	bl	8003632 <memcpy>
		appendByte(0x11);
 800053a:	2011      	movs	r0, #17
 800053c:	f7ff ff34 	bl	80003a8 <appendByte>
		if(verify_crc32_payload_crc(payload, lengthData-endLen-initLen)){
 8000540:	4b25      	ldr	r3, [pc, #148]	@ (80005d8 <processLastFlag+0xdc>)
 8000542:	681a      	ldr	r2, [r3, #0]
 8000544:	687b      	ldr	r3, [r7, #4]
 8000546:	1ad2      	subs	r2, r2, r3
 8000548:	68bb      	ldr	r3, [r7, #8]
 800054a:	1ad3      	subs	r3, r2, r3
 800054c:	001a      	movs	r2, r3
 800054e:	4b23      	ldr	r3, [pc, #140]	@ (80005dc <processLastFlag+0xe0>)
 8000550:	0011      	movs	r1, r2
 8000552:	0018      	movs	r0, r3
 8000554:	f7ff fee6 	bl	8000324 <verify_crc32_payload_crc>
 8000558:	1e03      	subs	r3, r0, #0
 800055a:	d003      	beq.n	8000564 <processLastFlag+0x68>
			appendByte(0x12);
 800055c:	2012      	movs	r0, #18
 800055e:	f7ff ff23 	bl	80003a8 <appendByte>

	} else {
		appendByte(0x01);

	}
}
 8000562:	e032      	b.n	80005ca <processLastFlag+0xce>
			appendByte(0x14); // Error in the crc-checksum
 8000564:	2014      	movs	r0, #20
 8000566:	f7ff ff1f 	bl	80003a8 <appendByte>
}
 800056a:	e02e      	b.n	80005ca <processLastFlag+0xce>
	} else if (last_flag_byte == 0x00) {
 800056c:	230f      	movs	r3, #15
 800056e:	18fb      	adds	r3, r7, r3
 8000570:	781b      	ldrb	r3, [r3, #0]
 8000572:	2b00      	cmp	r3, #0
 8000574:	d126      	bne.n	80005c4 <processLastFlag+0xc8>
		memcpy(payload, processedData + initLen, lengthData - endLen - initLen);
 8000576:	68ba      	ldr	r2, [r7, #8]
 8000578:	4b16      	ldr	r3, [pc, #88]	@ (80005d4 <processLastFlag+0xd8>)
 800057a:	18d1      	adds	r1, r2, r3
 800057c:	4b16      	ldr	r3, [pc, #88]	@ (80005d8 <processLastFlag+0xdc>)
 800057e:	681a      	ldr	r2, [r3, #0]
 8000580:	687b      	ldr	r3, [r7, #4]
 8000582:	1ad2      	subs	r2, r2, r3
 8000584:	68bb      	ldr	r3, [r7, #8]
 8000586:	1ad3      	subs	r3, r2, r3
 8000588:	001a      	movs	r2, r3
 800058a:	4b14      	ldr	r3, [pc, #80]	@ (80005dc <processLastFlag+0xe0>)
 800058c:	0018      	movs	r0, r3
 800058e:	f003 f850 	bl	8003632 <memcpy>
		appendByte(0x11);
 8000592:	2011      	movs	r0, #17
 8000594:	f7ff ff08 	bl	80003a8 <appendByte>
		if(verify_crc32_payload_crc(payload, lengthData-endLen-initLen)){
 8000598:	4b0f      	ldr	r3, [pc, #60]	@ (80005d8 <processLastFlag+0xdc>)
 800059a:	681a      	ldr	r2, [r3, #0]
 800059c:	687b      	ldr	r3, [r7, #4]
 800059e:	1ad2      	subs	r2, r2, r3
 80005a0:	68bb      	ldr	r3, [r7, #8]
 80005a2:	1ad3      	subs	r3, r2, r3
 80005a4:	001a      	movs	r2, r3
 80005a6:	4b0d      	ldr	r3, [pc, #52]	@ (80005dc <processLastFlag+0xe0>)
 80005a8:	0011      	movs	r1, r2
 80005aa:	0018      	movs	r0, r3
 80005ac:	f7ff feba 	bl	8000324 <verify_crc32_payload_crc>
 80005b0:	1e03      	subs	r3, r0, #0
 80005b2:	d003      	beq.n	80005bc <processLastFlag+0xc0>
			appendByte(0x13);
 80005b4:	2013      	movs	r0, #19
 80005b6:	f7ff fef7 	bl	80003a8 <appendByte>
}
 80005ba:	e006      	b.n	80005ca <processLastFlag+0xce>
			appendByte(0x14); // Error in the crc-checksum
 80005bc:	2014      	movs	r0, #20
 80005be:	f7ff fef3 	bl	80003a8 <appendByte>
}
 80005c2:	e002      	b.n	80005ca <processLastFlag+0xce>
		appendByte(0x01);
 80005c4:	2001      	movs	r0, #1
 80005c6:	f7ff feef 	bl	80003a8 <appendByte>
}
 80005ca:	46c0      	nop			@ (mov r8, r8)
 80005cc:	46bd      	mov	sp, r7
 80005ce:	b004      	add	sp, #16
 80005d0:	bd80      	pop	{r7, pc}
 80005d2:	46c0      	nop			@ (mov r8, r8)
 80005d4:	2000017c 	.word	0x2000017c
 80005d8:	2000015c 	.word	0x2000015c
 80005dc:	20000114 	.word	0x20000114

080005e0 <processDataChunkLength>:

void processDataChunkLength(void){
 80005e0:	b580      	push	{r7, lr}
 80005e2:	b082      	sub	sp, #8
 80005e4:	af00      	add	r7, sp, #0
	uint8_t chunkLength = processedData[4];
 80005e6:	1dfb      	adds	r3, r7, #7
 80005e8:	4a08      	ldr	r2, [pc, #32]	@ (800060c <processDataChunkLength+0x2c>)
 80005ea:	7912      	ldrb	r2, [r2, #4]
 80005ec:	701a      	strb	r2, [r3, #0]
	if(chunkLength == 0x40) {
 80005ee:	1dfb      	adds	r3, r7, #7
 80005f0:	781b      	ldrb	r3, [r3, #0]
 80005f2:	2b40      	cmp	r3, #64	@ 0x40
 80005f4:	d103      	bne.n	80005fe <processDataChunkLength+0x1e>
		appendByte(0x11);
 80005f6:	2011      	movs	r0, #17
 80005f8:	f7ff fed6 	bl	80003a8 <appendByte>
	} else {
		appendByte(0x01);
	}
}
 80005fc:	e002      	b.n	8000604 <processDataChunkLength+0x24>
		appendByte(0x01);
 80005fe:	2001      	movs	r0, #1
 8000600:	f7ff fed2 	bl	80003a8 <appendByte>
}
 8000604:	46c0      	nop			@ (mov r8, r8)
 8000606:	46bd      	mov	sp, r7
 8000608:	b002      	add	sp, #8
 800060a:	bd80      	pop	{r7, pc}
 800060c:	2000017c 	.word	0x2000017c

08000610 <ProcessReceivedData>:


uint8_t ProcessReceivedData(uint8_t* data, uint16_t length)
{
 8000610:	b580      	push	{r7, lr}
 8000612:	b082      	sub	sp, #8
 8000614:	af00      	add	r7, sp, #0
 8000616:	6078      	str	r0, [r7, #4]
 8000618:	000a      	movs	r2, r1
 800061a:	1cbb      	adds	r3, r7, #2
 800061c:	801a      	strh	r2, [r3, #0]
	lengthData = length;
 800061e:	1cbb      	adds	r3, r7, #2
 8000620:	881a      	ldrh	r2, [r3, #0]
 8000622:	4b1f      	ldr	r3, [pc, #124]	@ (80006a0 <ProcessReceivedData+0x90>)
 8000624:	601a      	str	r2, [r3, #0]
    if (length == 0 || length >= RX_BUFFER_SIZE) {
 8000626:	1cbb      	adds	r3, r7, #2
 8000628:	881b      	ldrh	r3, [r3, #0]
 800062a:	2b00      	cmp	r3, #0
 800062c:	d003      	beq.n	8000636 <ProcessReceivedData+0x26>
 800062e:	1cbb      	adds	r3, r7, #2
 8000630:	881b      	ldrh	r3, [r3, #0]
 8000632:	2b7f      	cmp	r3, #127	@ 0x7f
 8000634:	d903      	bls.n	800063e <ProcessReceivedData+0x2e>
    	UartRx_Circular_Reset();
 8000636:	f7ff fe15 	bl	8000264 <UartRx_Circular_Reset>
    	return 0;
 800063a:	2300      	movs	r3, #0
 800063c:	e02b      	b.n	8000696 <ProcessReceivedData+0x86>
    }
    else if (length == 76){
 800063e:	1cbb      	adds	r3, r7, #2
 8000640:	881b      	ldrh	r3, [r3, #0]
 8000642:	2b4c      	cmp	r3, #76	@ 0x4c
 8000644:	d114      	bne.n	8000670 <ProcessReceivedData+0x60>
		memcpy(processedData, data, length);
 8000646:	1cbb      	adds	r3, r7, #2
 8000648:	881a      	ldrh	r2, [r3, #0]
 800064a:	6879      	ldr	r1, [r7, #4]
 800064c:	4b15      	ldr	r3, [pc, #84]	@ (80006a4 <ProcessReceivedData+0x94>)
 800064e:	0018      	movs	r0, r3
 8000650:	f002 ffef 	bl	8003632 <memcpy>
		processDataHeaders();
 8000654:	f7ff fed8 	bl	8000408 <processDataHeaders>
		processDataSequence();
 8000658:	f7ff feee 	bl	8000438 <processDataSequence>
		processDataChunkLength();
 800065c:	f7ff ffc0 	bl	80005e0 <processDataChunkLength>
		processDataFooters();
 8000660:	f7ff ff28 	bl	80004b4 <processDataFooters>
		processLastFlag();
 8000664:	f7ff ff4a 	bl	80004fc <processLastFlag>
		UartRx_Circular_Reset();
 8000668:	f7ff fdfc 	bl	8000264 <UartRx_Circular_Reset>
		return 1;
 800066c:	2301      	movs	r3, #1
 800066e:	e012      	b.n	8000696 <ProcessReceivedData+0x86>
    }
    else if (length < 76){
 8000670:	1cbb      	adds	r3, r7, #2
 8000672:	881b      	ldrh	r3, [r3, #0]
 8000674:	2b4b      	cmp	r3, #75	@ 0x4b
 8000676:	d803      	bhi.n	8000680 <ProcessReceivedData+0x70>
    	UartRx_Circular_Reset();
 8000678:	f7ff fdf4 	bl	8000264 <UartRx_Circular_Reset>
    	return 2;
 800067c:	2302      	movs	r3, #2
 800067e:	e00a      	b.n	8000696 <ProcessReceivedData+0x86>
    }
    else if (length > 76){
 8000680:	1cbb      	adds	r3, r7, #2
 8000682:	881b      	ldrh	r3, [r3, #0]
 8000684:	2b4c      	cmp	r3, #76	@ 0x4c
 8000686:	d903      	bls.n	8000690 <ProcessReceivedData+0x80>
    	UartRx_Circular_Reset();
 8000688:	f7ff fdec 	bl	8000264 <UartRx_Circular_Reset>
    	return 3;
 800068c:	2303      	movs	r3, #3
 800068e:	e002      	b.n	8000696 <ProcessReceivedData+0x86>
    }
    else {
    	UartRx_Circular_Reset();
 8000690:	f7ff fde8 	bl	8000264 <UartRx_Circular_Reset>
    	return 4;
 8000694:	2304      	movs	r3, #4
    }
}
 8000696:	0018      	movs	r0, r3
 8000698:	46bd      	mov	sp, r7
 800069a:	b002      	add	sp, #8
 800069c:	bd80      	pop	{r7, pc}
 800069e:	46c0      	nop			@ (mov r8, r8)
 80006a0:	2000015c 	.word	0x2000015c
 80006a4:	2000017c 	.word	0x2000017c

080006a8 <SendAcknowledgment>:


void SendAcknowledgment(uint8_t isValid)
{
 80006a8:	b580      	push	{r7, lr}
 80006aa:	b082      	sub	sp, #8
 80006ac:	af00      	add	r7, sp, #0
 80006ae:	0002      	movs	r2, r0
 80006b0:	1dfb      	adds	r3, r7, #7
 80006b2:	701a      	strb	r2, [r3, #0]
    if (isValid == 0) {
 80006b4:	1dfb      	adds	r3, r7, #7
 80006b6:	781b      	ldrb	r3, [r3, #0]
 80006b8:	2b00      	cmp	r3, #0
 80006ba:	d106      	bne.n	80006ca <SendAcknowledgment+0x22>
        HAL_UART_Transmit(&huart2, &nackByte, 1, 100);
 80006bc:	491a      	ldr	r1, [pc, #104]	@ (8000728 <SendAcknowledgment+0x80>)
 80006be:	481b      	ldr	r0, [pc, #108]	@ (800072c <SendAcknowledgment+0x84>)
 80006c0:	2364      	movs	r3, #100	@ 0x64
 80006c2:	2201      	movs	r2, #1
 80006c4:	f001 fd92 	bl	80021ec <HAL_UART_Transmit>
    } else if (isValid == 3){
    	HAL_UART_Transmit(&huart2, &longPacketByte, 1, 100);
    } else if (isValid == 4){
    	HAL_UART_Transmit(&huart2, &errorByte2, 1, 100);
    }
}
 80006c8:	e02a      	b.n	8000720 <SendAcknowledgment+0x78>
    } else if (isValid == 1){
 80006ca:	1dfb      	adds	r3, r7, #7
 80006cc:	781b      	ldrb	r3, [r3, #0]
 80006ce:	2b01      	cmp	r3, #1
 80006d0:	d106      	bne.n	80006e0 <SendAcknowledgment+0x38>
        HAL_UART_Transmit(&huart2, &ackByte, 1, 100);
 80006d2:	4917      	ldr	r1, [pc, #92]	@ (8000730 <SendAcknowledgment+0x88>)
 80006d4:	4815      	ldr	r0, [pc, #84]	@ (800072c <SendAcknowledgment+0x84>)
 80006d6:	2364      	movs	r3, #100	@ 0x64
 80006d8:	2201      	movs	r2, #1
 80006da:	f001 fd87 	bl	80021ec <HAL_UART_Transmit>
}
 80006de:	e01f      	b.n	8000720 <SendAcknowledgment+0x78>
    } else if (isValid == 2){
 80006e0:	1dfb      	adds	r3, r7, #7
 80006e2:	781b      	ldrb	r3, [r3, #0]
 80006e4:	2b02      	cmp	r3, #2
 80006e6:	d106      	bne.n	80006f6 <SendAcknowledgment+0x4e>
    	HAL_UART_Transmit(&huart2, &shortPacketByte, 1, 100);
 80006e8:	4912      	ldr	r1, [pc, #72]	@ (8000734 <SendAcknowledgment+0x8c>)
 80006ea:	4810      	ldr	r0, [pc, #64]	@ (800072c <SendAcknowledgment+0x84>)
 80006ec:	2364      	movs	r3, #100	@ 0x64
 80006ee:	2201      	movs	r2, #1
 80006f0:	f001 fd7c 	bl	80021ec <HAL_UART_Transmit>
}
 80006f4:	e014      	b.n	8000720 <SendAcknowledgment+0x78>
    } else if (isValid == 3){
 80006f6:	1dfb      	adds	r3, r7, #7
 80006f8:	781b      	ldrb	r3, [r3, #0]
 80006fa:	2b03      	cmp	r3, #3
 80006fc:	d106      	bne.n	800070c <SendAcknowledgment+0x64>
    	HAL_UART_Transmit(&huart2, &longPacketByte, 1, 100);
 80006fe:	490e      	ldr	r1, [pc, #56]	@ (8000738 <SendAcknowledgment+0x90>)
 8000700:	480a      	ldr	r0, [pc, #40]	@ (800072c <SendAcknowledgment+0x84>)
 8000702:	2364      	movs	r3, #100	@ 0x64
 8000704:	2201      	movs	r2, #1
 8000706:	f001 fd71 	bl	80021ec <HAL_UART_Transmit>
}
 800070a:	e009      	b.n	8000720 <SendAcknowledgment+0x78>
    } else if (isValid == 4){
 800070c:	1dfb      	adds	r3, r7, #7
 800070e:	781b      	ldrb	r3, [r3, #0]
 8000710:	2b04      	cmp	r3, #4
 8000712:	d105      	bne.n	8000720 <SendAcknowledgment+0x78>
    	HAL_UART_Transmit(&huart2, &errorByte2, 1, 100);
 8000714:	4909      	ldr	r1, [pc, #36]	@ (800073c <SendAcknowledgment+0x94>)
 8000716:	4805      	ldr	r0, [pc, #20]	@ (800072c <SendAcknowledgment+0x84>)
 8000718:	2364      	movs	r3, #100	@ 0x64
 800071a:	2201      	movs	r2, #1
 800071c:	f001 fd66 	bl	80021ec <HAL_UART_Transmit>
}
 8000720:	46c0      	nop			@ (mov r8, r8)
 8000722:	46bd      	mov	sp, r7
 8000724:	b002      	add	sp, #8
 8000726:	bd80      	pop	{r7, pc}
 8000728:	20000001 	.word	0x20000001
 800072c:	200001fc 	.word	0x200001fc
 8000730:	20000000 	.word	0x20000000
 8000734:	20000003 	.word	0x20000003
 8000738:	20000004 	.word	0x20000004
 800073c:	20000002 	.word	0x20000002

08000740 <CheckForNewData>:


void CheckForNewData(void)
{
 8000740:	b590      	push	{r4, r7, lr}
 8000742:	b083      	sub	sp, #12
 8000744:	af00      	add	r7, sp, #0
    newPos = RX_BUFFER_SIZE - __HAL_DMA_GET_COUNTER(huart2.hdmarx);
 8000746:	4b49      	ldr	r3, [pc, #292]	@ (800086c <CheckForNewData+0x12c>)
 8000748:	2280      	movs	r2, #128	@ 0x80
 800074a:	589b      	ldr	r3, [r3, r2]
 800074c:	681b      	ldr	r3, [r3, #0]
 800074e:	685b      	ldr	r3, [r3, #4]
 8000750:	b29b      	uxth	r3, r3
 8000752:	2280      	movs	r2, #128	@ 0x80
 8000754:	1ad3      	subs	r3, r2, r3
 8000756:	b29a      	uxth	r2, r3
 8000758:	4b45      	ldr	r3, [pc, #276]	@ (8000870 <CheckForNewData+0x130>)
 800075a:	801a      	strh	r2, [r3, #0]

    if(newPos != oldPos)
 800075c:	4b44      	ldr	r3, [pc, #272]	@ (8000870 <CheckForNewData+0x130>)
 800075e:	881b      	ldrh	r3, [r3, #0]
 8000760:	b29a      	uxth	r2, r3
 8000762:	4b44      	ldr	r3, [pc, #272]	@ (8000874 <CheckForNewData+0x134>)
 8000764:	881b      	ldrh	r3, [r3, #0]
 8000766:	b29b      	uxth	r3, r3
 8000768:	429a      	cmp	r2, r3
 800076a:	d100      	bne.n	800076e <CheckForNewData+0x2e>
 800076c:	e07a      	b.n	8000864 <CheckForNewData+0x124>
    {
        if(newPos > oldPos)
 800076e:	4b40      	ldr	r3, [pc, #256]	@ (8000870 <CheckForNewData+0x130>)
 8000770:	881b      	ldrh	r3, [r3, #0]
 8000772:	b29a      	uxth	r2, r3
 8000774:	4b3f      	ldr	r3, [pc, #252]	@ (8000874 <CheckForNewData+0x134>)
 8000776:	881b      	ldrh	r3, [r3, #0]
 8000778:	b29b      	uxth	r3, r3
 800077a:	429a      	cmp	r2, r3
 800077c:	d928      	bls.n	80007d0 <CheckForNewData+0x90>
        {
            dataLength = newPos - oldPos;
 800077e:	4b3c      	ldr	r3, [pc, #240]	@ (8000870 <CheckForNewData+0x130>)
 8000780:	881b      	ldrh	r3, [r3, #0]
 8000782:	b29a      	uxth	r2, r3
 8000784:	4b3b      	ldr	r3, [pc, #236]	@ (8000874 <CheckForNewData+0x134>)
 8000786:	881b      	ldrh	r3, [r3, #0]
 8000788:	b29b      	uxth	r3, r3
 800078a:	1ad3      	subs	r3, r2, r3
 800078c:	b29a      	uxth	r2, r3
 800078e:	4b3a      	ldr	r3, [pc, #232]	@ (8000878 <CheckForNewData+0x138>)
 8000790:	801a      	strh	r2, [r3, #0]
            uint8_t isValid = ProcessReceivedData(&rxBuffer[oldPos], dataLength);
 8000792:	4b38      	ldr	r3, [pc, #224]	@ (8000874 <CheckForNewData+0x134>)
 8000794:	881b      	ldrh	r3, [r3, #0]
 8000796:	b29b      	uxth	r3, r3
 8000798:	001a      	movs	r2, r3
 800079a:	4b38      	ldr	r3, [pc, #224]	@ (800087c <CheckForNewData+0x13c>)
 800079c:	18d2      	adds	r2, r2, r3
 800079e:	4b36      	ldr	r3, [pc, #216]	@ (8000878 <CheckForNewData+0x138>)
 80007a0:	881b      	ldrh	r3, [r3, #0]
 80007a2:	b29b      	uxth	r3, r3
 80007a4:	1cbc      	adds	r4, r7, #2
 80007a6:	0019      	movs	r1, r3
 80007a8:	0010      	movs	r0, r2
 80007aa:	f7ff ff31 	bl	8000610 <ProcessReceivedData>
 80007ae:	0003      	movs	r3, r0
 80007b0:	7023      	strb	r3, [r4, #0]
            SendAcknowledgment(isValid);
 80007b2:	1cbb      	adds	r3, r7, #2
 80007b4:	781b      	ldrb	r3, [r3, #0]
 80007b6:	0018      	movs	r0, r3
 80007b8:	f7ff ff76 	bl	80006a8 <SendAcknowledgment>
            HAL_UART_Transmit(&huart2, response, sizeof(response)/sizeof(response[0]), 100);
 80007bc:	4930      	ldr	r1, [pc, #192]	@ (8000880 <CheckForNewData+0x140>)
 80007be:	482b      	ldr	r0, [pc, #172]	@ (800086c <CheckForNewData+0x12c>)
 80007c0:	2364      	movs	r3, #100	@ 0x64
 80007c2:	2208      	movs	r2, #8
 80007c4:	f001 fd12 	bl	80021ec <HAL_UART_Transmit>
            // HAL_UART_Transmit(&huart2, payload, 71, 100);
            responseLength = 0;
 80007c8:	4b2e      	ldr	r3, [pc, #184]	@ (8000884 <CheckForNewData+0x144>)
 80007ca:	2200      	movs	r2, #0
 80007cc:	601a      	str	r2, [r3, #0]
 80007ce:	e041      	b.n	8000854 <CheckForNewData+0x114>

        }
        else
        {
            uint16_t firstPart = RX_BUFFER_SIZE - oldPos;
 80007d0:	4b28      	ldr	r3, [pc, #160]	@ (8000874 <CheckForNewData+0x134>)
 80007d2:	881b      	ldrh	r3, [r3, #0]
 80007d4:	b29a      	uxth	r2, r3
 80007d6:	1dbb      	adds	r3, r7, #6
 80007d8:	2180      	movs	r1, #128	@ 0x80
 80007da:	1a8a      	subs	r2, r1, r2
 80007dc:	801a      	strh	r2, [r3, #0]
            uint16_t secondPart = newPos;
 80007de:	1d3b      	adds	r3, r7, #4
 80007e0:	4a23      	ldr	r2, [pc, #140]	@ (8000870 <CheckForNewData+0x130>)
 80007e2:	8812      	ldrh	r2, [r2, #0]
 80007e4:	801a      	strh	r2, [r3, #0]
            memcpy(processedData, &rxBuffer[oldPos], firstPart);
 80007e6:	4b23      	ldr	r3, [pc, #140]	@ (8000874 <CheckForNewData+0x134>)
 80007e8:	881b      	ldrh	r3, [r3, #0]
 80007ea:	b29b      	uxth	r3, r3
 80007ec:	001a      	movs	r2, r3
 80007ee:	4b23      	ldr	r3, [pc, #140]	@ (800087c <CheckForNewData+0x13c>)
 80007f0:	18d1      	adds	r1, r2, r3
 80007f2:	1dbb      	adds	r3, r7, #6
 80007f4:	881a      	ldrh	r2, [r3, #0]
 80007f6:	4b24      	ldr	r3, [pc, #144]	@ (8000888 <CheckForNewData+0x148>)
 80007f8:	0018      	movs	r0, r3
 80007fa:	f002 ff1a 	bl	8003632 <memcpy>
            memcpy(&processedData[firstPart], &rxBuffer[0], secondPart);
 80007fe:	1dbb      	adds	r3, r7, #6
 8000800:	881a      	ldrh	r2, [r3, #0]
 8000802:	4b21      	ldr	r3, [pc, #132]	@ (8000888 <CheckForNewData+0x148>)
 8000804:	18d0      	adds	r0, r2, r3
 8000806:	1d3b      	adds	r3, r7, #4
 8000808:	881a      	ldrh	r2, [r3, #0]
 800080a:	4b1c      	ldr	r3, [pc, #112]	@ (800087c <CheckForNewData+0x13c>)
 800080c:	0019      	movs	r1, r3
 800080e:	f002 ff10 	bl	8003632 <memcpy>

            dataLength = firstPart + secondPart;
 8000812:	1dba      	adds	r2, r7, #6
 8000814:	1d3b      	adds	r3, r7, #4
 8000816:	8812      	ldrh	r2, [r2, #0]
 8000818:	881b      	ldrh	r3, [r3, #0]
 800081a:	18d3      	adds	r3, r2, r3
 800081c:	b29a      	uxth	r2, r3
 800081e:	4b16      	ldr	r3, [pc, #88]	@ (8000878 <CheckForNewData+0x138>)
 8000820:	801a      	strh	r2, [r3, #0]

            uint8_t isValid = ProcessReceivedData(processedData, dataLength);
 8000822:	4b15      	ldr	r3, [pc, #84]	@ (8000878 <CheckForNewData+0x138>)
 8000824:	881b      	ldrh	r3, [r3, #0]
 8000826:	b29a      	uxth	r2, r3
 8000828:	1cfc      	adds	r4, r7, #3
 800082a:	4b17      	ldr	r3, [pc, #92]	@ (8000888 <CheckForNewData+0x148>)
 800082c:	0011      	movs	r1, r2
 800082e:	0018      	movs	r0, r3
 8000830:	f7ff feee 	bl	8000610 <ProcessReceivedData>
 8000834:	0003      	movs	r3, r0
 8000836:	7023      	strb	r3, [r4, #0]
            SendAcknowledgment(isValid);
 8000838:	1cfb      	adds	r3, r7, #3
 800083a:	781b      	ldrb	r3, [r3, #0]
 800083c:	0018      	movs	r0, r3
 800083e:	f7ff ff33 	bl	80006a8 <SendAcknowledgment>
            HAL_UART_Transmit(&huart2, response, sizeof(response)/sizeof(response[0]), 100);
 8000842:	490f      	ldr	r1, [pc, #60]	@ (8000880 <CheckForNewData+0x140>)
 8000844:	4809      	ldr	r0, [pc, #36]	@ (800086c <CheckForNewData+0x12c>)
 8000846:	2364      	movs	r3, #100	@ 0x64
 8000848:	2208      	movs	r2, #8
 800084a:	f001 fccf 	bl	80021ec <HAL_UART_Transmit>
            // HAL_UART_Transmit(&huart2, payload, 71, 100);
            responseLength = 0;
 800084e:	4b0d      	ldr	r3, [pc, #52]	@ (8000884 <CheckForNewData+0x144>)
 8000850:	2200      	movs	r2, #0
 8000852:	601a      	str	r2, [r3, #0]
        }

        oldPos = newPos;
 8000854:	4b06      	ldr	r3, [pc, #24]	@ (8000870 <CheckForNewData+0x130>)
 8000856:	881b      	ldrh	r3, [r3, #0]
 8000858:	b29a      	uxth	r2, r3
 800085a:	4b06      	ldr	r3, [pc, #24]	@ (8000874 <CheckForNewData+0x134>)
 800085c:	801a      	strh	r2, [r3, #0]
        dataReady = 1;
 800085e:	4b0b      	ldr	r3, [pc, #44]	@ (800088c <CheckForNewData+0x14c>)
 8000860:	2201      	movs	r2, #1
 8000862:	701a      	strb	r2, [r3, #0]
    }
}
 8000864:	46c0      	nop			@ (mov r8, r8)
 8000866:	46bd      	mov	sp, r7
 8000868:	b003      	add	sp, #12
 800086a:	bd90      	pop	{r4, r7, pc}
 800086c:	200001fc 	.word	0x200001fc
 8000870:	20000176 	.word	0x20000176
 8000874:	20000174 	.word	0x20000174
 8000878:	2000017a 	.word	0x2000017a
 800087c:	2000008c 	.word	0x2000008c
 8000880:	2000010c 	.word	0x2000010c
 8000884:	20000170 	.word	0x20000170
 8000888:	2000017c 	.word	0x2000017c
 800088c:	20000178 	.word	0x20000178

08000890 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000890:	b580      	push	{r7, lr}
 8000892:	b082      	sub	sp, #8
 8000894:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000896:	f000 faf6 	bl	8000e86 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800089a:	f000 f851 	bl	8000940 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800089e:	f000 f923 	bl	8000ae8 <MX_GPIO_Init>
  MX_DMA_Init();
 80008a2:	f000 f903 	bl	8000aac <MX_DMA_Init>
  MX_USART2_UART_Init();
 80008a6:	f000 f897 	bl	80009d8 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */

  UART_DMA_Init();
 80008aa:	f7ff fccb 	bl	8000244 <UART_DMA_Init>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
	  CheckForNewData();
 80008ae:	f7ff ff47 	bl	8000740 <CheckForNewData>
	  if(dataReady)
 80008b2:	4b1d      	ldr	r3, [pc, #116]	@ (8000928 <main+0x98>)
 80008b4:	781b      	ldrb	r3, [r3, #0]
 80008b6:	b2db      	uxtb	r3, r3
 80008b8:	2b00      	cmp	r3, #0
 80008ba:	d026      	beq.n	800090a <main+0x7a>
	  {
		  dataReady = 0;
 80008bc:	4b1a      	ldr	r3, [pc, #104]	@ (8000928 <main+0x98>)
 80008be:	2200      	movs	r2, #0
 80008c0:	701a      	strb	r2, [r3, #0]
		  printf("Received %d bytes of data\r\n", dataLength);
 80008c2:	4b1a      	ldr	r3, [pc, #104]	@ (800092c <main+0x9c>)
 80008c4:	881b      	ldrh	r3, [r3, #0]
 80008c6:	b29b      	uxth	r3, r3
 80008c8:	001a      	movs	r2, r3
 80008ca:	4b19      	ldr	r3, [pc, #100]	@ (8000930 <main+0xa0>)
 80008cc:	0011      	movs	r1, r2
 80008ce:	0018      	movs	r0, r3
 80008d0:	f002 fcd0 	bl	8003274 <iprintf>
		  for(int i = 0; i < dataLength; i++)
 80008d4:	2300      	movs	r3, #0
 80008d6:	607b      	str	r3, [r7, #4]
 80008d8:	e00c      	b.n	80008f4 <main+0x64>
		  {
			  printf("%02X ", processedData[i]);
 80008da:	4a16      	ldr	r2, [pc, #88]	@ (8000934 <main+0xa4>)
 80008dc:	687b      	ldr	r3, [r7, #4]
 80008de:	18d3      	adds	r3, r2, r3
 80008e0:	781b      	ldrb	r3, [r3, #0]
 80008e2:	001a      	movs	r2, r3
 80008e4:	4b14      	ldr	r3, [pc, #80]	@ (8000938 <main+0xa8>)
 80008e6:	0011      	movs	r1, r2
 80008e8:	0018      	movs	r0, r3
 80008ea:	f002 fcc3 	bl	8003274 <iprintf>
		  for(int i = 0; i < dataLength; i++)
 80008ee:	687b      	ldr	r3, [r7, #4]
 80008f0:	3301      	adds	r3, #1
 80008f2:	607b      	str	r3, [r7, #4]
 80008f4:	4b0d      	ldr	r3, [pc, #52]	@ (800092c <main+0x9c>)
 80008f6:	881b      	ldrh	r3, [r3, #0]
 80008f8:	b29b      	uxth	r3, r3
 80008fa:	001a      	movs	r2, r3
 80008fc:	687b      	ldr	r3, [r7, #4]
 80008fe:	4293      	cmp	r3, r2
 8000900:	dbeb      	blt.n	80008da <main+0x4a>
		  }
		  printf("\r\n");
 8000902:	4b0e      	ldr	r3, [pc, #56]	@ (800093c <main+0xac>)
 8000904:	0018      	movs	r0, r3
 8000906:	f002 fd1b 	bl	8003340 <puts>
	  }

	  HAL_Delay(10);
 800090a:	200a      	movs	r0, #10
 800090c:	f000 fb38 	bl	8000f80 <HAL_Delay>
	  HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);
 8000910:	23a0      	movs	r3, #160	@ 0xa0
 8000912:	05db      	lsls	r3, r3, #23
 8000914:	2120      	movs	r1, #32
 8000916:	0018      	movs	r0, r3
 8000918:	f001 f883 	bl	8001a22 <HAL_GPIO_TogglePin>
	  HAL_Delay(300);
 800091c:	2396      	movs	r3, #150	@ 0x96
 800091e:	005b      	lsls	r3, r3, #1
 8000920:	0018      	movs	r0, r3
 8000922:	f000 fb2d 	bl	8000f80 <HAL_Delay>
	  CheckForNewData();
 8000926:	e7c2      	b.n	80008ae <main+0x1e>
 8000928:	20000178 	.word	0x20000178
 800092c:	2000017a 	.word	0x2000017a
 8000930:	080040ac 	.word	0x080040ac
 8000934:	2000017c 	.word	0x2000017c
 8000938:	080040c8 	.word	0x080040c8
 800093c:	080040d0 	.word	0x080040d0

08000940 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000940:	b590      	push	{r4, r7, lr}
 8000942:	b08d      	sub	sp, #52	@ 0x34
 8000944:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000946:	2414      	movs	r4, #20
 8000948:	193b      	adds	r3, r7, r4
 800094a:	0018      	movs	r0, r3
 800094c:	231c      	movs	r3, #28
 800094e:	001a      	movs	r2, r3
 8000950:	2100      	movs	r1, #0
 8000952:	f002 fdeb 	bl	800352c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000956:	003b      	movs	r3, r7
 8000958:	0018      	movs	r0, r3
 800095a:	2314      	movs	r3, #20
 800095c:	001a      	movs	r2, r3
 800095e:	2100      	movs	r1, #0
 8000960:	f002 fde4 	bl	800352c <memset>

  __HAL_FLASH_SET_LATENCY(FLASH_LATENCY_0);
 8000964:	4b1b      	ldr	r3, [pc, #108]	@ (80009d4 <SystemClock_Config+0x94>)
 8000966:	681a      	ldr	r2, [r3, #0]
 8000968:	4b1a      	ldr	r3, [pc, #104]	@ (80009d4 <SystemClock_Config+0x94>)
 800096a:	2107      	movs	r1, #7
 800096c:	438a      	bics	r2, r1
 800096e:	601a      	str	r2, [r3, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000970:	193b      	adds	r3, r7, r4
 8000972:	2202      	movs	r2, #2
 8000974:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000976:	193b      	adds	r3, r7, r4
 8000978:	2280      	movs	r2, #128	@ 0x80
 800097a:	0052      	lsls	r2, r2, #1
 800097c:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV4;
 800097e:	193b      	adds	r3, r7, r4
 8000980:	2280      	movs	r2, #128	@ 0x80
 8000982:	0152      	lsls	r2, r2, #5
 8000984:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000986:	193b      	adds	r3, r7, r4
 8000988:	2240      	movs	r2, #64	@ 0x40
 800098a:	615a      	str	r2, [r3, #20]
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800098c:	193b      	adds	r3, r7, r4
 800098e:	0018      	movs	r0, r3
 8000990:	f001 f862 	bl	8001a58 <HAL_RCC_OscConfig>
 8000994:	1e03      	subs	r3, r0, #0
 8000996:	d001      	beq.n	800099c <SystemClock_Config+0x5c>
  {
    Error_Handler();
 8000998:	f000 f8dc 	bl	8000b54 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800099c:	003b      	movs	r3, r7
 800099e:	2207      	movs	r2, #7
 80009a0:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80009a2:	003b      	movs	r3, r7
 80009a4:	2200      	movs	r2, #0
 80009a6:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 80009a8:	003b      	movs	r3, r7
 80009aa:	2200      	movs	r2, #0
 80009ac:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 80009ae:	003b      	movs	r3, r7
 80009b0:	2200      	movs	r2, #0
 80009b2:	60da      	str	r2, [r3, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV1;
 80009b4:	003b      	movs	r3, r7
 80009b6:	2200      	movs	r2, #0
 80009b8:	611a      	str	r2, [r3, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80009ba:	003b      	movs	r3, r7
 80009bc:	2100      	movs	r1, #0
 80009be:	0018      	movs	r0, r3
 80009c0:	f001 fa2e 	bl	8001e20 <HAL_RCC_ClockConfig>
 80009c4:	1e03      	subs	r3, r0, #0
 80009c6:	d001      	beq.n	80009cc <SystemClock_Config+0x8c>
  {
    Error_Handler();
 80009c8:	f000 f8c4 	bl	8000b54 <Error_Handler>
  }
}
 80009cc:	46c0      	nop			@ (mov r8, r8)
 80009ce:	46bd      	mov	sp, r7
 80009d0:	b00d      	add	sp, #52	@ 0x34
 80009d2:	bd90      	pop	{r4, r7, pc}
 80009d4:	40022000 	.word	0x40022000

080009d8 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80009d8:	b580      	push	{r7, lr}
 80009da:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80009dc:	4b16      	ldr	r3, [pc, #88]	@ (8000a38 <MX_USART2_UART_Init+0x60>)
 80009de:	4a17      	ldr	r2, [pc, #92]	@ (8000a3c <MX_USART2_UART_Init+0x64>)
 80009e0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80009e2:	4b15      	ldr	r3, [pc, #84]	@ (8000a38 <MX_USART2_UART_Init+0x60>)
 80009e4:	22e1      	movs	r2, #225	@ 0xe1
 80009e6:	0252      	lsls	r2, r2, #9
 80009e8:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80009ea:	4b13      	ldr	r3, [pc, #76]	@ (8000a38 <MX_USART2_UART_Init+0x60>)
 80009ec:	2200      	movs	r2, #0
 80009ee:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80009f0:	4b11      	ldr	r3, [pc, #68]	@ (8000a38 <MX_USART2_UART_Init+0x60>)
 80009f2:	2200      	movs	r2, #0
 80009f4:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80009f6:	4b10      	ldr	r3, [pc, #64]	@ (8000a38 <MX_USART2_UART_Init+0x60>)
 80009f8:	2200      	movs	r2, #0
 80009fa:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80009fc:	4b0e      	ldr	r3, [pc, #56]	@ (8000a38 <MX_USART2_UART_Init+0x60>)
 80009fe:	220c      	movs	r2, #12
 8000a00:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000a02:	4b0d      	ldr	r3, [pc, #52]	@ (8000a38 <MX_USART2_UART_Init+0x60>)
 8000a04:	2200      	movs	r2, #0
 8000a06:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000a08:	4b0b      	ldr	r3, [pc, #44]	@ (8000a38 <MX_USART2_UART_Init+0x60>)
 8000a0a:	2200      	movs	r2, #0
 8000a0c:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000a0e:	4b0a      	ldr	r3, [pc, #40]	@ (8000a38 <MX_USART2_UART_Init+0x60>)
 8000a10:	2200      	movs	r2, #0
 8000a12:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000a14:	4b08      	ldr	r3, [pc, #32]	@ (8000a38 <MX_USART2_UART_Init+0x60>)
 8000a16:	2200      	movs	r2, #0
 8000a18:	625a      	str	r2, [r3, #36]	@ 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000a1a:	4b07      	ldr	r3, [pc, #28]	@ (8000a38 <MX_USART2_UART_Init+0x60>)
 8000a1c:	2200      	movs	r2, #0
 8000a1e:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000a20:	4b05      	ldr	r3, [pc, #20]	@ (8000a38 <MX_USART2_UART_Init+0x60>)
 8000a22:	0018      	movs	r0, r3
 8000a24:	f001 fb8c 	bl	8002140 <HAL_UART_Init>
 8000a28:	1e03      	subs	r3, r0, #0
 8000a2a:	d001      	beq.n	8000a30 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 8000a2c:	f000 f892 	bl	8000b54 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000a30:	46c0      	nop			@ (mov r8, r8)
 8000a32:	46bd      	mov	sp, r7
 8000a34:	bd80      	pop	{r7, pc}
 8000a36:	46c0      	nop			@ (mov r8, r8)
 8000a38:	200001fc 	.word	0x200001fc
 8000a3c:	40004400 	.word	0x40004400

08000a40 <HAL_UART_ErrorCallback>:

void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8000a40:	b580      	push	{r7, lr}
 8000a42:	b082      	sub	sp, #8
 8000a44:	af00      	add	r7, sp, #0
 8000a46:	6078      	str	r0, [r7, #4]
    if(huart->Instance == USART2)
 8000a48:	687b      	ldr	r3, [r7, #4]
 8000a4a:	681b      	ldr	r3, [r3, #0]
 8000a4c:	4a0b      	ldr	r2, [pc, #44]	@ (8000a7c <HAL_UART_ErrorCallback+0x3c>)
 8000a4e:	4293      	cmp	r3, r2
 8000a50:	d110      	bne.n	8000a74 <HAL_UART_ErrorCallback+0x34>
    {
        // Handle UART errors
        printf("UART Error occurred\r\n");
 8000a52:	4b0b      	ldr	r3, [pc, #44]	@ (8000a80 <HAL_UART_ErrorCallback+0x40>)
 8000a54:	0018      	movs	r0, r3
 8000a56:	f002 fc73 	bl	8003340 <puts>

        // Restart DMA reception
        HAL_UART_DMAStop(&huart2);
 8000a5a:	4b0a      	ldr	r3, [pc, #40]	@ (8000a84 <HAL_UART_ErrorCallback+0x44>)
 8000a5c:	0018      	movs	r0, r3
 8000a5e:	f001 fcc0 	bl	80023e2 <HAL_UART_DMAStop>
        HAL_UART_Receive_DMA(&huart2, rxBuffer, RX_BUFFER_SIZE);
 8000a62:	4909      	ldr	r1, [pc, #36]	@ (8000a88 <HAL_UART_ErrorCallback+0x48>)
 8000a64:	4b07      	ldr	r3, [pc, #28]	@ (8000a84 <HAL_UART_ErrorCallback+0x44>)
 8000a66:	2280      	movs	r2, #128	@ 0x80
 8000a68:	0018      	movs	r0, r3
 8000a6a:	f001 fc63 	bl	8002334 <HAL_UART_Receive_DMA>

        // Send NACK to indicate error
        SendAcknowledgment(0);
 8000a6e:	2000      	movs	r0, #0
 8000a70:	f7ff fe1a 	bl	80006a8 <SendAcknowledgment>
    }
}
 8000a74:	46c0      	nop			@ (mov r8, r8)
 8000a76:	46bd      	mov	sp, r7
 8000a78:	b002      	add	sp, #8
 8000a7a:	bd80      	pop	{r7, pc}
 8000a7c:	40004400 	.word	0x40004400
 8000a80:	080040d4 	.word	0x080040d4
 8000a84:	200001fc 	.word	0x200001fc
 8000a88:	2000008c 	.word	0x2000008c

08000a8c <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8000a8c:	b580      	push	{r7, lr}
 8000a8e:	b082      	sub	sp, #8
 8000a90:	af00      	add	r7, sp, #0
 8000a92:	6078      	str	r0, [r7, #4]
    if(huart->Instance == USART2)
    {
        // Full buffer filled - can be used for additional processing
        // In circular mode, this indicates second half of buffer is full
    }
}
 8000a94:	46c0      	nop			@ (mov r8, r8)
 8000a96:	46bd      	mov	sp, r7
 8000a98:	b002      	add	sp, #8
 8000a9a:	bd80      	pop	{r7, pc}

08000a9c <HAL_UART_RxHalfCpltCallback>:

void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8000a9c:	b580      	push	{r7, lr}
 8000a9e:	b082      	sub	sp, #8
 8000aa0:	af00      	add	r7, sp, #0
 8000aa2:	6078      	str	r0, [r7, #4]
    if(huart->Instance == USART2)
    {
        // Half buffer filled - can be used for additional processing
        // In circular mode, this indicates first half of buffer is full
    }
}
 8000aa4:	46c0      	nop			@ (mov r8, r8)
 8000aa6:	46bd      	mov	sp, r7
 8000aa8:	b002      	add	sp, #8
 8000aaa:	bd80      	pop	{r7, pc}

08000aac <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000aac:	b580      	push	{r7, lr}
 8000aae:	b082      	sub	sp, #8
 8000ab0:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000ab2:	4b0c      	ldr	r3, [pc, #48]	@ (8000ae4 <MX_DMA_Init+0x38>)
 8000ab4:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8000ab6:	4b0b      	ldr	r3, [pc, #44]	@ (8000ae4 <MX_DMA_Init+0x38>)
 8000ab8:	2101      	movs	r1, #1
 8000aba:	430a      	orrs	r2, r1
 8000abc:	639a      	str	r2, [r3, #56]	@ 0x38
 8000abe:	4b09      	ldr	r3, [pc, #36]	@ (8000ae4 <MX_DMA_Init+0x38>)
 8000ac0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8000ac2:	2201      	movs	r2, #1
 8000ac4:	4013      	ands	r3, r2
 8000ac6:	607b      	str	r3, [r7, #4]
 8000ac8:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8000aca:	2200      	movs	r2, #0
 8000acc:	2100      	movs	r1, #0
 8000ace:	2009      	movs	r0, #9
 8000ad0:	f000 fb26 	bl	8001120 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8000ad4:	2009      	movs	r0, #9
 8000ad6:	f000 fb38 	bl	800114a <HAL_NVIC_EnableIRQ>

}
 8000ada:	46c0      	nop			@ (mov r8, r8)
 8000adc:	46bd      	mov	sp, r7
 8000ade:	b002      	add	sp, #8
 8000ae0:	bd80      	pop	{r7, pc}
 8000ae2:	46c0      	nop			@ (mov r8, r8)
 8000ae4:	40021000 	.word	0x40021000

08000ae8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000ae8:	b580      	push	{r7, lr}
 8000aea:	b086      	sub	sp, #24
 8000aec:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000aee:	1d3b      	adds	r3, r7, #4
 8000af0:	0018      	movs	r0, r3
 8000af2:	2314      	movs	r3, #20
 8000af4:	001a      	movs	r2, r3
 8000af6:	2100      	movs	r1, #0
 8000af8:	f002 fd18 	bl	800352c <memset>
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000afc:	4b14      	ldr	r3, [pc, #80]	@ (8000b50 <MX_GPIO_Init+0x68>)
 8000afe:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8000b00:	4b13      	ldr	r3, [pc, #76]	@ (8000b50 <MX_GPIO_Init+0x68>)
 8000b02:	2101      	movs	r1, #1
 8000b04:	430a      	orrs	r2, r1
 8000b06:	635a      	str	r2, [r3, #52]	@ 0x34
 8000b08:	4b11      	ldr	r3, [pc, #68]	@ (8000b50 <MX_GPIO_Init+0x68>)
 8000b0a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000b0c:	2201      	movs	r2, #1
 8000b0e:	4013      	ands	r3, r2
 8000b10:	603b      	str	r3, [r7, #0]
 8000b12:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
 8000b14:	23a0      	movs	r3, #160	@ 0xa0
 8000b16:	05db      	lsls	r3, r3, #23
 8000b18:	2200      	movs	r2, #0
 8000b1a:	2120      	movs	r1, #32
 8000b1c:	0018      	movs	r0, r3
 8000b1e:	f000 ff63 	bl	80019e8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA5 */
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 8000b22:	1d3b      	adds	r3, r7, #4
 8000b24:	2220      	movs	r2, #32
 8000b26:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b28:	1d3b      	adds	r3, r7, #4
 8000b2a:	2201      	movs	r2, #1
 8000b2c:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b2e:	1d3b      	adds	r3, r7, #4
 8000b30:	2200      	movs	r2, #0
 8000b32:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b34:	1d3b      	adds	r3, r7, #4
 8000b36:	2200      	movs	r2, #0
 8000b38:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b3a:	1d3a      	adds	r2, r7, #4
 8000b3c:	23a0      	movs	r3, #160	@ 0xa0
 8000b3e:	05db      	lsls	r3, r3, #23
 8000b40:	0011      	movs	r1, r2
 8000b42:	0018      	movs	r0, r3
 8000b44:	f000 fdde 	bl	8001704 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8000b48:	46c0      	nop			@ (mov r8, r8)
 8000b4a:	46bd      	mov	sp, r7
 8000b4c:	b006      	add	sp, #24
 8000b4e:	bd80      	pop	{r7, pc}
 8000b50:	40021000 	.word	0x40021000

08000b54 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000b54:	b580      	push	{r7, lr}
 8000b56:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8000b58:	b672      	cpsid	i
}
 8000b5a:	46c0      	nop			@ (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000b5c:	46c0      	nop			@ (mov r8, r8)
 8000b5e:	e7fd      	b.n	8000b5c <Error_Handler+0x8>

08000b60 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000b60:	b580      	push	{r7, lr}
 8000b62:	b082      	sub	sp, #8
 8000b64:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000b66:	4b0f      	ldr	r3, [pc, #60]	@ (8000ba4 <HAL_MspInit+0x44>)
 8000b68:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8000b6a:	4b0e      	ldr	r3, [pc, #56]	@ (8000ba4 <HAL_MspInit+0x44>)
 8000b6c:	2101      	movs	r1, #1
 8000b6e:	430a      	orrs	r2, r1
 8000b70:	641a      	str	r2, [r3, #64]	@ 0x40
 8000b72:	4b0c      	ldr	r3, [pc, #48]	@ (8000ba4 <HAL_MspInit+0x44>)
 8000b74:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000b76:	2201      	movs	r2, #1
 8000b78:	4013      	ands	r3, r2
 8000b7a:	607b      	str	r3, [r7, #4]
 8000b7c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000b7e:	4b09      	ldr	r3, [pc, #36]	@ (8000ba4 <HAL_MspInit+0x44>)
 8000b80:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8000b82:	4b08      	ldr	r3, [pc, #32]	@ (8000ba4 <HAL_MspInit+0x44>)
 8000b84:	2180      	movs	r1, #128	@ 0x80
 8000b86:	0549      	lsls	r1, r1, #21
 8000b88:	430a      	orrs	r2, r1
 8000b8a:	63da      	str	r2, [r3, #60]	@ 0x3c
 8000b8c:	4b05      	ldr	r3, [pc, #20]	@ (8000ba4 <HAL_MspInit+0x44>)
 8000b8e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8000b90:	2380      	movs	r3, #128	@ 0x80
 8000b92:	055b      	lsls	r3, r3, #21
 8000b94:	4013      	ands	r3, r2
 8000b96:	603b      	str	r3, [r7, #0]
 8000b98:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000b9a:	46c0      	nop			@ (mov r8, r8)
 8000b9c:	46bd      	mov	sp, r7
 8000b9e:	b002      	add	sp, #8
 8000ba0:	bd80      	pop	{r7, pc}
 8000ba2:	46c0      	nop			@ (mov r8, r8)
 8000ba4:	40021000 	.word	0x40021000

08000ba8 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000ba8:	b590      	push	{r4, r7, lr}
 8000baa:	b08b      	sub	sp, #44	@ 0x2c
 8000bac:	af00      	add	r7, sp, #0
 8000bae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bb0:	2414      	movs	r4, #20
 8000bb2:	193b      	adds	r3, r7, r4
 8000bb4:	0018      	movs	r0, r3
 8000bb6:	2314      	movs	r3, #20
 8000bb8:	001a      	movs	r2, r3
 8000bba:	2100      	movs	r1, #0
 8000bbc:	f002 fcb6 	bl	800352c <memset>
  if(huart->Instance==USART2)
 8000bc0:	687b      	ldr	r3, [r7, #4]
 8000bc2:	681b      	ldr	r3, [r3, #0]
 8000bc4:	4a30      	ldr	r2, [pc, #192]	@ (8000c88 <HAL_UART_MspInit+0xe0>)
 8000bc6:	4293      	cmp	r3, r2
 8000bc8:	d15a      	bne.n	8000c80 <HAL_UART_MspInit+0xd8>
  {
    /* USER CODE BEGIN USART2_MspInit 0 */

    /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000bca:	4b30      	ldr	r3, [pc, #192]	@ (8000c8c <HAL_UART_MspInit+0xe4>)
 8000bcc:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8000bce:	4b2f      	ldr	r3, [pc, #188]	@ (8000c8c <HAL_UART_MspInit+0xe4>)
 8000bd0:	2180      	movs	r1, #128	@ 0x80
 8000bd2:	0289      	lsls	r1, r1, #10
 8000bd4:	430a      	orrs	r2, r1
 8000bd6:	63da      	str	r2, [r3, #60]	@ 0x3c
 8000bd8:	4b2c      	ldr	r3, [pc, #176]	@ (8000c8c <HAL_UART_MspInit+0xe4>)
 8000bda:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8000bdc:	2380      	movs	r3, #128	@ 0x80
 8000bde:	029b      	lsls	r3, r3, #10
 8000be0:	4013      	ands	r3, r2
 8000be2:	613b      	str	r3, [r7, #16]
 8000be4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000be6:	4b29      	ldr	r3, [pc, #164]	@ (8000c8c <HAL_UART_MspInit+0xe4>)
 8000be8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8000bea:	4b28      	ldr	r3, [pc, #160]	@ (8000c8c <HAL_UART_MspInit+0xe4>)
 8000bec:	2101      	movs	r1, #1
 8000bee:	430a      	orrs	r2, r1
 8000bf0:	635a      	str	r2, [r3, #52]	@ 0x34
 8000bf2:	4b26      	ldr	r3, [pc, #152]	@ (8000c8c <HAL_UART_MspInit+0xe4>)
 8000bf4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000bf6:	2201      	movs	r2, #1
 8000bf8:	4013      	ands	r3, r2
 8000bfa:	60fb      	str	r3, [r7, #12]
 8000bfc:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000bfe:	0021      	movs	r1, r4
 8000c00:	187b      	adds	r3, r7, r1
 8000c02:	220c      	movs	r2, #12
 8000c04:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c06:	187b      	adds	r3, r7, r1
 8000c08:	2202      	movs	r2, #2
 8000c0a:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c0c:	187b      	adds	r3, r7, r1
 8000c0e:	2200      	movs	r2, #0
 8000c10:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c12:	187b      	adds	r3, r7, r1
 8000c14:	2200      	movs	r2, #0
 8000c16:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART2;
 8000c18:	187b      	adds	r3, r7, r1
 8000c1a:	2201      	movs	r2, #1
 8000c1c:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c1e:	187a      	adds	r2, r7, r1
 8000c20:	23a0      	movs	r3, #160	@ 0xa0
 8000c22:	05db      	lsls	r3, r3, #23
 8000c24:	0011      	movs	r1, r2
 8000c26:	0018      	movs	r0, r3
 8000c28:	f000 fd6c 	bl	8001704 <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_RX Init */
    hdma_usart2_rx.Instance = DMA1_Channel1;
 8000c2c:	4b18      	ldr	r3, [pc, #96]	@ (8000c90 <HAL_UART_MspInit+0xe8>)
 8000c2e:	4a19      	ldr	r2, [pc, #100]	@ (8000c94 <HAL_UART_MspInit+0xec>)
 8000c30:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Request = DMA_REQUEST_USART2_RX;
 8000c32:	4b17      	ldr	r3, [pc, #92]	@ (8000c90 <HAL_UART_MspInit+0xe8>)
 8000c34:	2234      	movs	r2, #52	@ 0x34
 8000c36:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000c38:	4b15      	ldr	r3, [pc, #84]	@ (8000c90 <HAL_UART_MspInit+0xe8>)
 8000c3a:	2200      	movs	r2, #0
 8000c3c:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000c3e:	4b14      	ldr	r3, [pc, #80]	@ (8000c90 <HAL_UART_MspInit+0xe8>)
 8000c40:	2200      	movs	r2, #0
 8000c42:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8000c44:	4b12      	ldr	r3, [pc, #72]	@ (8000c90 <HAL_UART_MspInit+0xe8>)
 8000c46:	2280      	movs	r2, #128	@ 0x80
 8000c48:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000c4a:	4b11      	ldr	r3, [pc, #68]	@ (8000c90 <HAL_UART_MspInit+0xe8>)
 8000c4c:	2200      	movs	r2, #0
 8000c4e:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000c50:	4b0f      	ldr	r3, [pc, #60]	@ (8000c90 <HAL_UART_MspInit+0xe8>)
 8000c52:	2200      	movs	r2, #0
 8000c54:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_CIRCULAR;
 8000c56:	4b0e      	ldr	r3, [pc, #56]	@ (8000c90 <HAL_UART_MspInit+0xe8>)
 8000c58:	2220      	movs	r2, #32
 8000c5a:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8000c5c:	4b0c      	ldr	r3, [pc, #48]	@ (8000c90 <HAL_UART_MspInit+0xe8>)
 8000c5e:	2200      	movs	r2, #0
 8000c60:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8000c62:	4b0b      	ldr	r3, [pc, #44]	@ (8000c90 <HAL_UART_MspInit+0xe8>)
 8000c64:	0018      	movs	r0, r3
 8000c66:	f000 fa8d 	bl	8001184 <HAL_DMA_Init>
 8000c6a:	1e03      	subs	r3, r0, #0
 8000c6c:	d001      	beq.n	8000c72 <HAL_UART_MspInit+0xca>
    {
      Error_Handler();
 8000c6e:	f7ff ff71 	bl	8000b54 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 8000c72:	687b      	ldr	r3, [r7, #4]
 8000c74:	2180      	movs	r1, #128	@ 0x80
 8000c76:	4a06      	ldr	r2, [pc, #24]	@ (8000c90 <HAL_UART_MspInit+0xe8>)
 8000c78:	505a      	str	r2, [r3, r1]
 8000c7a:	4b05      	ldr	r3, [pc, #20]	@ (8000c90 <HAL_UART_MspInit+0xe8>)
 8000c7c:	687a      	ldr	r2, [r7, #4]
 8000c7e:	629a      	str	r2, [r3, #40]	@ 0x28

    /* USER CODE END USART2_MspInit 1 */

  }

}
 8000c80:	46c0      	nop			@ (mov r8, r8)
 8000c82:	46bd      	mov	sp, r7
 8000c84:	b00b      	add	sp, #44	@ 0x2c
 8000c86:	bd90      	pop	{r4, r7, pc}
 8000c88:	40004400 	.word	0x40004400
 8000c8c:	40021000 	.word	0x40021000
 8000c90:	20000290 	.word	0x20000290
 8000c94:	40020008 	.word	0x40020008

08000c98 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000c98:	b580      	push	{r7, lr}
 8000c9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000c9c:	46c0      	nop			@ (mov r8, r8)
 8000c9e:	e7fd      	b.n	8000c9c <NMI_Handler+0x4>

08000ca0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000ca0:	b580      	push	{r7, lr}
 8000ca2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000ca4:	46c0      	nop			@ (mov r8, r8)
 8000ca6:	e7fd      	b.n	8000ca4 <HardFault_Handler+0x4>

08000ca8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000ca8:	b580      	push	{r7, lr}
 8000caa:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000cac:	46c0      	nop			@ (mov r8, r8)
 8000cae:	46bd      	mov	sp, r7
 8000cb0:	bd80      	pop	{r7, pc}

08000cb2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000cb2:	b580      	push	{r7, lr}
 8000cb4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000cb6:	46c0      	nop			@ (mov r8, r8)
 8000cb8:	46bd      	mov	sp, r7
 8000cba:	bd80      	pop	{r7, pc}

08000cbc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000cbc:	b580      	push	{r7, lr}
 8000cbe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000cc0:	f000 f942 	bl	8000f48 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000cc4:	46c0      	nop			@ (mov r8, r8)
 8000cc6:	46bd      	mov	sp, r7
 8000cc8:	bd80      	pop	{r7, pc}
	...

08000ccc <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 1 interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8000ccc:	b580      	push	{r7, lr}
 8000cce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8000cd0:	4b03      	ldr	r3, [pc, #12]	@ (8000ce0 <DMA1_Channel1_IRQHandler+0x14>)
 8000cd2:	0018      	movs	r0, r3
 8000cd4:	f000 fbca 	bl	800146c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8000cd8:	46c0      	nop			@ (mov r8, r8)
 8000cda:	46bd      	mov	sp, r7
 8000cdc:	bd80      	pop	{r7, pc}
 8000cde:	46c0      	nop			@ (mov r8, r8)
 8000ce0:	20000290 	.word	0x20000290

08000ce4 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000ce4:	b580      	push	{r7, lr}
 8000ce6:	b086      	sub	sp, #24
 8000ce8:	af00      	add	r7, sp, #0
 8000cea:	60f8      	str	r0, [r7, #12]
 8000cec:	60b9      	str	r1, [r7, #8]
 8000cee:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000cf0:	2300      	movs	r3, #0
 8000cf2:	617b      	str	r3, [r7, #20]
 8000cf4:	e00a      	b.n	8000d0c <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000cf6:	e000      	b.n	8000cfa <_read+0x16>
 8000cf8:	bf00      	nop
 8000cfa:	0001      	movs	r1, r0
 8000cfc:	68bb      	ldr	r3, [r7, #8]
 8000cfe:	1c5a      	adds	r2, r3, #1
 8000d00:	60ba      	str	r2, [r7, #8]
 8000d02:	b2ca      	uxtb	r2, r1
 8000d04:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000d06:	697b      	ldr	r3, [r7, #20]
 8000d08:	3301      	adds	r3, #1
 8000d0a:	617b      	str	r3, [r7, #20]
 8000d0c:	697a      	ldr	r2, [r7, #20]
 8000d0e:	687b      	ldr	r3, [r7, #4]
 8000d10:	429a      	cmp	r2, r3
 8000d12:	dbf0      	blt.n	8000cf6 <_read+0x12>
  }

  return len;
 8000d14:	687b      	ldr	r3, [r7, #4]
}
 8000d16:	0018      	movs	r0, r3
 8000d18:	46bd      	mov	sp, r7
 8000d1a:	b006      	add	sp, #24
 8000d1c:	bd80      	pop	{r7, pc}

08000d1e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000d1e:	b580      	push	{r7, lr}
 8000d20:	b086      	sub	sp, #24
 8000d22:	af00      	add	r7, sp, #0
 8000d24:	60f8      	str	r0, [r7, #12]
 8000d26:	60b9      	str	r1, [r7, #8]
 8000d28:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000d2a:	2300      	movs	r3, #0
 8000d2c:	617b      	str	r3, [r7, #20]
 8000d2e:	e009      	b.n	8000d44 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8000d30:	68bb      	ldr	r3, [r7, #8]
 8000d32:	1c5a      	adds	r2, r3, #1
 8000d34:	60ba      	str	r2, [r7, #8]
 8000d36:	781b      	ldrb	r3, [r3, #0]
 8000d38:	0018      	movs	r0, r3
 8000d3a:	e000      	b.n	8000d3e <_write+0x20>
 8000d3c:	bf00      	nop
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000d3e:	697b      	ldr	r3, [r7, #20]
 8000d40:	3301      	adds	r3, #1
 8000d42:	617b      	str	r3, [r7, #20]
 8000d44:	697a      	ldr	r2, [r7, #20]
 8000d46:	687b      	ldr	r3, [r7, #4]
 8000d48:	429a      	cmp	r2, r3
 8000d4a:	dbf1      	blt.n	8000d30 <_write+0x12>
  }
  return len;
 8000d4c:	687b      	ldr	r3, [r7, #4]
}
 8000d4e:	0018      	movs	r0, r3
 8000d50:	46bd      	mov	sp, r7
 8000d52:	b006      	add	sp, #24
 8000d54:	bd80      	pop	{r7, pc}

08000d56 <_close>:

int _close(int file)
{
 8000d56:	b580      	push	{r7, lr}
 8000d58:	b082      	sub	sp, #8
 8000d5a:	af00      	add	r7, sp, #0
 8000d5c:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000d5e:	2301      	movs	r3, #1
 8000d60:	425b      	negs	r3, r3
}
 8000d62:	0018      	movs	r0, r3
 8000d64:	46bd      	mov	sp, r7
 8000d66:	b002      	add	sp, #8
 8000d68:	bd80      	pop	{r7, pc}

08000d6a <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000d6a:	b580      	push	{r7, lr}
 8000d6c:	b082      	sub	sp, #8
 8000d6e:	af00      	add	r7, sp, #0
 8000d70:	6078      	str	r0, [r7, #4]
 8000d72:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000d74:	683b      	ldr	r3, [r7, #0]
 8000d76:	2280      	movs	r2, #128	@ 0x80
 8000d78:	0192      	lsls	r2, r2, #6
 8000d7a:	605a      	str	r2, [r3, #4]
  return 0;
 8000d7c:	2300      	movs	r3, #0
}
 8000d7e:	0018      	movs	r0, r3
 8000d80:	46bd      	mov	sp, r7
 8000d82:	b002      	add	sp, #8
 8000d84:	bd80      	pop	{r7, pc}

08000d86 <_isatty>:

int _isatty(int file)
{
 8000d86:	b580      	push	{r7, lr}
 8000d88:	b082      	sub	sp, #8
 8000d8a:	af00      	add	r7, sp, #0
 8000d8c:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000d8e:	2301      	movs	r3, #1
}
 8000d90:	0018      	movs	r0, r3
 8000d92:	46bd      	mov	sp, r7
 8000d94:	b002      	add	sp, #8
 8000d96:	bd80      	pop	{r7, pc}

08000d98 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000d98:	b580      	push	{r7, lr}
 8000d9a:	b084      	sub	sp, #16
 8000d9c:	af00      	add	r7, sp, #0
 8000d9e:	60f8      	str	r0, [r7, #12]
 8000da0:	60b9      	str	r1, [r7, #8]
 8000da2:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000da4:	2300      	movs	r3, #0
}
 8000da6:	0018      	movs	r0, r3
 8000da8:	46bd      	mov	sp, r7
 8000daa:	b004      	add	sp, #16
 8000dac:	bd80      	pop	{r7, pc}
	...

08000db0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000db0:	b580      	push	{r7, lr}
 8000db2:	b086      	sub	sp, #24
 8000db4:	af00      	add	r7, sp, #0
 8000db6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000db8:	4a14      	ldr	r2, [pc, #80]	@ (8000e0c <_sbrk+0x5c>)
 8000dba:	4b15      	ldr	r3, [pc, #84]	@ (8000e10 <_sbrk+0x60>)
 8000dbc:	1ad3      	subs	r3, r2, r3
 8000dbe:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000dc0:	697b      	ldr	r3, [r7, #20]
 8000dc2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000dc4:	4b13      	ldr	r3, [pc, #76]	@ (8000e14 <_sbrk+0x64>)
 8000dc6:	681b      	ldr	r3, [r3, #0]
 8000dc8:	2b00      	cmp	r3, #0
 8000dca:	d102      	bne.n	8000dd2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000dcc:	4b11      	ldr	r3, [pc, #68]	@ (8000e14 <_sbrk+0x64>)
 8000dce:	4a12      	ldr	r2, [pc, #72]	@ (8000e18 <_sbrk+0x68>)
 8000dd0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000dd2:	4b10      	ldr	r3, [pc, #64]	@ (8000e14 <_sbrk+0x64>)
 8000dd4:	681a      	ldr	r2, [r3, #0]
 8000dd6:	687b      	ldr	r3, [r7, #4]
 8000dd8:	18d3      	adds	r3, r2, r3
 8000dda:	693a      	ldr	r2, [r7, #16]
 8000ddc:	429a      	cmp	r2, r3
 8000dde:	d207      	bcs.n	8000df0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000de0:	f002 fbfa 	bl	80035d8 <__errno>
 8000de4:	0003      	movs	r3, r0
 8000de6:	220c      	movs	r2, #12
 8000de8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000dea:	2301      	movs	r3, #1
 8000dec:	425b      	negs	r3, r3
 8000dee:	e009      	b.n	8000e04 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000df0:	4b08      	ldr	r3, [pc, #32]	@ (8000e14 <_sbrk+0x64>)
 8000df2:	681b      	ldr	r3, [r3, #0]
 8000df4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000df6:	4b07      	ldr	r3, [pc, #28]	@ (8000e14 <_sbrk+0x64>)
 8000df8:	681a      	ldr	r2, [r3, #0]
 8000dfa:	687b      	ldr	r3, [r7, #4]
 8000dfc:	18d2      	adds	r2, r2, r3
 8000dfe:	4b05      	ldr	r3, [pc, #20]	@ (8000e14 <_sbrk+0x64>)
 8000e00:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 8000e02:	68fb      	ldr	r3, [r7, #12]
}
 8000e04:	0018      	movs	r0, r3
 8000e06:	46bd      	mov	sp, r7
 8000e08:	b006      	add	sp, #24
 8000e0a:	bd80      	pop	{r7, pc}
 8000e0c:	20007800 	.word	0x20007800
 8000e10:	00000400 	.word	0x00000400
 8000e14:	200002ec 	.word	0x200002ec
 8000e18:	20000440 	.word	0x20000440

08000e1c <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000e1c:	b580      	push	{r7, lr}
 8000e1e:	af00      	add	r7, sp, #0
  
  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000e20:	4b03      	ldr	r3, [pc, #12]	@ (8000e30 <SystemInit+0x14>)
 8000e22:	2280      	movs	r2, #128	@ 0x80
 8000e24:	0512      	lsls	r2, r2, #20
 8000e26:	609a      	str	r2, [r3, #8]
#endif
}
 8000e28:	46c0      	nop			@ (mov r8, r8)
 8000e2a:	46bd      	mov	sp, r7
 8000e2c:	bd80      	pop	{r7, pc}
 8000e2e:	46c0      	nop			@ (mov r8, r8)
 8000e30:	e000ed00 	.word	0xe000ed00

08000e34 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000e34:	480d      	ldr	r0, [pc, #52]	@ (8000e6c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000e36:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000e38:	f7ff fff0 	bl	8000e1c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8000e3c:	2100      	movs	r1, #0
  b LoopCopyDataInit
 8000e3e:	e003      	b.n	8000e48 <LoopCopyDataInit>

08000e40 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8000e40:	4b0b      	ldr	r3, [pc, #44]	@ (8000e70 <LoopForever+0x6>)
  ldr r3, [r3, r1]
 8000e42:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8000e44:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 8000e46:	3104      	adds	r1, #4

08000e48 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8000e48:	480a      	ldr	r0, [pc, #40]	@ (8000e74 <LoopForever+0xa>)
  ldr r3, =_edata
 8000e4a:	4b0b      	ldr	r3, [pc, #44]	@ (8000e78 <LoopForever+0xe>)
  adds r2, r0, r1
 8000e4c:	1842      	adds	r2, r0, r1
  cmp r2, r3
 8000e4e:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8000e50:	d3f6      	bcc.n	8000e40 <CopyDataInit>
  ldr r2, =_sbss
 8000e52:	4a0a      	ldr	r2, [pc, #40]	@ (8000e7c <LoopForever+0x12>)
  b LoopFillZerobss
 8000e54:	e002      	b.n	8000e5c <LoopFillZerobss>

08000e56 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 8000e56:	2300      	movs	r3, #0
  str  r3, [r2]
 8000e58:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000e5a:	3204      	adds	r2, #4

08000e5c <LoopFillZerobss>:


LoopFillZerobss:
  ldr r3, = _ebss
 8000e5c:	4b08      	ldr	r3, [pc, #32]	@ (8000e80 <LoopForever+0x16>)
  cmp r2, r3
 8000e5e:	429a      	cmp	r2, r3
  bcc FillZerobss
 8000e60:	d3f9      	bcc.n	8000e56 <FillZerobss>


/* Call static constructors */
  bl __libc_init_array
 8000e62:	f002 fbbf 	bl	80035e4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000e66:	f7ff fd13 	bl	8000890 <main>

08000e6a <LoopForever>:

LoopForever:
    b LoopForever
 8000e6a:	e7fe      	b.n	8000e6a <LoopForever>
  ldr   r0, =_estack
 8000e6c:	20007800 	.word	0x20007800
  ldr r3, =_sidata
 8000e70:	080041a0 	.word	0x080041a0
  ldr r0, =_sdata
 8000e74:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8000e78:	20000070 	.word	0x20000070
  ldr r2, =_sbss
 8000e7c:	20000070 	.word	0x20000070
  ldr r3, = _ebss
 8000e80:	20000440 	.word	0x20000440

08000e84 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000e84:	e7fe      	b.n	8000e84 <ADC1_IRQHandler>

08000e86 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000e86:	b580      	push	{r7, lr}
 8000e88:	b082      	sub	sp, #8
 8000e8a:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000e8c:	1dfb      	adds	r3, r7, #7
 8000e8e:	2200      	movs	r2, #0
 8000e90:	701a      	strb	r2, [r3, #0]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000e92:	2003      	movs	r0, #3
 8000e94:	f000 f80e 	bl	8000eb4 <HAL_InitTick>
 8000e98:	1e03      	subs	r3, r0, #0
 8000e9a:	d003      	beq.n	8000ea4 <HAL_Init+0x1e>
  {
    status = HAL_ERROR;
 8000e9c:	1dfb      	adds	r3, r7, #7
 8000e9e:	2201      	movs	r2, #1
 8000ea0:	701a      	strb	r2, [r3, #0]
 8000ea2:	e001      	b.n	8000ea8 <HAL_Init+0x22>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000ea4:	f7ff fe5c 	bl	8000b60 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000ea8:	1dfb      	adds	r3, r7, #7
 8000eaa:	781b      	ldrb	r3, [r3, #0]
}
 8000eac:	0018      	movs	r0, r3
 8000eae:	46bd      	mov	sp, r7
 8000eb0:	b002      	add	sp, #8
 8000eb2:	bd80      	pop	{r7, pc}

08000eb4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000eb4:	b590      	push	{r4, r7, lr}
 8000eb6:	b085      	sub	sp, #20
 8000eb8:	af00      	add	r7, sp, #0
 8000eba:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000ebc:	230f      	movs	r3, #15
 8000ebe:	18fb      	adds	r3, r7, r3
 8000ec0:	2200      	movs	r2, #0
 8000ec2:	701a      	strb	r2, [r3, #0]

  if ((uint32_t)uwTickFreq != 0UL)
 8000ec4:	4b1d      	ldr	r3, [pc, #116]	@ (8000f3c <HAL_InitTick+0x88>)
 8000ec6:	781b      	ldrb	r3, [r3, #0]
 8000ec8:	2b00      	cmp	r3, #0
 8000eca:	d02b      	beq.n	8000f24 <HAL_InitTick+0x70>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) == 0U)
 8000ecc:	4b1c      	ldr	r3, [pc, #112]	@ (8000f40 <HAL_InitTick+0x8c>)
 8000ece:	681c      	ldr	r4, [r3, #0]
 8000ed0:	4b1a      	ldr	r3, [pc, #104]	@ (8000f3c <HAL_InitTick+0x88>)
 8000ed2:	781b      	ldrb	r3, [r3, #0]
 8000ed4:	0019      	movs	r1, r3
 8000ed6:	23fa      	movs	r3, #250	@ 0xfa
 8000ed8:	0098      	lsls	r0, r3, #2
 8000eda:	f7ff f927 	bl	800012c <__udivsi3>
 8000ede:	0003      	movs	r3, r0
 8000ee0:	0019      	movs	r1, r3
 8000ee2:	0020      	movs	r0, r4
 8000ee4:	f7ff f922 	bl	800012c <__udivsi3>
 8000ee8:	0003      	movs	r3, r0
 8000eea:	0018      	movs	r0, r3
 8000eec:	f000 f93d 	bl	800116a <HAL_SYSTICK_Config>
 8000ef0:	1e03      	subs	r3, r0, #0
 8000ef2:	d112      	bne.n	8000f1a <HAL_InitTick+0x66>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000ef4:	687b      	ldr	r3, [r7, #4]
 8000ef6:	2b03      	cmp	r3, #3
 8000ef8:	d80a      	bhi.n	8000f10 <HAL_InitTick+0x5c>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000efa:	6879      	ldr	r1, [r7, #4]
 8000efc:	2301      	movs	r3, #1
 8000efe:	425b      	negs	r3, r3
 8000f00:	2200      	movs	r2, #0
 8000f02:	0018      	movs	r0, r3
 8000f04:	f000 f90c 	bl	8001120 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000f08:	4b0e      	ldr	r3, [pc, #56]	@ (8000f44 <HAL_InitTick+0x90>)
 8000f0a:	687a      	ldr	r2, [r7, #4]
 8000f0c:	601a      	str	r2, [r3, #0]
 8000f0e:	e00d      	b.n	8000f2c <HAL_InitTick+0x78>
      }
      else
      {
        status = HAL_ERROR;
 8000f10:	230f      	movs	r3, #15
 8000f12:	18fb      	adds	r3, r7, r3
 8000f14:	2201      	movs	r2, #1
 8000f16:	701a      	strb	r2, [r3, #0]
 8000f18:	e008      	b.n	8000f2c <HAL_InitTick+0x78>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000f1a:	230f      	movs	r3, #15
 8000f1c:	18fb      	adds	r3, r7, r3
 8000f1e:	2201      	movs	r2, #1
 8000f20:	701a      	strb	r2, [r3, #0]
 8000f22:	e003      	b.n	8000f2c <HAL_InitTick+0x78>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000f24:	230f      	movs	r3, #15
 8000f26:	18fb      	adds	r3, r7, r3
 8000f28:	2201      	movs	r2, #1
 8000f2a:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 8000f2c:	230f      	movs	r3, #15
 8000f2e:	18fb      	adds	r3, r7, r3
 8000f30:	781b      	ldrb	r3, [r3, #0]
}
 8000f32:	0018      	movs	r0, r3
 8000f34:	46bd      	mov	sp, r7
 8000f36:	b005      	add	sp, #20
 8000f38:	bd90      	pop	{r4, r7, pc}
 8000f3a:	46c0      	nop			@ (mov r8, r8)
 8000f3c:	20000010 	.word	0x20000010
 8000f40:	20000008 	.word	0x20000008
 8000f44:	2000000c 	.word	0x2000000c

08000f48 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000f48:	b580      	push	{r7, lr}
 8000f4a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000f4c:	4b05      	ldr	r3, [pc, #20]	@ (8000f64 <HAL_IncTick+0x1c>)
 8000f4e:	781b      	ldrb	r3, [r3, #0]
 8000f50:	001a      	movs	r2, r3
 8000f52:	4b05      	ldr	r3, [pc, #20]	@ (8000f68 <HAL_IncTick+0x20>)
 8000f54:	681b      	ldr	r3, [r3, #0]
 8000f56:	18d2      	adds	r2, r2, r3
 8000f58:	4b03      	ldr	r3, [pc, #12]	@ (8000f68 <HAL_IncTick+0x20>)
 8000f5a:	601a      	str	r2, [r3, #0]
}
 8000f5c:	46c0      	nop			@ (mov r8, r8)
 8000f5e:	46bd      	mov	sp, r7
 8000f60:	bd80      	pop	{r7, pc}
 8000f62:	46c0      	nop			@ (mov r8, r8)
 8000f64:	20000010 	.word	0x20000010
 8000f68:	200002f0 	.word	0x200002f0

08000f6c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000f6c:	b580      	push	{r7, lr}
 8000f6e:	af00      	add	r7, sp, #0
  return uwTick;
 8000f70:	4b02      	ldr	r3, [pc, #8]	@ (8000f7c <HAL_GetTick+0x10>)
 8000f72:	681b      	ldr	r3, [r3, #0]
}
 8000f74:	0018      	movs	r0, r3
 8000f76:	46bd      	mov	sp, r7
 8000f78:	bd80      	pop	{r7, pc}
 8000f7a:	46c0      	nop			@ (mov r8, r8)
 8000f7c:	200002f0 	.word	0x200002f0

08000f80 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000f80:	b580      	push	{r7, lr}
 8000f82:	b084      	sub	sp, #16
 8000f84:	af00      	add	r7, sp, #0
 8000f86:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000f88:	f7ff fff0 	bl	8000f6c <HAL_GetTick>
 8000f8c:	0003      	movs	r3, r0
 8000f8e:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8000f90:	687b      	ldr	r3, [r7, #4]
 8000f92:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000f94:	68fb      	ldr	r3, [r7, #12]
 8000f96:	3301      	adds	r3, #1
 8000f98:	d005      	beq.n	8000fa6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000f9a:	4b0a      	ldr	r3, [pc, #40]	@ (8000fc4 <HAL_Delay+0x44>)
 8000f9c:	781b      	ldrb	r3, [r3, #0]
 8000f9e:	001a      	movs	r2, r3
 8000fa0:	68fb      	ldr	r3, [r7, #12]
 8000fa2:	189b      	adds	r3, r3, r2
 8000fa4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000fa6:	46c0      	nop			@ (mov r8, r8)
 8000fa8:	f7ff ffe0 	bl	8000f6c <HAL_GetTick>
 8000fac:	0002      	movs	r2, r0
 8000fae:	68bb      	ldr	r3, [r7, #8]
 8000fb0:	1ad3      	subs	r3, r2, r3
 8000fb2:	68fa      	ldr	r2, [r7, #12]
 8000fb4:	429a      	cmp	r2, r3
 8000fb6:	d8f7      	bhi.n	8000fa8 <HAL_Delay+0x28>
  {
  }
}
 8000fb8:	46c0      	nop			@ (mov r8, r8)
 8000fba:	46c0      	nop			@ (mov r8, r8)
 8000fbc:	46bd      	mov	sp, r7
 8000fbe:	b004      	add	sp, #16
 8000fc0:	bd80      	pop	{r7, pc}
 8000fc2:	46c0      	nop			@ (mov r8, r8)
 8000fc4:	20000010 	.word	0x20000010

08000fc8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000fc8:	b580      	push	{r7, lr}
 8000fca:	b082      	sub	sp, #8
 8000fcc:	af00      	add	r7, sp, #0
 8000fce:	0002      	movs	r2, r0
 8000fd0:	1dfb      	adds	r3, r7, #7
 8000fd2:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000fd4:	1dfb      	adds	r3, r7, #7
 8000fd6:	781b      	ldrb	r3, [r3, #0]
 8000fd8:	2b7f      	cmp	r3, #127	@ 0x7f
 8000fda:	d809      	bhi.n	8000ff0 <__NVIC_EnableIRQ+0x28>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000fdc:	1dfb      	adds	r3, r7, #7
 8000fde:	781b      	ldrb	r3, [r3, #0]
 8000fe0:	001a      	movs	r2, r3
 8000fe2:	231f      	movs	r3, #31
 8000fe4:	401a      	ands	r2, r3
 8000fe6:	4b04      	ldr	r3, [pc, #16]	@ (8000ff8 <__NVIC_EnableIRQ+0x30>)
 8000fe8:	2101      	movs	r1, #1
 8000fea:	4091      	lsls	r1, r2
 8000fec:	000a      	movs	r2, r1
 8000fee:	601a      	str	r2, [r3, #0]
    __COMPILER_BARRIER();
  }
}
 8000ff0:	46c0      	nop			@ (mov r8, r8)
 8000ff2:	46bd      	mov	sp, r7
 8000ff4:	b002      	add	sp, #8
 8000ff6:	bd80      	pop	{r7, pc}
 8000ff8:	e000e100 	.word	0xe000e100

08000ffc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000ffc:	b590      	push	{r4, r7, lr}
 8000ffe:	b083      	sub	sp, #12
 8001000:	af00      	add	r7, sp, #0
 8001002:	0002      	movs	r2, r0
 8001004:	6039      	str	r1, [r7, #0]
 8001006:	1dfb      	adds	r3, r7, #7
 8001008:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 800100a:	1dfb      	adds	r3, r7, #7
 800100c:	781b      	ldrb	r3, [r3, #0]
 800100e:	2b7f      	cmp	r3, #127	@ 0x7f
 8001010:	d828      	bhi.n	8001064 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001012:	4a2f      	ldr	r2, [pc, #188]	@ (80010d0 <__NVIC_SetPriority+0xd4>)
 8001014:	1dfb      	adds	r3, r7, #7
 8001016:	781b      	ldrb	r3, [r3, #0]
 8001018:	b25b      	sxtb	r3, r3
 800101a:	089b      	lsrs	r3, r3, #2
 800101c:	33c0      	adds	r3, #192	@ 0xc0
 800101e:	009b      	lsls	r3, r3, #2
 8001020:	589b      	ldr	r3, [r3, r2]
 8001022:	1dfa      	adds	r2, r7, #7
 8001024:	7812      	ldrb	r2, [r2, #0]
 8001026:	0011      	movs	r1, r2
 8001028:	2203      	movs	r2, #3
 800102a:	400a      	ands	r2, r1
 800102c:	00d2      	lsls	r2, r2, #3
 800102e:	21ff      	movs	r1, #255	@ 0xff
 8001030:	4091      	lsls	r1, r2
 8001032:	000a      	movs	r2, r1
 8001034:	43d2      	mvns	r2, r2
 8001036:	401a      	ands	r2, r3
 8001038:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800103a:	683b      	ldr	r3, [r7, #0]
 800103c:	019b      	lsls	r3, r3, #6
 800103e:	22ff      	movs	r2, #255	@ 0xff
 8001040:	401a      	ands	r2, r3
 8001042:	1dfb      	adds	r3, r7, #7
 8001044:	781b      	ldrb	r3, [r3, #0]
 8001046:	0018      	movs	r0, r3
 8001048:	2303      	movs	r3, #3
 800104a:	4003      	ands	r3, r0
 800104c:	00db      	lsls	r3, r3, #3
 800104e:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001050:	481f      	ldr	r0, [pc, #124]	@ (80010d0 <__NVIC_SetPriority+0xd4>)
 8001052:	1dfb      	adds	r3, r7, #7
 8001054:	781b      	ldrb	r3, [r3, #0]
 8001056:	b25b      	sxtb	r3, r3
 8001058:	089b      	lsrs	r3, r3, #2
 800105a:	430a      	orrs	r2, r1
 800105c:	33c0      	adds	r3, #192	@ 0xc0
 800105e:	009b      	lsls	r3, r3, #2
 8001060:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8001062:	e031      	b.n	80010c8 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001064:	4a1b      	ldr	r2, [pc, #108]	@ (80010d4 <__NVIC_SetPriority+0xd8>)
 8001066:	1dfb      	adds	r3, r7, #7
 8001068:	781b      	ldrb	r3, [r3, #0]
 800106a:	0019      	movs	r1, r3
 800106c:	230f      	movs	r3, #15
 800106e:	400b      	ands	r3, r1
 8001070:	3b08      	subs	r3, #8
 8001072:	089b      	lsrs	r3, r3, #2
 8001074:	3306      	adds	r3, #6
 8001076:	009b      	lsls	r3, r3, #2
 8001078:	18d3      	adds	r3, r2, r3
 800107a:	3304      	adds	r3, #4
 800107c:	681b      	ldr	r3, [r3, #0]
 800107e:	1dfa      	adds	r2, r7, #7
 8001080:	7812      	ldrb	r2, [r2, #0]
 8001082:	0011      	movs	r1, r2
 8001084:	2203      	movs	r2, #3
 8001086:	400a      	ands	r2, r1
 8001088:	00d2      	lsls	r2, r2, #3
 800108a:	21ff      	movs	r1, #255	@ 0xff
 800108c:	4091      	lsls	r1, r2
 800108e:	000a      	movs	r2, r1
 8001090:	43d2      	mvns	r2, r2
 8001092:	401a      	ands	r2, r3
 8001094:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8001096:	683b      	ldr	r3, [r7, #0]
 8001098:	019b      	lsls	r3, r3, #6
 800109a:	22ff      	movs	r2, #255	@ 0xff
 800109c:	401a      	ands	r2, r3
 800109e:	1dfb      	adds	r3, r7, #7
 80010a0:	781b      	ldrb	r3, [r3, #0]
 80010a2:	0018      	movs	r0, r3
 80010a4:	2303      	movs	r3, #3
 80010a6:	4003      	ands	r3, r0
 80010a8:	00db      	lsls	r3, r3, #3
 80010aa:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80010ac:	4809      	ldr	r0, [pc, #36]	@ (80010d4 <__NVIC_SetPriority+0xd8>)
 80010ae:	1dfb      	adds	r3, r7, #7
 80010b0:	781b      	ldrb	r3, [r3, #0]
 80010b2:	001c      	movs	r4, r3
 80010b4:	230f      	movs	r3, #15
 80010b6:	4023      	ands	r3, r4
 80010b8:	3b08      	subs	r3, #8
 80010ba:	089b      	lsrs	r3, r3, #2
 80010bc:	430a      	orrs	r2, r1
 80010be:	3306      	adds	r3, #6
 80010c0:	009b      	lsls	r3, r3, #2
 80010c2:	18c3      	adds	r3, r0, r3
 80010c4:	3304      	adds	r3, #4
 80010c6:	601a      	str	r2, [r3, #0]
}
 80010c8:	46c0      	nop			@ (mov r8, r8)
 80010ca:	46bd      	mov	sp, r7
 80010cc:	b003      	add	sp, #12
 80010ce:	bd90      	pop	{r4, r7, pc}
 80010d0:	e000e100 	.word	0xe000e100
 80010d4:	e000ed00 	.word	0xe000ed00

080010d8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80010d8:	b580      	push	{r7, lr}
 80010da:	b082      	sub	sp, #8
 80010dc:	af00      	add	r7, sp, #0
 80010de:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80010e0:	687b      	ldr	r3, [r7, #4]
 80010e2:	1e5a      	subs	r2, r3, #1
 80010e4:	2380      	movs	r3, #128	@ 0x80
 80010e6:	045b      	lsls	r3, r3, #17
 80010e8:	429a      	cmp	r2, r3
 80010ea:	d301      	bcc.n	80010f0 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 80010ec:	2301      	movs	r3, #1
 80010ee:	e010      	b.n	8001112 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80010f0:	4b0a      	ldr	r3, [pc, #40]	@ (800111c <SysTick_Config+0x44>)
 80010f2:	687a      	ldr	r2, [r7, #4]
 80010f4:	3a01      	subs	r2, #1
 80010f6:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80010f8:	2301      	movs	r3, #1
 80010fa:	425b      	negs	r3, r3
 80010fc:	2103      	movs	r1, #3
 80010fe:	0018      	movs	r0, r3
 8001100:	f7ff ff7c 	bl	8000ffc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001104:	4b05      	ldr	r3, [pc, #20]	@ (800111c <SysTick_Config+0x44>)
 8001106:	2200      	movs	r2, #0
 8001108:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800110a:	4b04      	ldr	r3, [pc, #16]	@ (800111c <SysTick_Config+0x44>)
 800110c:	2207      	movs	r2, #7
 800110e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001110:	2300      	movs	r3, #0
}
 8001112:	0018      	movs	r0, r3
 8001114:	46bd      	mov	sp, r7
 8001116:	b002      	add	sp, #8
 8001118:	bd80      	pop	{r7, pc}
 800111a:	46c0      	nop			@ (mov r8, r8)
 800111c:	e000e010 	.word	0xe000e010

08001120 <HAL_NVIC_SetPriority>:
  *         with stm32c0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001120:	b580      	push	{r7, lr}
 8001122:	b084      	sub	sp, #16
 8001124:	af00      	add	r7, sp, #0
 8001126:	60b9      	str	r1, [r7, #8]
 8001128:	607a      	str	r2, [r7, #4]
 800112a:	210f      	movs	r1, #15
 800112c:	187b      	adds	r3, r7, r1
 800112e:	1c02      	adds	r2, r0, #0
 8001130:	701a      	strb	r2, [r3, #0]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn, PreemptPriority);
 8001132:	68ba      	ldr	r2, [r7, #8]
 8001134:	187b      	adds	r3, r7, r1
 8001136:	781b      	ldrb	r3, [r3, #0]
 8001138:	b25b      	sxtb	r3, r3
 800113a:	0011      	movs	r1, r2
 800113c:	0018      	movs	r0, r3
 800113e:	f7ff ff5d 	bl	8000ffc <__NVIC_SetPriority>
}
 8001142:	46c0      	nop			@ (mov r8, r8)
 8001144:	46bd      	mov	sp, r7
 8001146:	b004      	add	sp, #16
 8001148:	bd80      	pop	{r7, pc}

0800114a <HAL_NVIC_EnableIRQ>:
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate
  *         CMSIS device file (stm32c0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800114a:	b580      	push	{r7, lr}
 800114c:	b082      	sub	sp, #8
 800114e:	af00      	add	r7, sp, #0
 8001150:	0002      	movs	r2, r0
 8001152:	1dfb      	adds	r3, r7, #7
 8001154:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001156:	1dfb      	adds	r3, r7, #7
 8001158:	781b      	ldrb	r3, [r3, #0]
 800115a:	b25b      	sxtb	r3, r3
 800115c:	0018      	movs	r0, r3
 800115e:	f7ff ff33 	bl	8000fc8 <__NVIC_EnableIRQ>
}
 8001162:	46c0      	nop			@ (mov r8, r8)
 8001164:	46bd      	mov	sp, r7
 8001166:	b002      	add	sp, #8
 8001168:	bd80      	pop	{r7, pc}

0800116a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800116a:	b580      	push	{r7, lr}
 800116c:	b082      	sub	sp, #8
 800116e:	af00      	add	r7, sp, #0
 8001170:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 8001172:	687b      	ldr	r3, [r7, #4]
 8001174:	0018      	movs	r0, r3
 8001176:	f7ff ffaf 	bl	80010d8 <SysTick_Config>
 800117a:	0003      	movs	r3, r0
}
 800117c:	0018      	movs	r0, r3
 800117e:	46bd      	mov	sp, r7
 8001180:	b002      	add	sp, #8
 8001182:	bd80      	pop	{r7, pc}

08001184 <HAL_DMA_Init>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001184:	b580      	push	{r7, lr}
 8001186:	b082      	sub	sp, #8
 8001188:	af00      	add	r7, sp, #0
 800118a:	6078      	str	r0, [r7, #4]
  /* Check the DMA handle allocation */
  if (hdma == NULL)
 800118c:	687b      	ldr	r3, [r7, #4]
 800118e:	2b00      	cmp	r3, #0
 8001190:	d101      	bne.n	8001196 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8001192:	2301      	movs	r3, #1
 8001194:	e077      	b.n	8001286 <HAL_DMA_Init+0x102>
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  /* calculation of the channel index */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - \
 8001196:	687b      	ldr	r3, [r7, #4]
 8001198:	681b      	ldr	r3, [r3, #0]
 800119a:	4a3d      	ldr	r2, [pc, #244]	@ (8001290 <HAL_DMA_Init+0x10c>)
 800119c:	4694      	mov	ip, r2
 800119e:	4463      	add	r3, ip
 80011a0:	2114      	movs	r1, #20
 80011a2:	0018      	movs	r0, r3
 80011a4:	f7fe ffc2 	bl	800012c <__udivsi3>
 80011a8:	0003      	movs	r3, r0
                                                                                (uint32_t)DMA1_Channel1)) << 2U;
 80011aa:	009a      	lsls	r2, r3, #2
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - \
 80011ac:	687b      	ldr	r3, [r7, #4]
 80011ae:	641a      	str	r2, [r3, #64]	@ 0x40
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80011b0:	687b      	ldr	r3, [r7, #4]
 80011b2:	2225      	movs	r2, #37	@ 0x25
 80011b4:	2102      	movs	r1, #2
 80011b6:	5499      	strb	r1, [r3, r2]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  CLEAR_BIT(hdma->Instance->CCR, (DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 80011b8:	687b      	ldr	r3, [r7, #4]
 80011ba:	681b      	ldr	r3, [r3, #0]
 80011bc:	681a      	ldr	r2, [r3, #0]
 80011be:	687b      	ldr	r3, [r7, #4]
 80011c0:	681b      	ldr	r3, [r3, #0]
 80011c2:	4934      	ldr	r1, [pc, #208]	@ (8001294 <HAL_DMA_Init+0x110>)
 80011c4:	400a      	ands	r2, r1
 80011c6:	601a      	str	r2, [r3, #0]
                                  DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                                  DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Set the DMA Channel configuration */
  SET_BIT(hdma->Instance->CCR, (hdma->Init.Direction           |                               \
 80011c8:	687b      	ldr	r3, [r7, #4]
 80011ca:	681b      	ldr	r3, [r3, #0]
 80011cc:	6819      	ldr	r1, [r3, #0]
 80011ce:	687b      	ldr	r3, [r7, #4]
 80011d0:	689a      	ldr	r2, [r3, #8]
 80011d2:	687b      	ldr	r3, [r7, #4]
 80011d4:	68db      	ldr	r3, [r3, #12]
 80011d6:	431a      	orrs	r2, r3
 80011d8:	687b      	ldr	r3, [r7, #4]
 80011da:	691b      	ldr	r3, [r3, #16]
 80011dc:	431a      	orrs	r2, r3
 80011de:	687b      	ldr	r3, [r7, #4]
 80011e0:	695b      	ldr	r3, [r3, #20]
 80011e2:	431a      	orrs	r2, r3
 80011e4:	687b      	ldr	r3, [r7, #4]
 80011e6:	699b      	ldr	r3, [r3, #24]
 80011e8:	431a      	orrs	r2, r3
 80011ea:	687b      	ldr	r3, [r7, #4]
 80011ec:	69db      	ldr	r3, [r3, #28]
 80011ee:	431a      	orrs	r2, r3
 80011f0:	687b      	ldr	r3, [r7, #4]
 80011f2:	6a1b      	ldr	r3, [r3, #32]
 80011f4:	431a      	orrs	r2, r3
 80011f6:	687b      	ldr	r3, [r7, #4]
 80011f8:	681b      	ldr	r3, [r3, #0]
 80011fa:	430a      	orrs	r2, r1
 80011fc:	601a      	str	r2, [r3, #0]
                                hdma->Init.Mode                | hdma->Init.Priority));

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 80011fe:	687b      	ldr	r3, [r7, #4]
 8001200:	0018      	movs	r0, r3
 8001202:	f000 fa2f 	bl	8001664 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8001206:	687b      	ldr	r3, [r7, #4]
 8001208:	689a      	ldr	r2, [r3, #8]
 800120a:	2380      	movs	r3, #128	@ 0x80
 800120c:	01db      	lsls	r3, r3, #7
 800120e:	429a      	cmp	r2, r3
 8001210:	d102      	bne.n	8001218 <HAL_DMA_Init+0x94>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8001212:	687b      	ldr	r3, [r7, #4]
 8001214:	2200      	movs	r2, #0
 8001216:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8001218:	687b      	ldr	r3, [r7, #4]
 800121a:	685a      	ldr	r2, [r3, #4]
 800121c:	687b      	ldr	r3, [r7, #4]
 800121e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001220:	21ff      	movs	r1, #255	@ 0xff
 8001222:	400a      	ands	r2, r1
 8001224:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001226:	687b      	ldr	r3, [r7, #4]
 8001228:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800122a:	687a      	ldr	r2, [r7, #4]
 800122c:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 800122e:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request > 0UL) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8001230:	687b      	ldr	r3, [r7, #4]
 8001232:	685b      	ldr	r3, [r3, #4]
 8001234:	2b00      	cmp	r3, #0
 8001236:	d011      	beq.n	800125c <HAL_DMA_Init+0xd8>
 8001238:	687b      	ldr	r3, [r7, #4]
 800123a:	685b      	ldr	r3, [r3, #4]
 800123c:	2b04      	cmp	r3, #4
 800123e:	d80d      	bhi.n	800125c <HAL_DMA_Init+0xd8>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	0018      	movs	r0, r3
 8001244:	f000 fa3a 	bl	80016bc <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8001248:	687b      	ldr	r3, [r7, #4]
 800124a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800124c:	2200      	movs	r2, #0
 800124e:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001250:	687b      	ldr	r3, [r7, #4]
 8001252:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001254:	687a      	ldr	r2, [r7, #4]
 8001256:	6d92      	ldr	r2, [r2, #88]	@ 0x58
 8001258:	605a      	str	r2, [r3, #4]
 800125a:	e008      	b.n	800126e <HAL_DMA_Init+0xea>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 800125c:	687b      	ldr	r3, [r7, #4]
 800125e:	2200      	movs	r2, #0
 8001260:	651a      	str	r2, [r3, #80]	@ 0x50
    hdma->DMAmuxRequestGenStatus = 0U;
 8001262:	687b      	ldr	r3, [r7, #4]
 8001264:	2200      	movs	r2, #0
 8001266:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8001268:	687b      	ldr	r3, [r7, #4]
 800126a:	2200      	movs	r2, #0
 800126c:	659a      	str	r2, [r3, #88]	@ 0x58
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800126e:	687b      	ldr	r3, [r7, #4]
 8001270:	2200      	movs	r2, #0
 8001272:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 8001274:	687b      	ldr	r3, [r7, #4]
 8001276:	2225      	movs	r2, #37	@ 0x25
 8001278:	2101      	movs	r1, #1
 800127a:	5499      	strb	r1, [r3, r2]

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 800127c:	687b      	ldr	r3, [r7, #4]
 800127e:	2224      	movs	r2, #36	@ 0x24
 8001280:	2100      	movs	r1, #0
 8001282:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8001284:	2300      	movs	r3, #0
}
 8001286:	0018      	movs	r0, r3
 8001288:	46bd      	mov	sp, r7
 800128a:	b002      	add	sp, #8
 800128c:	bd80      	pop	{r7, pc}
 800128e:	46c0      	nop			@ (mov r8, r8)
 8001290:	bffdfff8 	.word	0xbffdfff8
 8001294:	ffff800f 	.word	0xffff800f

08001298 <HAL_DMA_Start_IT>:
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 8001298:	b580      	push	{r7, lr}
 800129a:	b086      	sub	sp, #24
 800129c:	af00      	add	r7, sp, #0
 800129e:	60f8      	str	r0, [r7, #12]
 80012a0:	60b9      	str	r1, [r7, #8]
 80012a2:	607a      	str	r2, [r7, #4]
 80012a4:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80012a6:	2317      	movs	r3, #23
 80012a8:	18fb      	adds	r3, r7, r3
 80012aa:	2200      	movs	r2, #0
 80012ac:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 80012ae:	68fb      	ldr	r3, [r7, #12]
 80012b0:	2224      	movs	r2, #36	@ 0x24
 80012b2:	5c9b      	ldrb	r3, [r3, r2]
 80012b4:	2b01      	cmp	r3, #1
 80012b6:	d101      	bne.n	80012bc <HAL_DMA_Start_IT+0x24>
 80012b8:	2302      	movs	r3, #2
 80012ba:	e070      	b.n	800139e <HAL_DMA_Start_IT+0x106>
 80012bc:	68fb      	ldr	r3, [r7, #12]
 80012be:	2224      	movs	r2, #36	@ 0x24
 80012c0:	2101      	movs	r1, #1
 80012c2:	5499      	strb	r1, [r3, r2]

  if (HAL_DMA_STATE_READY == hdma->State)
 80012c4:	68fb      	ldr	r3, [r7, #12]
 80012c6:	2225      	movs	r2, #37	@ 0x25
 80012c8:	5c9b      	ldrb	r3, [r3, r2]
 80012ca:	b2db      	uxtb	r3, r3
 80012cc:	2b01      	cmp	r3, #1
 80012ce:	d157      	bne.n	8001380 <HAL_DMA_Start_IT+0xe8>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80012d0:	68fb      	ldr	r3, [r7, #12]
 80012d2:	2225      	movs	r2, #37	@ 0x25
 80012d4:	2102      	movs	r1, #2
 80012d6:	5499      	strb	r1, [r3, r2]
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80012d8:	68fb      	ldr	r3, [r7, #12]
 80012da:	2200      	movs	r2, #0
 80012dc:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80012de:	68fb      	ldr	r3, [r7, #12]
 80012e0:	681b      	ldr	r3, [r3, #0]
 80012e2:	681a      	ldr	r2, [r3, #0]
 80012e4:	68fb      	ldr	r3, [r7, #12]
 80012e6:	681b      	ldr	r3, [r3, #0]
 80012e8:	2101      	movs	r1, #1
 80012ea:	438a      	bics	r2, r1
 80012ec:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80012ee:	683b      	ldr	r3, [r7, #0]
 80012f0:	687a      	ldr	r2, [r7, #4]
 80012f2:	68b9      	ldr	r1, [r7, #8]
 80012f4:	68f8      	ldr	r0, [r7, #12]
 80012f6:	f000 f975 	bl	80015e4 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 80012fa:	68fb      	ldr	r3, [r7, #12]
 80012fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80012fe:	2b00      	cmp	r3, #0
 8001300:	d008      	beq.n	8001314 <HAL_DMA_Start_IT+0x7c>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001302:	68fb      	ldr	r3, [r7, #12]
 8001304:	681b      	ldr	r3, [r3, #0]
 8001306:	681a      	ldr	r2, [r3, #0]
 8001308:	68fb      	ldr	r3, [r7, #12]
 800130a:	681b      	ldr	r3, [r3, #0]
 800130c:	210e      	movs	r1, #14
 800130e:	430a      	orrs	r2, r1
 8001310:	601a      	str	r2, [r3, #0]
 8001312:	e00f      	b.n	8001334 <HAL_DMA_Start_IT+0x9c>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001314:	68fb      	ldr	r3, [r7, #12]
 8001316:	681b      	ldr	r3, [r3, #0]
 8001318:	681a      	ldr	r2, [r3, #0]
 800131a:	68fb      	ldr	r3, [r7, #12]
 800131c:	681b      	ldr	r3, [r3, #0]
 800131e:	2104      	movs	r1, #4
 8001320:	438a      	bics	r2, r1
 8001322:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8001324:	68fb      	ldr	r3, [r7, #12]
 8001326:	681b      	ldr	r3, [r3, #0]
 8001328:	681a      	ldr	r2, [r3, #0]
 800132a:	68fb      	ldr	r3, [r7, #12]
 800132c:	681b      	ldr	r3, [r3, #0]
 800132e:	210a      	movs	r1, #10
 8001330:	430a      	orrs	r2, r1
 8001332:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8001334:	68fb      	ldr	r3, [r7, #12]
 8001336:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001338:	681a      	ldr	r2, [r3, #0]
 800133a:	2380      	movs	r3, #128	@ 0x80
 800133c:	025b      	lsls	r3, r3, #9
 800133e:	4013      	ands	r3, r2
 8001340:	d008      	beq.n	8001354 <HAL_DMA_Start_IT+0xbc>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8001342:	68fb      	ldr	r3, [r7, #12]
 8001344:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001346:	681a      	ldr	r2, [r3, #0]
 8001348:	68fb      	ldr	r3, [r7, #12]
 800134a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800134c:	2180      	movs	r1, #128	@ 0x80
 800134e:	0049      	lsls	r1, r1, #1
 8001350:	430a      	orrs	r2, r1
 8001352:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 8001354:	68fb      	ldr	r3, [r7, #12]
 8001356:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001358:	2b00      	cmp	r3, #0
 800135a:	d008      	beq.n	800136e <HAL_DMA_Start_IT+0xd6>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 800135c:	68fb      	ldr	r3, [r7, #12]
 800135e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001360:	681a      	ldr	r2, [r3, #0]
 8001362:	68fb      	ldr	r3, [r7, #12]
 8001364:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001366:	2180      	movs	r1, #128	@ 0x80
 8001368:	0049      	lsls	r1, r1, #1
 800136a:	430a      	orrs	r2, r1
 800136c:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800136e:	68fb      	ldr	r3, [r7, #12]
 8001370:	681b      	ldr	r3, [r3, #0]
 8001372:	681a      	ldr	r2, [r3, #0]
 8001374:	68fb      	ldr	r3, [r7, #12]
 8001376:	681b      	ldr	r3, [r3, #0]
 8001378:	2101      	movs	r1, #1
 800137a:	430a      	orrs	r2, r1
 800137c:	601a      	str	r2, [r3, #0]
 800137e:	e007      	b.n	8001390 <HAL_DMA_Start_IT+0xf8>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001380:	68fb      	ldr	r3, [r7, #12]
 8001382:	2224      	movs	r2, #36	@ 0x24
 8001384:	2100      	movs	r1, #0
 8001386:	5499      	strb	r1, [r3, r2]

    /* Remain BUSY */
    status = HAL_BUSY;
 8001388:	2317      	movs	r3, #23
 800138a:	18fb      	adds	r3, r7, r3
 800138c:	2202      	movs	r2, #2
 800138e:	701a      	strb	r2, [r3, #0]
  }

  /* Process unlocked */
  __HAL_UNLOCK(hdma);
 8001390:	68fb      	ldr	r3, [r7, #12]
 8001392:	2224      	movs	r2, #36	@ 0x24
 8001394:	2100      	movs	r1, #0
 8001396:	5499      	strb	r1, [r3, r2]

  return status;
 8001398:	2317      	movs	r3, #23
 800139a:	18fb      	adds	r3, r7, r3
 800139c:	781b      	ldrb	r3, [r3, #0]
}
 800139e:	0018      	movs	r0, r3
 80013a0:	46bd      	mov	sp, r7
 80013a2:	b006      	add	sp, #24
 80013a4:	bd80      	pop	{r7, pc}
	...

080013a8 <HAL_DMA_Abort>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80013a8:	b580      	push	{r7, lr}
 80013aa:	b082      	sub	sp, #8
 80013ac:	af00      	add	r7, sp, #0
 80013ae:	6078      	str	r0, [r7, #4]
  /* Check the DMA peripheral handle */
  if (NULL == hdma)
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	2b00      	cmp	r3, #0
 80013b4:	d101      	bne.n	80013ba <HAL_DMA_Abort+0x12>
  {
    return HAL_ERROR;
 80013b6:	2301      	movs	r3, #1
 80013b8:	e050      	b.n	800145c <HAL_DMA_Abort+0xb4>
  }

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	2225      	movs	r2, #37	@ 0x25
 80013be:	5c9b      	ldrb	r3, [r3, r2]
 80013c0:	b2db      	uxtb	r3, r3
 80013c2:	2b02      	cmp	r3, #2
 80013c4:	d008      	beq.n	80013d8 <HAL_DMA_Abort+0x30>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	2204      	movs	r2, #4
 80013ca:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	2224      	movs	r2, #36	@ 0x24
 80013d0:	2100      	movs	r1, #0
 80013d2:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 80013d4:	2301      	movs	r3, #1
 80013d6:	e041      	b.n	800145c <HAL_DMA_Abort+0xb4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	681b      	ldr	r3, [r3, #0]
 80013dc:	681a      	ldr	r2, [r3, #0]
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	681b      	ldr	r3, [r3, #0]
 80013e2:	210e      	movs	r1, #14
 80013e4:	438a      	bics	r2, r1
 80013e6:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80013ec:	681a      	ldr	r2, [r3, #0]
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80013f2:	491c      	ldr	r1, [pc, #112]	@ (8001464 <HAL_DMA_Abort+0xbc>)
 80013f4:	400a      	ands	r2, r1
 80013f6:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	681b      	ldr	r3, [r3, #0]
 80013fc:	681a      	ldr	r2, [r3, #0]
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	681b      	ldr	r3, [r3, #0]
 8001402:	2101      	movs	r1, #1
 8001404:	438a      	bics	r2, r1
 8001406:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, ((DMA_FLAG_GI1) << (hdma->ChannelIndex  & 0x1cU)));
 8001408:	4b17      	ldr	r3, [pc, #92]	@ (8001468 <HAL_DMA_Abort+0xc0>)
 800140a:	6859      	ldr	r1, [r3, #4]
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001410:	221c      	movs	r2, #28
 8001412:	4013      	ands	r3, r2
 8001414:	2201      	movs	r2, #1
 8001416:	409a      	lsls	r2, r3
 8001418:	4b13      	ldr	r3, [pc, #76]	@ (8001468 <HAL_DMA_Abort+0xc0>)
 800141a:	430a      	orrs	r2, r1
 800141c:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001422:	687a      	ldr	r2, [r7, #4]
 8001424:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 8001426:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800142c:	2b00      	cmp	r3, #0
 800142e:	d00c      	beq.n	800144a <HAL_DMA_Abort+0xa2>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001434:	681a      	ldr	r2, [r3, #0]
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800143a:	490a      	ldr	r1, [pc, #40]	@ (8001464 <HAL_DMA_Abort+0xbc>)
 800143c:	400a      	ands	r2, r1
 800143e:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001444:	687a      	ldr	r2, [r7, #4]
 8001446:	6d92      	ldr	r2, [r2, #88]	@ 0x58
 8001448:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	2225      	movs	r2, #37	@ 0x25
 800144e:	2101      	movs	r1, #1
 8001450:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001452:	687b      	ldr	r3, [r7, #4]
 8001454:	2224      	movs	r2, #36	@ 0x24
 8001456:	2100      	movs	r1, #0
 8001458:	5499      	strb	r1, [r3, r2]
  }

  return HAL_OK;
 800145a:	2300      	movs	r3, #0
}
 800145c:	0018      	movs	r0, r3
 800145e:	46bd      	mov	sp, r7
 8001460:	b002      	add	sp, #8
 8001462:	bd80      	pop	{r7, pc}
 8001464:	fffffeff 	.word	0xfffffeff
 8001468:	40020000 	.word	0x40020000

0800146c <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800146c:	b580      	push	{r7, lr}
 800146e:	b084      	sub	sp, #16
 8001470:	af00      	add	r7, sp, #0
 8001472:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = DMA1->ISR;
 8001474:	4b55      	ldr	r3, [pc, #340]	@ (80015cc <HAL_DMA_IRQHandler+0x160>)
 8001476:	681b      	ldr	r3, [r3, #0]
 8001478:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	681b      	ldr	r3, [r3, #0]
 800147e:	681b      	ldr	r3, [r3, #0]
 8001480:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1cU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001486:	221c      	movs	r2, #28
 8001488:	4013      	ands	r3, r2
 800148a:	2204      	movs	r2, #4
 800148c:	409a      	lsls	r2, r3
 800148e:	0013      	movs	r3, r2
 8001490:	68fa      	ldr	r2, [r7, #12]
 8001492:	4013      	ands	r3, r2
 8001494:	d027      	beq.n	80014e6 <HAL_DMA_IRQHandler+0x7a>
 8001496:	68bb      	ldr	r3, [r7, #8]
 8001498:	2204      	movs	r2, #4
 800149a:	4013      	ands	r3, r2
 800149c:	d023      	beq.n	80014e6 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	681b      	ldr	r3, [r3, #0]
 80014a2:	681b      	ldr	r3, [r3, #0]
 80014a4:	2220      	movs	r2, #32
 80014a6:	4013      	ands	r3, r2
 80014a8:	d107      	bne.n	80014ba <HAL_DMA_IRQHandler+0x4e>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	681b      	ldr	r3, [r3, #0]
 80014ae:	681a      	ldr	r2, [r3, #0]
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	681b      	ldr	r3, [r3, #0]
 80014b4:	2104      	movs	r1, #4
 80014b6:	438a      	bics	r2, r1
 80014b8:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1cU)));
 80014ba:	4b44      	ldr	r3, [pc, #272]	@ (80015cc <HAL_DMA_IRQHandler+0x160>)
 80014bc:	6859      	ldr	r1, [r3, #4]
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80014c2:	221c      	movs	r2, #28
 80014c4:	4013      	ands	r3, r2
 80014c6:	2204      	movs	r2, #4
 80014c8:	409a      	lsls	r2, r3
 80014ca:	4b40      	ldr	r3, [pc, #256]	@ (80015cc <HAL_DMA_IRQHandler+0x160>)
 80014cc:	430a      	orrs	r2, r1
 80014ce:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80014d4:	2b00      	cmp	r3, #0
 80014d6:	d100      	bne.n	80014da <HAL_DMA_IRQHandler+0x6e>
 80014d8:	e073      	b.n	80015c2 <HAL_DMA_IRQHandler+0x156>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80014de:	687a      	ldr	r2, [r7, #4]
 80014e0:	0010      	movs	r0, r2
 80014e2:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 80014e4:	e06d      	b.n	80015c2 <HAL_DMA_IRQHandler+0x156>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1cU)))) && (0U != (source_it & DMA_IT_TC)))
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80014ea:	221c      	movs	r2, #28
 80014ec:	4013      	ands	r3, r2
 80014ee:	2202      	movs	r2, #2
 80014f0:	409a      	lsls	r2, r3
 80014f2:	0013      	movs	r3, r2
 80014f4:	68fa      	ldr	r2, [r7, #12]
 80014f6:	4013      	ands	r3, r2
 80014f8:	d02e      	beq.n	8001558 <HAL_DMA_IRQHandler+0xec>
 80014fa:	68bb      	ldr	r3, [r7, #8]
 80014fc:	2202      	movs	r2, #2
 80014fe:	4013      	ands	r3, r2
 8001500:	d02a      	beq.n	8001558 <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	681b      	ldr	r3, [r3, #0]
 8001506:	681b      	ldr	r3, [r3, #0]
 8001508:	2220      	movs	r2, #32
 800150a:	4013      	ands	r3, r2
 800150c:	d10b      	bne.n	8001526 <HAL_DMA_IRQHandler+0xba>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	681b      	ldr	r3, [r3, #0]
 8001512:	681a      	ldr	r2, [r3, #0]
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	681b      	ldr	r3, [r3, #0]
 8001518:	210a      	movs	r1, #10
 800151a:	438a      	bics	r2, r1
 800151c:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	2225      	movs	r2, #37	@ 0x25
 8001522:	2101      	movs	r1, #1
 8001524:	5499      	strb	r1, [r3, r2]
    }
    /* Clear the transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1cU)));
 8001526:	4b29      	ldr	r3, [pc, #164]	@ (80015cc <HAL_DMA_IRQHandler+0x160>)
 8001528:	6859      	ldr	r1, [r3, #4]
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800152e:	221c      	movs	r2, #28
 8001530:	4013      	ands	r3, r2
 8001532:	2202      	movs	r2, #2
 8001534:	409a      	lsls	r2, r3
 8001536:	4b25      	ldr	r3, [pc, #148]	@ (80015cc <HAL_DMA_IRQHandler+0x160>)
 8001538:	430a      	orrs	r2, r1
 800153a:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	2224      	movs	r2, #36	@ 0x24
 8001540:	2100      	movs	r1, #0
 8001542:	5499      	strb	r1, [r3, r2]

    if (hdma->XferCpltCallback != NULL)
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001548:	2b00      	cmp	r3, #0
 800154a:	d03a      	beq.n	80015c2 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001550:	687a      	ldr	r2, [r7, #4]
 8001552:	0010      	movs	r0, r2
 8001554:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8001556:	e034      	b.n	80015c2 <HAL_DMA_IRQHandler+0x156>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1cU))) != 0U) && ((source_it & DMA_IT_TE) != 0U))
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800155c:	221c      	movs	r2, #28
 800155e:	4013      	ands	r3, r2
 8001560:	2208      	movs	r2, #8
 8001562:	409a      	lsls	r2, r3
 8001564:	0013      	movs	r3, r2
 8001566:	68fa      	ldr	r2, [r7, #12]
 8001568:	4013      	ands	r3, r2
 800156a:	d02b      	beq.n	80015c4 <HAL_DMA_IRQHandler+0x158>
 800156c:	68bb      	ldr	r3, [r7, #8]
 800156e:	2208      	movs	r2, #8
 8001570:	4013      	ands	r3, r2
 8001572:	d027      	beq.n	80015c4 <HAL_DMA_IRQHandler+0x158>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	681b      	ldr	r3, [r3, #0]
 8001578:	681a      	ldr	r2, [r3, #0]
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	681b      	ldr	r3, [r3, #0]
 800157e:	210e      	movs	r1, #14
 8001580:	438a      	bics	r2, r1
 8001582:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_GI1 << (hdma->ChannelIndex & 0x1cU)));
 8001584:	4b11      	ldr	r3, [pc, #68]	@ (80015cc <HAL_DMA_IRQHandler+0x160>)
 8001586:	6859      	ldr	r1, [r3, #4]
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800158c:	221c      	movs	r2, #28
 800158e:	4013      	ands	r3, r2
 8001590:	2201      	movs	r2, #1
 8001592:	409a      	lsls	r2, r3
 8001594:	4b0d      	ldr	r3, [pc, #52]	@ (80015cc <HAL_DMA_IRQHandler+0x160>)
 8001596:	430a      	orrs	r2, r1
 8001598:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	2201      	movs	r2, #1
 800159e:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	2225      	movs	r2, #37	@ 0x25
 80015a4:	2101      	movs	r1, #1
 80015a6:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	2224      	movs	r2, #36	@ 0x24
 80015ac:	2100      	movs	r1, #0
 80015ae:	5499      	strb	r1, [r3, r2]

    if (hdma->XferErrorCallback != NULL)
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80015b4:	2b00      	cmp	r3, #0
 80015b6:	d005      	beq.n	80015c4 <HAL_DMA_IRQHandler+0x158>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80015bc:	687a      	ldr	r2, [r7, #4]
 80015be:	0010      	movs	r0, r2
 80015c0:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 80015c2:	46c0      	nop			@ (mov r8, r8)
 80015c4:	46c0      	nop			@ (mov r8, r8)
}
 80015c6:	46bd      	mov	sp, r7
 80015c8:	b004      	add	sp, #16
 80015ca:	bd80      	pop	{r7, pc}
 80015cc:	40020000 	.word	0x40020000

080015d0 <HAL_DMA_GetError>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(const DMA_HandleTypeDef *hdma)
{
 80015d0:	b580      	push	{r7, lr}
 80015d2:	b082      	sub	sp, #8
 80015d4:	af00      	add	r7, sp, #0
 80015d6:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
}
 80015dc:	0018      	movs	r0, r3
 80015de:	46bd      	mov	sp, r7
 80015e0:	b002      	add	sp, #8
 80015e2:	bd80      	pop	{r7, pc}

080015e4 <DMA_SetConfig>:
  * @param DstAddress The destination memory Buffer address
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80015e4:	b580      	push	{r7, lr}
 80015e6:	b084      	sub	sp, #16
 80015e8:	af00      	add	r7, sp, #0
 80015ea:	60f8      	str	r0, [r7, #12]
 80015ec:	60b9      	str	r1, [r7, #8]
 80015ee:	607a      	str	r2, [r7, #4]
 80015f0:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80015f2:	68fb      	ldr	r3, [r7, #12]
 80015f4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80015f6:	68fa      	ldr	r2, [r7, #12]
 80015f8:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 80015fa:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 80015fc:	68fb      	ldr	r3, [r7, #12]
 80015fe:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001600:	2b00      	cmp	r3, #0
 8001602:	d004      	beq.n	800160e <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001604:	68fb      	ldr	r3, [r7, #12]
 8001606:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001608:	68fa      	ldr	r2, [r7, #12]
 800160a:	6d92      	ldr	r2, [r2, #88]	@ 0x58
 800160c:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_GI1 << (hdma->ChannelIndex & 0x1cU)));
 800160e:	4b14      	ldr	r3, [pc, #80]	@ (8001660 <DMA_SetConfig+0x7c>)
 8001610:	6859      	ldr	r1, [r3, #4]
 8001612:	68fb      	ldr	r3, [r7, #12]
 8001614:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001616:	221c      	movs	r2, #28
 8001618:	4013      	ands	r3, r2
 800161a:	2201      	movs	r2, #1
 800161c:	409a      	lsls	r2, r3
 800161e:	4b10      	ldr	r3, [pc, #64]	@ (8001660 <DMA_SetConfig+0x7c>)
 8001620:	430a      	orrs	r2, r1
 8001622:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8001624:	68fb      	ldr	r3, [r7, #12]
 8001626:	681b      	ldr	r3, [r3, #0]
 8001628:	683a      	ldr	r2, [r7, #0]
 800162a:	605a      	str	r2, [r3, #4]

  /* Peripheral to Memory */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800162c:	68fb      	ldr	r3, [r7, #12]
 800162e:	689b      	ldr	r3, [r3, #8]
 8001630:	2b10      	cmp	r3, #16
 8001632:	d108      	bne.n	8001646 <DMA_SetConfig+0x62>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8001634:	68fb      	ldr	r3, [r7, #12]
 8001636:	681b      	ldr	r3, [r3, #0]
 8001638:	687a      	ldr	r2, [r7, #4]
 800163a:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 800163c:	68fb      	ldr	r3, [r7, #12]
 800163e:	681b      	ldr	r3, [r3, #0]
 8001640:	68ba      	ldr	r2, [r7, #8]
 8001642:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8001644:	e007      	b.n	8001656 <DMA_SetConfig+0x72>
    hdma->Instance->CPAR = SrcAddress;
 8001646:	68fb      	ldr	r3, [r7, #12]
 8001648:	681b      	ldr	r3, [r3, #0]
 800164a:	68ba      	ldr	r2, [r7, #8]
 800164c:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 800164e:	68fb      	ldr	r3, [r7, #12]
 8001650:	681b      	ldr	r3, [r3, #0]
 8001652:	687a      	ldr	r2, [r7, #4]
 8001654:	60da      	str	r2, [r3, #12]
}
 8001656:	46c0      	nop			@ (mov r8, r8)
 8001658:	46bd      	mov	sp, r7
 800165a:	b004      	add	sp, #16
 800165c:	bd80      	pop	{r7, pc}
 800165e:	46c0      	nop			@ (mov r8, r8)
 8001660:	40020000 	.word	0x40020000

08001664 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8001664:	b580      	push	{r7, lr}
 8001666:	b084      	sub	sp, #16
 8001668:	af00      	add	r7, sp, #0
 800166a:	6078      	str	r0, [r7, #4]
  uint32_t channel_number;

  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	681b      	ldr	r3, [r3, #0]
 8001670:	001a      	movs	r2, r3
 8001672:	23ff      	movs	r3, #255	@ 0xff
 8001674:	4013      	ands	r3, r2
 8001676:	3b08      	subs	r3, #8
 8001678:	2114      	movs	r1, #20
 800167a:	0018      	movs	r0, r3
 800167c:	f7fe fd56 	bl	800012c <__udivsi3>
 8001680:	0003      	movs	r3, r0
 8001682:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)((uint32_t)DMAMUX1_Channel0 + \
                                                             ((hdma->ChannelIndex >> 2U) * \
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001688:	089b      	lsrs	r3, r3, #2
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)((uint32_t)DMAMUX1_Channel0 + \
 800168a:	4a0a      	ldr	r2, [pc, #40]	@ (80016b4 <DMA_CalcDMAMUXChannelBaseAndMask+0x50>)
 800168c:	4694      	mov	ip, r2
 800168e:	4463      	add	r3, ip
 8001690:	009b      	lsls	r3, r3, #2
 8001692:	001a      	movs	r2, r3
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	645a      	str	r2, [r3, #68]	@ 0x44
                                                              ((uint32_t)DMAMUX1_Channel1 - \
                                                               (uint32_t)DMAMUX1_Channel0)));
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	4a07      	ldr	r2, [pc, #28]	@ (80016b8 <DMA_CalcDMAMUXChannelBaseAndMask+0x54>)
 800169c:	649a      	str	r2, [r3, #72]	@ 0x48
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1cU);
 800169e:	68fb      	ldr	r3, [r7, #12]
 80016a0:	221c      	movs	r2, #28
 80016a2:	4013      	ands	r3, r2
 80016a4:	2201      	movs	r2, #1
 80016a6:	409a      	lsls	r2, r3
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	64da      	str	r2, [r3, #76]	@ 0x4c
}
 80016ac:	46c0      	nop			@ (mov r8, r8)
 80016ae:	46bd      	mov	sp, r7
 80016b0:	b004      	add	sp, #16
 80016b2:	bd80      	pop	{r7, pc}
 80016b4:	10008200 	.word	0x10008200
 80016b8:	40020880 	.word	0x40020880

080016bc <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80016bc:	b580      	push	{r7, lr}
 80016be:	b084      	sub	sp, #16
 80016c0:	af00      	add	r7, sp, #0
 80016c2:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	685b      	ldr	r3, [r3, #4]
 80016c8:	22ff      	movs	r2, #255	@ 0xff
 80016ca:	4013      	ands	r3, r2
 80016cc:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + \
 80016ce:	68fb      	ldr	r3, [r7, #12]
 80016d0:	4a0a      	ldr	r2, [pc, #40]	@ (80016fc <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 80016d2:	4694      	mov	ip, r2
 80016d4:	4463      	add	r3, ip
 80016d6:	009b      	lsls	r3, r3, #2
 80016d8:	001a      	movs	r2, r3
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	651a      	str	r2, [r3, #80]	@ 0x50
                                                                    ((request - 1U) * 4U)));

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	4a07      	ldr	r2, [pc, #28]	@ (8001700 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 80016e2:	655a      	str	r2, [r3, #84]	@ 0x54

  /* here "Request" is either DMA_REQUEST_GENERATOR0 to 4, i.e. <= 4*/
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 80016e4:	68fb      	ldr	r3, [r7, #12]
 80016e6:	3b01      	subs	r3, #1
 80016e8:	2203      	movs	r2, #3
 80016ea:	4013      	ands	r3, r2
 80016ec:	2201      	movs	r2, #1
 80016ee:	409a      	lsls	r2, r3
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	659a      	str	r2, [r3, #88]	@ 0x58
}
 80016f4:	46c0      	nop			@ (mov r8, r8)
 80016f6:	46bd      	mov	sp, r7
 80016f8:	b004      	add	sp, #16
 80016fa:	bd80      	pop	{r7, pc}
 80016fc:	1000823f 	.word	0x1000823f
 8001700:	40020940 	.word	0x40020940

08001704 <HAL_GPIO_Init>:
  * @param  pGPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *pGPIO_Init)
{
 8001704:	b580      	push	{r7, lr}
 8001706:	b086      	sub	sp, #24
 8001708:	af00      	add	r7, sp, #0
 800170a:	6078      	str	r0, [r7, #4]
 800170c:	6039      	str	r1, [r7, #0]
  uint32_t tmp;
  uint32_t iocurrent;
  uint32_t position = 0U;
 800170e:	2300      	movs	r3, #0
 8001710:	613b      	str	r3, [r7, #16]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(pGPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(pGPIO_Init->Mode));

  /* Configure the port pins */
  while (((pGPIO_Init->Pin) >> position) != 0U)
 8001712:	e153      	b.n	80019bc <HAL_GPIO_Init+0x2b8>
  {
    /* Get current io position */
    iocurrent = (pGPIO_Init->Pin) & (1UL << position);
 8001714:	683b      	ldr	r3, [r7, #0]
 8001716:	681b      	ldr	r3, [r3, #0]
 8001718:	2101      	movs	r1, #1
 800171a:	693a      	ldr	r2, [r7, #16]
 800171c:	4091      	lsls	r1, r2
 800171e:	000a      	movs	r2, r1
 8001720:	4013      	ands	r3, r2
 8001722:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0U)
 8001724:	68fb      	ldr	r3, [r7, #12]
 8001726:	2b00      	cmp	r3, #0
 8001728:	d100      	bne.n	800172c <HAL_GPIO_Init+0x28>
 800172a:	e144      	b.n	80019b6 <HAL_GPIO_Init+0x2b2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if ((pGPIO_Init->Mode == GPIO_MODE_AF_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 800172c:	683b      	ldr	r3, [r7, #0]
 800172e:	685b      	ldr	r3, [r3, #4]
 8001730:	2b02      	cmp	r3, #2
 8001732:	d003      	beq.n	800173c <HAL_GPIO_Init+0x38>
 8001734:	683b      	ldr	r3, [r7, #0]
 8001736:	685b      	ldr	r3, [r3, #4]
 8001738:	2b12      	cmp	r3, #18
 800173a:	d125      	bne.n	8001788 <HAL_GPIO_Init+0x84>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(pGPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        tmp = GPIOx->AFR[position >> 3U];
 800173c:	693b      	ldr	r3, [r7, #16]
 800173e:	08da      	lsrs	r2, r3, #3
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	3208      	adds	r2, #8
 8001744:	0092      	lsls	r2, r2, #2
 8001746:	58d3      	ldr	r3, [r2, r3]
 8001748:	617b      	str	r3, [r7, #20]
        tmp &= ~(0xFUL << ((position & 0x07U) * GPIO_AFRL_AFSEL1_Pos)) ;
 800174a:	693b      	ldr	r3, [r7, #16]
 800174c:	2207      	movs	r2, #7
 800174e:	4013      	ands	r3, r2
 8001750:	009b      	lsls	r3, r3, #2
 8001752:	220f      	movs	r2, #15
 8001754:	409a      	lsls	r2, r3
 8001756:	0013      	movs	r3, r2
 8001758:	43da      	mvns	r2, r3
 800175a:	697b      	ldr	r3, [r7, #20]
 800175c:	4013      	ands	r3, r2
 800175e:	617b      	str	r3, [r7, #20]
        tmp |= ((pGPIO_Init->Alternate & 0x0FUL) << ((position & 0x07U) * GPIO_AFRL_AFSEL1_Pos));
 8001760:	683b      	ldr	r3, [r7, #0]
 8001762:	691b      	ldr	r3, [r3, #16]
 8001764:	220f      	movs	r2, #15
 8001766:	401a      	ands	r2, r3
 8001768:	693b      	ldr	r3, [r7, #16]
 800176a:	2107      	movs	r1, #7
 800176c:	400b      	ands	r3, r1
 800176e:	009b      	lsls	r3, r3, #2
 8001770:	409a      	lsls	r2, r3
 8001772:	0013      	movs	r3, r2
 8001774:	697a      	ldr	r2, [r7, #20]
 8001776:	4313      	orrs	r3, r2
 8001778:	617b      	str	r3, [r7, #20]
        GPIOx->AFR[position >> 3U] = tmp;
 800177a:	693b      	ldr	r3, [r7, #16]
 800177c:	08da      	lsrs	r2, r3, #3
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	3208      	adds	r2, #8
 8001782:	0092      	lsls	r2, r2, #2
 8001784:	6979      	ldr	r1, [r7, #20]
 8001786:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      tmp = GPIOx->MODER;
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	681b      	ldr	r3, [r3, #0]
 800178c:	617b      	str	r3, [r7, #20]
      tmp &= ~(GPIO_MODER_MODE0 << (position * GPIO_MODER_MODE1_Pos));
 800178e:	693b      	ldr	r3, [r7, #16]
 8001790:	005b      	lsls	r3, r3, #1
 8001792:	2203      	movs	r2, #3
 8001794:	409a      	lsls	r2, r3
 8001796:	0013      	movs	r3, r2
 8001798:	43da      	mvns	r2, r3
 800179a:	697b      	ldr	r3, [r7, #20]
 800179c:	4013      	ands	r3, r2
 800179e:	617b      	str	r3, [r7, #20]
      tmp |= ((pGPIO_Init->Mode & GPIO_MODE) << (position * GPIO_MODER_MODE1_Pos));
 80017a0:	683b      	ldr	r3, [r7, #0]
 80017a2:	685b      	ldr	r3, [r3, #4]
 80017a4:	2203      	movs	r2, #3
 80017a6:	401a      	ands	r2, r3
 80017a8:	693b      	ldr	r3, [r7, #16]
 80017aa:	005b      	lsls	r3, r3, #1
 80017ac:	409a      	lsls	r2, r3
 80017ae:	0013      	movs	r3, r2
 80017b0:	697a      	ldr	r2, [r7, #20]
 80017b2:	4313      	orrs	r3, r2
 80017b4:	617b      	str	r3, [r7, #20]
      GPIOx->MODER = tmp;
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	697a      	ldr	r2, [r7, #20]
 80017ba:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80017bc:	683b      	ldr	r3, [r7, #0]
 80017be:	685b      	ldr	r3, [r3, #4]
 80017c0:	2b01      	cmp	r3, #1
 80017c2:	d00b      	beq.n	80017dc <HAL_GPIO_Init+0xd8>
 80017c4:	683b      	ldr	r3, [r7, #0]
 80017c6:	685b      	ldr	r3, [r3, #4]
 80017c8:	2b02      	cmp	r3, #2
 80017ca:	d007      	beq.n	80017dc <HAL_GPIO_Init+0xd8>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 80017cc:	683b      	ldr	r3, [r7, #0]
 80017ce:	685b      	ldr	r3, [r3, #4]
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80017d0:	2b11      	cmp	r3, #17
 80017d2:	d003      	beq.n	80017dc <HAL_GPIO_Init+0xd8>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 80017d4:	683b      	ldr	r3, [r7, #0]
 80017d6:	685b      	ldr	r3, [r3, #4]
 80017d8:	2b12      	cmp	r3, #18
 80017da:	d130      	bne.n	800183e <HAL_GPIO_Init+0x13a>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(pGPIO_Init->Speed));

        /* Configure the IO Speed */
        tmp = GPIOx->OSPEEDR;
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	689b      	ldr	r3, [r3, #8]
 80017e0:	617b      	str	r3, [r7, #20]
        tmp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * GPIO_OSPEEDR_OSPEED1_Pos));
 80017e2:	693b      	ldr	r3, [r7, #16]
 80017e4:	005b      	lsls	r3, r3, #1
 80017e6:	2203      	movs	r2, #3
 80017e8:	409a      	lsls	r2, r3
 80017ea:	0013      	movs	r3, r2
 80017ec:	43da      	mvns	r2, r3
 80017ee:	697b      	ldr	r3, [r7, #20]
 80017f0:	4013      	ands	r3, r2
 80017f2:	617b      	str	r3, [r7, #20]
        tmp |= (pGPIO_Init->Speed << (position * GPIO_OSPEEDR_OSPEED1_Pos));
 80017f4:	683b      	ldr	r3, [r7, #0]
 80017f6:	68da      	ldr	r2, [r3, #12]
 80017f8:	693b      	ldr	r3, [r7, #16]
 80017fa:	005b      	lsls	r3, r3, #1
 80017fc:	409a      	lsls	r2, r3
 80017fe:	0013      	movs	r3, r2
 8001800:	697a      	ldr	r2, [r7, #20]
 8001802:	4313      	orrs	r3, r2
 8001804:	617b      	str	r3, [r7, #20]
        GPIOx->OSPEEDR = tmp;
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	697a      	ldr	r2, [r7, #20]
 800180a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        tmp = GPIOx->OTYPER;
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	685b      	ldr	r3, [r3, #4]
 8001810:	617b      	str	r3, [r7, #20]
        tmp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001812:	2201      	movs	r2, #1
 8001814:	693b      	ldr	r3, [r7, #16]
 8001816:	409a      	lsls	r2, r3
 8001818:	0013      	movs	r3, r2
 800181a:	43da      	mvns	r2, r3
 800181c:	697b      	ldr	r3, [r7, #20]
 800181e:	4013      	ands	r3, r2
 8001820:	617b      	str	r3, [r7, #20]
        tmp |= (((pGPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8001822:	683b      	ldr	r3, [r7, #0]
 8001824:	685b      	ldr	r3, [r3, #4]
 8001826:	091b      	lsrs	r3, r3, #4
 8001828:	2201      	movs	r2, #1
 800182a:	401a      	ands	r2, r3
 800182c:	693b      	ldr	r3, [r7, #16]
 800182e:	409a      	lsls	r2, r3
 8001830:	0013      	movs	r3, r2
 8001832:	697a      	ldr	r2, [r7, #20]
 8001834:	4313      	orrs	r3, r2
 8001836:	617b      	str	r3, [r7, #20]
        GPIOx->OTYPER = tmp;
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	697a      	ldr	r2, [r7, #20]
 800183c:	605a      	str	r2, [r3, #4]
      }

      if (pGPIO_Init->Mode != GPIO_MODE_ANALOG)
 800183e:	683b      	ldr	r3, [r7, #0]
 8001840:	685b      	ldr	r3, [r3, #4]
 8001842:	2b03      	cmp	r3, #3
 8001844:	d017      	beq.n	8001876 <HAL_GPIO_Init+0x172>
      {
        /* Check the Pull parameters */
        assert_param(IS_GPIO_PULL(pGPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        tmp = GPIOx->PUPDR;
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	68db      	ldr	r3, [r3, #12]
 800184a:	617b      	str	r3, [r7, #20]
        tmp &= ~(GPIO_PUPDR_PUPD0 << (position * GPIO_PUPDR_PUPD1_Pos));
 800184c:	693b      	ldr	r3, [r7, #16]
 800184e:	005b      	lsls	r3, r3, #1
 8001850:	2203      	movs	r2, #3
 8001852:	409a      	lsls	r2, r3
 8001854:	0013      	movs	r3, r2
 8001856:	43da      	mvns	r2, r3
 8001858:	697b      	ldr	r3, [r7, #20]
 800185a:	4013      	ands	r3, r2
 800185c:	617b      	str	r3, [r7, #20]
        tmp |= ((pGPIO_Init->Pull) << (position * GPIO_PUPDR_PUPD1_Pos));
 800185e:	683b      	ldr	r3, [r7, #0]
 8001860:	689a      	ldr	r2, [r3, #8]
 8001862:	693b      	ldr	r3, [r7, #16]
 8001864:	005b      	lsls	r3, r3, #1
 8001866:	409a      	lsls	r2, r3
 8001868:	0013      	movs	r3, r2
 800186a:	697a      	ldr	r2, [r7, #20]
 800186c:	4313      	orrs	r3, r2
 800186e:	617b      	str	r3, [r7, #20]
        GPIOx->PUPDR = tmp;
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	697a      	ldr	r2, [r7, #20]
 8001874:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((pGPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001876:	683b      	ldr	r3, [r7, #0]
 8001878:	685a      	ldr	r2, [r3, #4]
 800187a:	2380      	movs	r3, #128	@ 0x80
 800187c:	055b      	lsls	r3, r3, #21
 800187e:	4013      	ands	r3, r2
 8001880:	d100      	bne.n	8001884 <HAL_GPIO_Init+0x180>
 8001882:	e098      	b.n	80019b6 <HAL_GPIO_Init+0x2b2>
      {
        tmp = EXTI->EXTICR[position >> 2U];
 8001884:	4a53      	ldr	r2, [pc, #332]	@ (80019d4 <HAL_GPIO_Init+0x2d0>)
 8001886:	693b      	ldr	r3, [r7, #16]
 8001888:	089b      	lsrs	r3, r3, #2
 800188a:	3318      	adds	r3, #24
 800188c:	009b      	lsls	r3, r3, #2
 800188e:	589b      	ldr	r3, [r3, r2]
 8001890:	617b      	str	r3, [r7, #20]
        tmp &= ~((0x0FUL) << ((position & 0x03U) * EXTI_EXTICR1_EXTI1_Pos));
 8001892:	693b      	ldr	r3, [r7, #16]
 8001894:	2203      	movs	r2, #3
 8001896:	4013      	ands	r3, r2
 8001898:	00db      	lsls	r3, r3, #3
 800189a:	220f      	movs	r2, #15
 800189c:	409a      	lsls	r2, r3
 800189e:	0013      	movs	r3, r2
 80018a0:	43da      	mvns	r2, r3
 80018a2:	697b      	ldr	r3, [r7, #20]
 80018a4:	4013      	ands	r3, r2
 80018a6:	617b      	str	r3, [r7, #20]
        tmp |= (GPIO_GET_INDEX(GPIOx) << ((position & 0x03U) * EXTI_EXTICR1_EXTI1_Pos));
 80018a8:	687a      	ldr	r2, [r7, #4]
 80018aa:	23a0      	movs	r3, #160	@ 0xa0
 80018ac:	05db      	lsls	r3, r3, #23
 80018ae:	429a      	cmp	r2, r3
 80018b0:	d019      	beq.n	80018e6 <HAL_GPIO_Init+0x1e2>
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	4a48      	ldr	r2, [pc, #288]	@ (80019d8 <HAL_GPIO_Init+0x2d4>)
 80018b6:	4293      	cmp	r3, r2
 80018b8:	d013      	beq.n	80018e2 <HAL_GPIO_Init+0x1de>
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	4a47      	ldr	r2, [pc, #284]	@ (80019dc <HAL_GPIO_Init+0x2d8>)
 80018be:	4293      	cmp	r3, r2
 80018c0:	d00d      	beq.n	80018de <HAL_GPIO_Init+0x1da>
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	4a46      	ldr	r2, [pc, #280]	@ (80019e0 <HAL_GPIO_Init+0x2dc>)
 80018c6:	4293      	cmp	r3, r2
 80018c8:	d007      	beq.n	80018da <HAL_GPIO_Init+0x1d6>
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	4a45      	ldr	r2, [pc, #276]	@ (80019e4 <HAL_GPIO_Init+0x2e0>)
 80018ce:	4293      	cmp	r3, r2
 80018d0:	d101      	bne.n	80018d6 <HAL_GPIO_Init+0x1d2>
 80018d2:	2305      	movs	r3, #5
 80018d4:	e008      	b.n	80018e8 <HAL_GPIO_Init+0x1e4>
 80018d6:	2306      	movs	r3, #6
 80018d8:	e006      	b.n	80018e8 <HAL_GPIO_Init+0x1e4>
 80018da:	2303      	movs	r3, #3
 80018dc:	e004      	b.n	80018e8 <HAL_GPIO_Init+0x1e4>
 80018de:	2302      	movs	r3, #2
 80018e0:	e002      	b.n	80018e8 <HAL_GPIO_Init+0x1e4>
 80018e2:	2301      	movs	r3, #1
 80018e4:	e000      	b.n	80018e8 <HAL_GPIO_Init+0x1e4>
 80018e6:	2300      	movs	r3, #0
 80018e8:	693a      	ldr	r2, [r7, #16]
 80018ea:	2103      	movs	r1, #3
 80018ec:	400a      	ands	r2, r1
 80018ee:	00d2      	lsls	r2, r2, #3
 80018f0:	4093      	lsls	r3, r2
 80018f2:	697a      	ldr	r2, [r7, #20]
 80018f4:	4313      	orrs	r3, r2
 80018f6:	617b      	str	r3, [r7, #20]
        EXTI->EXTICR[position >> 2U] = tmp;
 80018f8:	4936      	ldr	r1, [pc, #216]	@ (80019d4 <HAL_GPIO_Init+0x2d0>)
 80018fa:	693b      	ldr	r3, [r7, #16]
 80018fc:	089b      	lsrs	r3, r3, #2
 80018fe:	3318      	adds	r3, #24
 8001900:	009b      	lsls	r3, r3, #2
 8001902:	697a      	ldr	r2, [r7, #20]
 8001904:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        tmp = EXTI->IMR1;
 8001906:	4a33      	ldr	r2, [pc, #204]	@ (80019d4 <HAL_GPIO_Init+0x2d0>)
 8001908:	2380      	movs	r3, #128	@ 0x80
 800190a:	58d3      	ldr	r3, [r2, r3]
 800190c:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 800190e:	68fb      	ldr	r3, [r7, #12]
 8001910:	43da      	mvns	r2, r3
 8001912:	697b      	ldr	r3, [r7, #20]
 8001914:	4013      	ands	r3, r2
 8001916:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001918:	683b      	ldr	r3, [r7, #0]
 800191a:	685a      	ldr	r2, [r3, #4]
 800191c:	2380      	movs	r3, #128	@ 0x80
 800191e:	025b      	lsls	r3, r3, #9
 8001920:	4013      	ands	r3, r2
 8001922:	d003      	beq.n	800192c <HAL_GPIO_Init+0x228>
        {
          tmp |= iocurrent;
 8001924:	697a      	ldr	r2, [r7, #20]
 8001926:	68fb      	ldr	r3, [r7, #12]
 8001928:	4313      	orrs	r3, r2
 800192a:	617b      	str	r3, [r7, #20]
        }
        EXTI->IMR1 = tmp;
 800192c:	4929      	ldr	r1, [pc, #164]	@ (80019d4 <HAL_GPIO_Init+0x2d0>)
 800192e:	2280      	movs	r2, #128	@ 0x80
 8001930:	697b      	ldr	r3, [r7, #20]
 8001932:	508b      	str	r3, [r1, r2]

        tmp = EXTI->EMR1;
 8001934:	4a27      	ldr	r2, [pc, #156]	@ (80019d4 <HAL_GPIO_Init+0x2d0>)
 8001936:	2384      	movs	r3, #132	@ 0x84
 8001938:	58d3      	ldr	r3, [r2, r3]
 800193a:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 800193c:	68fb      	ldr	r3, [r7, #12]
 800193e:	43da      	mvns	r2, r3
 8001940:	697b      	ldr	r3, [r7, #20]
 8001942:	4013      	ands	r3, r2
 8001944:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001946:	683b      	ldr	r3, [r7, #0]
 8001948:	685a      	ldr	r2, [r3, #4]
 800194a:	2380      	movs	r3, #128	@ 0x80
 800194c:	029b      	lsls	r3, r3, #10
 800194e:	4013      	ands	r3, r2
 8001950:	d003      	beq.n	800195a <HAL_GPIO_Init+0x256>
        {
          tmp |= iocurrent;
 8001952:	697a      	ldr	r2, [r7, #20]
 8001954:	68fb      	ldr	r3, [r7, #12]
 8001956:	4313      	orrs	r3, r2
 8001958:	617b      	str	r3, [r7, #20]
        }
        EXTI->EMR1 = tmp;
 800195a:	491e      	ldr	r1, [pc, #120]	@ (80019d4 <HAL_GPIO_Init+0x2d0>)
 800195c:	2284      	movs	r2, #132	@ 0x84
 800195e:	697b      	ldr	r3, [r7, #20]
 8001960:	508b      	str	r3, [r1, r2]

        /* Clear Rising Falling edge configuration */
        tmp = EXTI->RTSR1;
 8001962:	4b1c      	ldr	r3, [pc, #112]	@ (80019d4 <HAL_GPIO_Init+0x2d0>)
 8001964:	681b      	ldr	r3, [r3, #0]
 8001966:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 8001968:	68fb      	ldr	r3, [r7, #12]
 800196a:	43da      	mvns	r2, r3
 800196c:	697b      	ldr	r3, [r7, #20]
 800196e:	4013      	ands	r3, r2
 8001970:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001972:	683b      	ldr	r3, [r7, #0]
 8001974:	685a      	ldr	r2, [r3, #4]
 8001976:	2380      	movs	r3, #128	@ 0x80
 8001978:	035b      	lsls	r3, r3, #13
 800197a:	4013      	ands	r3, r2
 800197c:	d003      	beq.n	8001986 <HAL_GPIO_Init+0x282>
        {
          tmp |= iocurrent;
 800197e:	697a      	ldr	r2, [r7, #20]
 8001980:	68fb      	ldr	r3, [r7, #12]
 8001982:	4313      	orrs	r3, r2
 8001984:	617b      	str	r3, [r7, #20]
        }
        EXTI->RTSR1 = tmp;
 8001986:	4b13      	ldr	r3, [pc, #76]	@ (80019d4 <HAL_GPIO_Init+0x2d0>)
 8001988:	697a      	ldr	r2, [r7, #20]
 800198a:	601a      	str	r2, [r3, #0]

        tmp = EXTI->FTSR1;
 800198c:	4b11      	ldr	r3, [pc, #68]	@ (80019d4 <HAL_GPIO_Init+0x2d0>)
 800198e:	685b      	ldr	r3, [r3, #4]
 8001990:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 8001992:	68fb      	ldr	r3, [r7, #12]
 8001994:	43da      	mvns	r2, r3
 8001996:	697b      	ldr	r3, [r7, #20]
 8001998:	4013      	ands	r3, r2
 800199a:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800199c:	683b      	ldr	r3, [r7, #0]
 800199e:	685a      	ldr	r2, [r3, #4]
 80019a0:	2380      	movs	r3, #128	@ 0x80
 80019a2:	039b      	lsls	r3, r3, #14
 80019a4:	4013      	ands	r3, r2
 80019a6:	d003      	beq.n	80019b0 <HAL_GPIO_Init+0x2ac>
        {
          tmp |= iocurrent;
 80019a8:	697a      	ldr	r2, [r7, #20]
 80019aa:	68fb      	ldr	r3, [r7, #12]
 80019ac:	4313      	orrs	r3, r2
 80019ae:	617b      	str	r3, [r7, #20]
        }
        EXTI->FTSR1 = tmp;
 80019b0:	4b08      	ldr	r3, [pc, #32]	@ (80019d4 <HAL_GPIO_Init+0x2d0>)
 80019b2:	697a      	ldr	r2, [r7, #20]
 80019b4:	605a      	str	r2, [r3, #4]
      }
    }

    position++;
 80019b6:	693b      	ldr	r3, [r7, #16]
 80019b8:	3301      	adds	r3, #1
 80019ba:	613b      	str	r3, [r7, #16]
  while (((pGPIO_Init->Pin) >> position) != 0U)
 80019bc:	683b      	ldr	r3, [r7, #0]
 80019be:	681a      	ldr	r2, [r3, #0]
 80019c0:	693b      	ldr	r3, [r7, #16]
 80019c2:	40da      	lsrs	r2, r3
 80019c4:	1e13      	subs	r3, r2, #0
 80019c6:	d000      	beq.n	80019ca <HAL_GPIO_Init+0x2c6>
 80019c8:	e6a4      	b.n	8001714 <HAL_GPIO_Init+0x10>
  }
}
 80019ca:	46c0      	nop			@ (mov r8, r8)
 80019cc:	46c0      	nop			@ (mov r8, r8)
 80019ce:	46bd      	mov	sp, r7
 80019d0:	b006      	add	sp, #24
 80019d2:	bd80      	pop	{r7, pc}
 80019d4:	40021800 	.word	0x40021800
 80019d8:	50000400 	.word	0x50000400
 80019dc:	50000800 	.word	0x50000800
 80019e0:	50000c00 	.word	0x50000c00
 80019e4:	50001400 	.word	0x50001400

080019e8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80019e8:	b580      	push	{r7, lr}
 80019ea:	b082      	sub	sp, #8
 80019ec:	af00      	add	r7, sp, #0
 80019ee:	6078      	str	r0, [r7, #4]
 80019f0:	0008      	movs	r0, r1
 80019f2:	0011      	movs	r1, r2
 80019f4:	1cbb      	adds	r3, r7, #2
 80019f6:	1c02      	adds	r2, r0, #0
 80019f8:	801a      	strh	r2, [r3, #0]
 80019fa:	1c7b      	adds	r3, r7, #1
 80019fc:	1c0a      	adds	r2, r1, #0
 80019fe:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001a00:	1c7b      	adds	r3, r7, #1
 8001a02:	781b      	ldrb	r3, [r3, #0]
 8001a04:	2b00      	cmp	r3, #0
 8001a06:	d004      	beq.n	8001a12 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001a08:	1cbb      	adds	r3, r7, #2
 8001a0a:	881a      	ldrh	r2, [r3, #0]
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001a10:	e003      	b.n	8001a1a <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001a12:	1cbb      	adds	r3, r7, #2
 8001a14:	881a      	ldrh	r2, [r3, #0]
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8001a1a:	46c0      	nop			@ (mov r8, r8)
 8001a1c:	46bd      	mov	sp, r7
 8001a1e:	b002      	add	sp, #8
 8001a20:	bd80      	pop	{r7, pc}

08001a22 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..I) to select the GPIO peripheral for STM32C0 family
  * @param  GPIO_Pin: specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001a22:	b580      	push	{r7, lr}
 8001a24:	b084      	sub	sp, #16
 8001a26:	af00      	add	r7, sp, #0
 8001a28:	6078      	str	r0, [r7, #4]
 8001a2a:	000a      	movs	r2, r1
 8001a2c:	1cbb      	adds	r3, r7, #2
 8001a2e:	801a      	strh	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	695b      	ldr	r3, [r3, #20]
 8001a34:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001a36:	1cbb      	adds	r3, r7, #2
 8001a38:	881b      	ldrh	r3, [r3, #0]
 8001a3a:	68fa      	ldr	r2, [r7, #12]
 8001a3c:	4013      	ands	r3, r2
 8001a3e:	041a      	lsls	r2, r3, #16
 8001a40:	68fb      	ldr	r3, [r7, #12]
 8001a42:	43db      	mvns	r3, r3
 8001a44:	1cb9      	adds	r1, r7, #2
 8001a46:	8809      	ldrh	r1, [r1, #0]
 8001a48:	400b      	ands	r3, r1
 8001a4a:	431a      	orrs	r2, r3
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	619a      	str	r2, [r3, #24]
}
 8001a50:	46c0      	nop			@ (mov r8, r8)
 8001a52:	46bd      	mov	sp, r7
 8001a54:	b004      	add	sp, #16
 8001a56:	bd80      	pop	{r7, pc}

08001a58 <HAL_RCC_OscConfig>:
            must adjust the number of CPU wait states in their application (SystemClock_Config() API)
            before calling the HAL_RCC_OscConfig() API to update the HSI48 clock division factor.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001a58:	b580      	push	{r7, lr}
 8001a5a:	b086      	sub	sp, #24
 8001a5c:	af00      	add	r7, sp, #0
 8001a5e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	2b00      	cmp	r3, #0
 8001a64:	d101      	bne.n	8001a6a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001a66:	2301      	movs	r3, #1
 8001a68:	e1d0      	b.n	8001e0c <HAL_RCC_OscConfig+0x3b4>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	681b      	ldr	r3, [r3, #0]
 8001a6e:	2201      	movs	r2, #1
 8001a70:	4013      	ands	r3, r2
 8001a72:	d100      	bne.n	8001a76 <HAL_RCC_OscConfig+0x1e>
 8001a74:	e069      	b.n	8001b4a <HAL_RCC_OscConfig+0xf2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001a76:	4bc8      	ldr	r3, [pc, #800]	@ (8001d98 <HAL_RCC_OscConfig+0x340>)
 8001a78:	689b      	ldr	r3, [r3, #8]
 8001a7a:	2238      	movs	r2, #56	@ 0x38
 8001a7c:	4013      	ands	r3, r2
 8001a7e:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock in these cases it is not allowed to be disabled */
    if (temp_sysclksrc == RCC_CFGR_SWS_HSE)
 8001a80:	697b      	ldr	r3, [r7, #20]
 8001a82:	2b08      	cmp	r3, #8
 8001a84:	d105      	bne.n	8001a92 <HAL_RCC_OscConfig+0x3a>
    {
      if (RCC_OscInitStruct->HSEState == RCC_HSE_OFF)
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	685b      	ldr	r3, [r3, #4]
 8001a8a:	2b00      	cmp	r3, #0
 8001a8c:	d15d      	bne.n	8001b4a <HAL_RCC_OscConfig+0xf2>
      {
        return HAL_ERROR;
 8001a8e:	2301      	movs	r3, #1
 8001a90:	e1bc      	b.n	8001e0c <HAL_RCC_OscConfig+0x3b4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	685a      	ldr	r2, [r3, #4]
 8001a96:	2380      	movs	r3, #128	@ 0x80
 8001a98:	025b      	lsls	r3, r3, #9
 8001a9a:	429a      	cmp	r2, r3
 8001a9c:	d107      	bne.n	8001aae <HAL_RCC_OscConfig+0x56>
 8001a9e:	4bbe      	ldr	r3, [pc, #760]	@ (8001d98 <HAL_RCC_OscConfig+0x340>)
 8001aa0:	681a      	ldr	r2, [r3, #0]
 8001aa2:	4bbd      	ldr	r3, [pc, #756]	@ (8001d98 <HAL_RCC_OscConfig+0x340>)
 8001aa4:	2180      	movs	r1, #128	@ 0x80
 8001aa6:	0249      	lsls	r1, r1, #9
 8001aa8:	430a      	orrs	r2, r1
 8001aaa:	601a      	str	r2, [r3, #0]
 8001aac:	e020      	b.n	8001af0 <HAL_RCC_OscConfig+0x98>
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	685a      	ldr	r2, [r3, #4]
 8001ab2:	23a0      	movs	r3, #160	@ 0xa0
 8001ab4:	02db      	lsls	r3, r3, #11
 8001ab6:	429a      	cmp	r2, r3
 8001ab8:	d10e      	bne.n	8001ad8 <HAL_RCC_OscConfig+0x80>
 8001aba:	4bb7      	ldr	r3, [pc, #732]	@ (8001d98 <HAL_RCC_OscConfig+0x340>)
 8001abc:	681a      	ldr	r2, [r3, #0]
 8001abe:	4bb6      	ldr	r3, [pc, #728]	@ (8001d98 <HAL_RCC_OscConfig+0x340>)
 8001ac0:	2180      	movs	r1, #128	@ 0x80
 8001ac2:	02c9      	lsls	r1, r1, #11
 8001ac4:	430a      	orrs	r2, r1
 8001ac6:	601a      	str	r2, [r3, #0]
 8001ac8:	4bb3      	ldr	r3, [pc, #716]	@ (8001d98 <HAL_RCC_OscConfig+0x340>)
 8001aca:	681a      	ldr	r2, [r3, #0]
 8001acc:	4bb2      	ldr	r3, [pc, #712]	@ (8001d98 <HAL_RCC_OscConfig+0x340>)
 8001ace:	2180      	movs	r1, #128	@ 0x80
 8001ad0:	0249      	lsls	r1, r1, #9
 8001ad2:	430a      	orrs	r2, r1
 8001ad4:	601a      	str	r2, [r3, #0]
 8001ad6:	e00b      	b.n	8001af0 <HAL_RCC_OscConfig+0x98>
 8001ad8:	4baf      	ldr	r3, [pc, #700]	@ (8001d98 <HAL_RCC_OscConfig+0x340>)
 8001ada:	681a      	ldr	r2, [r3, #0]
 8001adc:	4bae      	ldr	r3, [pc, #696]	@ (8001d98 <HAL_RCC_OscConfig+0x340>)
 8001ade:	49af      	ldr	r1, [pc, #700]	@ (8001d9c <HAL_RCC_OscConfig+0x344>)
 8001ae0:	400a      	ands	r2, r1
 8001ae2:	601a      	str	r2, [r3, #0]
 8001ae4:	4bac      	ldr	r3, [pc, #688]	@ (8001d98 <HAL_RCC_OscConfig+0x340>)
 8001ae6:	681a      	ldr	r2, [r3, #0]
 8001ae8:	4bab      	ldr	r3, [pc, #684]	@ (8001d98 <HAL_RCC_OscConfig+0x340>)
 8001aea:	49ad      	ldr	r1, [pc, #692]	@ (8001da0 <HAL_RCC_OscConfig+0x348>)
 8001aec:	400a      	ands	r2, r1
 8001aee:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	685b      	ldr	r3, [r3, #4]
 8001af4:	2b00      	cmp	r3, #0
 8001af6:	d014      	beq.n	8001b22 <HAL_RCC_OscConfig+0xca>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001af8:	f7ff fa38 	bl	8000f6c <HAL_GetTick>
 8001afc:	0003      	movs	r3, r0
 8001afe:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001b00:	e008      	b.n	8001b14 <HAL_RCC_OscConfig+0xbc>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSE_TIMEOUT_VALUE)
 8001b02:	f7ff fa33 	bl	8000f6c <HAL_GetTick>
 8001b06:	0002      	movs	r2, r0
 8001b08:	693b      	ldr	r3, [r7, #16]
 8001b0a:	1ad3      	subs	r3, r2, r3
 8001b0c:	2b64      	cmp	r3, #100	@ 0x64
 8001b0e:	d901      	bls.n	8001b14 <HAL_RCC_OscConfig+0xbc>
          {
            return HAL_TIMEOUT;
 8001b10:	2303      	movs	r3, #3
 8001b12:	e17b      	b.n	8001e0c <HAL_RCC_OscConfig+0x3b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001b14:	4ba0      	ldr	r3, [pc, #640]	@ (8001d98 <HAL_RCC_OscConfig+0x340>)
 8001b16:	681a      	ldr	r2, [r3, #0]
 8001b18:	2380      	movs	r3, #128	@ 0x80
 8001b1a:	029b      	lsls	r3, r3, #10
 8001b1c:	4013      	ands	r3, r2
 8001b1e:	d0f0      	beq.n	8001b02 <HAL_RCC_OscConfig+0xaa>
 8001b20:	e013      	b.n	8001b4a <HAL_RCC_OscConfig+0xf2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b22:	f7ff fa23 	bl	8000f6c <HAL_GetTick>
 8001b26:	0003      	movs	r3, r0
 8001b28:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001b2a:	e008      	b.n	8001b3e <HAL_RCC_OscConfig+0xe6>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSE_TIMEOUT_VALUE)
 8001b2c:	f7ff fa1e 	bl	8000f6c <HAL_GetTick>
 8001b30:	0002      	movs	r2, r0
 8001b32:	693b      	ldr	r3, [r7, #16]
 8001b34:	1ad3      	subs	r3, r2, r3
 8001b36:	2b64      	cmp	r3, #100	@ 0x64
 8001b38:	d901      	bls.n	8001b3e <HAL_RCC_OscConfig+0xe6>
          {
            return HAL_TIMEOUT;
 8001b3a:	2303      	movs	r3, #3
 8001b3c:	e166      	b.n	8001e0c <HAL_RCC_OscConfig+0x3b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001b3e:	4b96      	ldr	r3, [pc, #600]	@ (8001d98 <HAL_RCC_OscConfig+0x340>)
 8001b40:	681a      	ldr	r2, [r3, #0]
 8001b42:	2380      	movs	r3, #128	@ 0x80
 8001b44:	029b      	lsls	r3, r3, #10
 8001b46:	4013      	ands	r3, r2
 8001b48:	d1f0      	bne.n	8001b2c <HAL_RCC_OscConfig+0xd4>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	681b      	ldr	r3, [r3, #0]
 8001b4e:	2202      	movs	r2, #2
 8001b50:	4013      	ands	r3, r2
 8001b52:	d100      	bne.n	8001b56 <HAL_RCC_OscConfig+0xfe>
 8001b54:	e086      	b.n	8001c64 <HAL_RCC_OscConfig+0x20c>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI48 is used as system clock  */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001b56:	4b90      	ldr	r3, [pc, #576]	@ (8001d98 <HAL_RCC_OscConfig+0x340>)
 8001b58:	689b      	ldr	r3, [r3, #8]
 8001b5a:	2238      	movs	r2, #56	@ 0x38
 8001b5c:	4013      	ands	r3, r2
 8001b5e:	617b      	str	r3, [r7, #20]

    if (temp_sysclksrc == RCC_CFGR_SWS_HSI)
 8001b60:	697b      	ldr	r3, [r7, #20]
 8001b62:	2b00      	cmp	r3, #0
 8001b64:	d12f      	bne.n	8001bc6 <HAL_RCC_OscConfig+0x16e>
    {
      /* When HSI is used as system clock it can not be disabled */
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	68db      	ldr	r3, [r3, #12]
 8001b6a:	2b00      	cmp	r3, #0
 8001b6c:	d101      	bne.n	8001b72 <HAL_RCC_OscConfig+0x11a>
      {
        return HAL_ERROR;
 8001b6e:	2301      	movs	r3, #1
 8001b70:	e14c      	b.n	8001e0c <HAL_RCC_OscConfig+0x3b4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001b72:	4b89      	ldr	r3, [pc, #548]	@ (8001d98 <HAL_RCC_OscConfig+0x340>)
 8001b74:	685b      	ldr	r3, [r3, #4]
 8001b76:	4a8b      	ldr	r2, [pc, #556]	@ (8001da4 <HAL_RCC_OscConfig+0x34c>)
 8001b78:	4013      	ands	r3, r2
 8001b7a:	0019      	movs	r1, r3
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	695b      	ldr	r3, [r3, #20]
 8001b80:	021a      	lsls	r2, r3, #8
 8001b82:	4b85      	ldr	r3, [pc, #532]	@ (8001d98 <HAL_RCC_OscConfig+0x340>)
 8001b84:	430a      	orrs	r2, r1
 8001b86:	605a      	str	r2, [r3, #4]

        if (temp_sysclksrc == RCC_CFGR_SWS_HSI)
 8001b88:	697b      	ldr	r3, [r7, #20]
 8001b8a:	2b00      	cmp	r3, #0
 8001b8c:	d112      	bne.n	8001bb4 <HAL_RCC_OscConfig+0x15c>
        {
          /* Adjust the HSI48 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8001b8e:	4b82      	ldr	r3, [pc, #520]	@ (8001d98 <HAL_RCC_OscConfig+0x340>)
 8001b90:	681b      	ldr	r3, [r3, #0]
 8001b92:	4a85      	ldr	r2, [pc, #532]	@ (8001da8 <HAL_RCC_OscConfig+0x350>)
 8001b94:	4013      	ands	r3, r2
 8001b96:	0019      	movs	r1, r3
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	691a      	ldr	r2, [r3, #16]
 8001b9c:	4b7e      	ldr	r3, [pc, #504]	@ (8001d98 <HAL_RCC_OscConfig+0x340>)
 8001b9e:	430a      	orrs	r2, r1
 8001ba0:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 8001ba2:	4b7d      	ldr	r3, [pc, #500]	@ (8001d98 <HAL_RCC_OscConfig+0x340>)
 8001ba4:	681b      	ldr	r3, [r3, #0]
 8001ba6:	0adb      	lsrs	r3, r3, #11
 8001ba8:	2207      	movs	r2, #7
 8001baa:	4013      	ands	r3, r2
 8001bac:	4a7f      	ldr	r2, [pc, #508]	@ (8001dac <HAL_RCC_OscConfig+0x354>)
 8001bae:	40da      	lsrs	r2, r3
 8001bb0:	4b7f      	ldr	r3, [pc, #508]	@ (8001db0 <HAL_RCC_OscConfig+0x358>)
 8001bb2:	601a      	str	r2, [r3, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8001bb4:	4b7f      	ldr	r3, [pc, #508]	@ (8001db4 <HAL_RCC_OscConfig+0x35c>)
 8001bb6:	681b      	ldr	r3, [r3, #0]
 8001bb8:	0018      	movs	r0, r3
 8001bba:	f7ff f97b 	bl	8000eb4 <HAL_InitTick>
 8001bbe:	1e03      	subs	r3, r0, #0
 8001bc0:	d050      	beq.n	8001c64 <HAL_RCC_OscConfig+0x20c>
        {
          return HAL_ERROR;
 8001bc2:	2301      	movs	r3, #1
 8001bc4:	e122      	b.n	8001e0c <HAL_RCC_OscConfig+0x3b4>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	68db      	ldr	r3, [r3, #12]
 8001bca:	2b00      	cmp	r3, #0
 8001bcc:	d030      	beq.n	8001c30 <HAL_RCC_OscConfig+0x1d8>
      {
        /* Configure the HSI48 division factor */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8001bce:	4b72      	ldr	r3, [pc, #456]	@ (8001d98 <HAL_RCC_OscConfig+0x340>)
 8001bd0:	681b      	ldr	r3, [r3, #0]
 8001bd2:	4a75      	ldr	r2, [pc, #468]	@ (8001da8 <HAL_RCC_OscConfig+0x350>)
 8001bd4:	4013      	ands	r3, r2
 8001bd6:	0019      	movs	r1, r3
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	691a      	ldr	r2, [r3, #16]
 8001bdc:	4b6e      	ldr	r3, [pc, #440]	@ (8001d98 <HAL_RCC_OscConfig+0x340>)
 8001bde:	430a      	orrs	r2, r1
 8001be0:	601a      	str	r2, [r3, #0]

        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI_ENABLE();
 8001be2:	4b6d      	ldr	r3, [pc, #436]	@ (8001d98 <HAL_RCC_OscConfig+0x340>)
 8001be4:	681a      	ldr	r2, [r3, #0]
 8001be6:	4b6c      	ldr	r3, [pc, #432]	@ (8001d98 <HAL_RCC_OscConfig+0x340>)
 8001be8:	2180      	movs	r1, #128	@ 0x80
 8001bea:	0049      	lsls	r1, r1, #1
 8001bec:	430a      	orrs	r2, r1
 8001bee:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001bf0:	f7ff f9bc 	bl	8000f6c <HAL_GetTick>
 8001bf4:	0003      	movs	r3, r0
 8001bf6:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001bf8:	e008      	b.n	8001c0c <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSI_TIMEOUT_VALUE)
 8001bfa:	f7ff f9b7 	bl	8000f6c <HAL_GetTick>
 8001bfe:	0002      	movs	r2, r0
 8001c00:	693b      	ldr	r3, [r7, #16]
 8001c02:	1ad3      	subs	r3, r2, r3
 8001c04:	2b02      	cmp	r3, #2
 8001c06:	d901      	bls.n	8001c0c <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001c08:	2303      	movs	r3, #3
 8001c0a:	e0ff      	b.n	8001e0c <HAL_RCC_OscConfig+0x3b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001c0c:	4b62      	ldr	r3, [pc, #392]	@ (8001d98 <HAL_RCC_OscConfig+0x340>)
 8001c0e:	681a      	ldr	r2, [r3, #0]
 8001c10:	2380      	movs	r3, #128	@ 0x80
 8001c12:	00db      	lsls	r3, r3, #3
 8001c14:	4013      	ands	r3, r2
 8001c16:	d0f0      	beq.n	8001bfa <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001c18:	4b5f      	ldr	r3, [pc, #380]	@ (8001d98 <HAL_RCC_OscConfig+0x340>)
 8001c1a:	685b      	ldr	r3, [r3, #4]
 8001c1c:	4a61      	ldr	r2, [pc, #388]	@ (8001da4 <HAL_RCC_OscConfig+0x34c>)
 8001c1e:	4013      	ands	r3, r2
 8001c20:	0019      	movs	r1, r3
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	695b      	ldr	r3, [r3, #20]
 8001c26:	021a      	lsls	r2, r3, #8
 8001c28:	4b5b      	ldr	r3, [pc, #364]	@ (8001d98 <HAL_RCC_OscConfig+0x340>)
 8001c2a:	430a      	orrs	r2, r1
 8001c2c:	605a      	str	r2, [r3, #4]
 8001c2e:	e019      	b.n	8001c64 <HAL_RCC_OscConfig+0x20c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI_DISABLE();
 8001c30:	4b59      	ldr	r3, [pc, #356]	@ (8001d98 <HAL_RCC_OscConfig+0x340>)
 8001c32:	681a      	ldr	r2, [r3, #0]
 8001c34:	4b58      	ldr	r3, [pc, #352]	@ (8001d98 <HAL_RCC_OscConfig+0x340>)
 8001c36:	4960      	ldr	r1, [pc, #384]	@ (8001db8 <HAL_RCC_OscConfig+0x360>)
 8001c38:	400a      	ands	r2, r1
 8001c3a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c3c:	f7ff f996 	bl	8000f6c <HAL_GetTick>
 8001c40:	0003      	movs	r3, r0
 8001c42:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001c44:	e008      	b.n	8001c58 <HAL_RCC_OscConfig+0x200>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSI_TIMEOUT_VALUE)
 8001c46:	f7ff f991 	bl	8000f6c <HAL_GetTick>
 8001c4a:	0002      	movs	r2, r0
 8001c4c:	693b      	ldr	r3, [r7, #16]
 8001c4e:	1ad3      	subs	r3, r2, r3
 8001c50:	2b02      	cmp	r3, #2
 8001c52:	d901      	bls.n	8001c58 <HAL_RCC_OscConfig+0x200>
          {
            return HAL_TIMEOUT;
 8001c54:	2303      	movs	r3, #3
 8001c56:	e0d9      	b.n	8001e0c <HAL_RCC_OscConfig+0x3b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001c58:	4b4f      	ldr	r3, [pc, #316]	@ (8001d98 <HAL_RCC_OscConfig+0x340>)
 8001c5a:	681a      	ldr	r2, [r3, #0]
 8001c5c:	2380      	movs	r3, #128	@ 0x80
 8001c5e:	00db      	lsls	r3, r3, #3
 8001c60:	4013      	ands	r3, r2
 8001c62:	d1f0      	bne.n	8001c46 <HAL_RCC_OscConfig+0x1ee>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	681b      	ldr	r3, [r3, #0]
 8001c68:	2208      	movs	r2, #8
 8001c6a:	4013      	ands	r3, r2
 8001c6c:	d042      	beq.n	8001cf4 <HAL_RCC_OscConfig+0x29c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_LSI)
 8001c6e:	4b4a      	ldr	r3, [pc, #296]	@ (8001d98 <HAL_RCC_OscConfig+0x340>)
 8001c70:	689b      	ldr	r3, [r3, #8]
 8001c72:	2238      	movs	r2, #56	@ 0x38
 8001c74:	4013      	ands	r3, r2
 8001c76:	2b18      	cmp	r3, #24
 8001c78:	d105      	bne.n	8001c86 <HAL_RCC_OscConfig+0x22e>
    {
      /* When LSI is used as system clock it will not be disabled */
      if (RCC_OscInitStruct->LSIState == RCC_LSI_OFF)
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	699b      	ldr	r3, [r3, #24]
 8001c7e:	2b00      	cmp	r3, #0
 8001c80:	d138      	bne.n	8001cf4 <HAL_RCC_OscConfig+0x29c>
      {
        return HAL_ERROR;
 8001c82:	2301      	movs	r3, #1
 8001c84:	e0c2      	b.n	8001e0c <HAL_RCC_OscConfig+0x3b4>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	699b      	ldr	r3, [r3, #24]
 8001c8a:	2b00      	cmp	r3, #0
 8001c8c:	d019      	beq.n	8001cc2 <HAL_RCC_OscConfig+0x26a>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 8001c8e:	4b42      	ldr	r3, [pc, #264]	@ (8001d98 <HAL_RCC_OscConfig+0x340>)
 8001c90:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8001c92:	4b41      	ldr	r3, [pc, #260]	@ (8001d98 <HAL_RCC_OscConfig+0x340>)
 8001c94:	2101      	movs	r1, #1
 8001c96:	430a      	orrs	r2, r1
 8001c98:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c9a:	f7ff f967 	bl	8000f6c <HAL_GetTick>
 8001c9e:	0003      	movs	r3, r0
 8001ca0:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR2, RCC_CSR2_LSIRDY) == 0U)
 8001ca2:	e008      	b.n	8001cb6 <HAL_RCC_OscConfig+0x25e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSI_TIMEOUT_VALUE)
 8001ca4:	f7ff f962 	bl	8000f6c <HAL_GetTick>
 8001ca8:	0002      	movs	r2, r0
 8001caa:	693b      	ldr	r3, [r7, #16]
 8001cac:	1ad3      	subs	r3, r2, r3
 8001cae:	2b02      	cmp	r3, #2
 8001cb0:	d901      	bls.n	8001cb6 <HAL_RCC_OscConfig+0x25e>
          {
            return HAL_TIMEOUT;
 8001cb2:	2303      	movs	r3, #3
 8001cb4:	e0aa      	b.n	8001e0c <HAL_RCC_OscConfig+0x3b4>
        while (READ_BIT(RCC->CSR2, RCC_CSR2_LSIRDY) == 0U)
 8001cb6:	4b38      	ldr	r3, [pc, #224]	@ (8001d98 <HAL_RCC_OscConfig+0x340>)
 8001cb8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001cba:	2202      	movs	r2, #2
 8001cbc:	4013      	ands	r3, r2
 8001cbe:	d0f1      	beq.n	8001ca4 <HAL_RCC_OscConfig+0x24c>
 8001cc0:	e018      	b.n	8001cf4 <HAL_RCC_OscConfig+0x29c>
        }
      }
      else
      {
        /* Disable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_DISABLE();
 8001cc2:	4b35      	ldr	r3, [pc, #212]	@ (8001d98 <HAL_RCC_OscConfig+0x340>)
 8001cc4:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8001cc6:	4b34      	ldr	r3, [pc, #208]	@ (8001d98 <HAL_RCC_OscConfig+0x340>)
 8001cc8:	2101      	movs	r1, #1
 8001cca:	438a      	bics	r2, r1
 8001ccc:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001cce:	f7ff f94d 	bl	8000f6c <HAL_GetTick>
 8001cd2:	0003      	movs	r3, r0
 8001cd4:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is disabled */
        while (READ_BIT(RCC->CSR2, RCC_CSR2_LSIRDY) != 0U)
 8001cd6:	e008      	b.n	8001cea <HAL_RCC_OscConfig+0x292>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSI_TIMEOUT_VALUE)
 8001cd8:	f7ff f948 	bl	8000f6c <HAL_GetTick>
 8001cdc:	0002      	movs	r2, r0
 8001cde:	693b      	ldr	r3, [r7, #16]
 8001ce0:	1ad3      	subs	r3, r2, r3
 8001ce2:	2b02      	cmp	r3, #2
 8001ce4:	d901      	bls.n	8001cea <HAL_RCC_OscConfig+0x292>
          {
            return HAL_TIMEOUT;
 8001ce6:	2303      	movs	r3, #3
 8001ce8:	e090      	b.n	8001e0c <HAL_RCC_OscConfig+0x3b4>
        while (READ_BIT(RCC->CSR2, RCC_CSR2_LSIRDY) != 0U)
 8001cea:	4b2b      	ldr	r3, [pc, #172]	@ (8001d98 <HAL_RCC_OscConfig+0x340>)
 8001cec:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001cee:	2202      	movs	r2, #2
 8001cf0:	4013      	ands	r3, r2
 8001cf2:	d1f1      	bne.n	8001cd8 <HAL_RCC_OscConfig+0x280>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	681b      	ldr	r3, [r3, #0]
 8001cf8:	2204      	movs	r2, #4
 8001cfa:	4013      	ands	r3, r2
 8001cfc:	d100      	bne.n	8001d00 <HAL_RCC_OscConfig+0x2a8>
 8001cfe:	e084      	b.n	8001e0a <HAL_RCC_OscConfig+0x3b2>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001d00:	230f      	movs	r3, #15
 8001d02:	18fb      	adds	r3, r7, r3
 8001d04:	2200      	movs	r2, #0
 8001d06:	701a      	strb	r2, [r3, #0]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_LSE)
 8001d08:	4b23      	ldr	r3, [pc, #140]	@ (8001d98 <HAL_RCC_OscConfig+0x340>)
 8001d0a:	689b      	ldr	r3, [r3, #8]
 8001d0c:	2238      	movs	r2, #56	@ 0x38
 8001d0e:	4013      	ands	r3, r2
 8001d10:	2b20      	cmp	r3, #32
 8001d12:	d106      	bne.n	8001d22 <HAL_RCC_OscConfig+0x2ca>
    {
      if (RCC_OscInitStruct->LSEState == RCC_LSE_OFF)
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	689b      	ldr	r3, [r3, #8]
 8001d18:	2b00      	cmp	r3, #0
 8001d1a:	d000      	beq.n	8001d1e <HAL_RCC_OscConfig+0x2c6>
 8001d1c:	e075      	b.n	8001e0a <HAL_RCC_OscConfig+0x3b2>
      {
        return HAL_ERROR;
 8001d1e:	2301      	movs	r3, #1
 8001d20:	e074      	b.n	8001e0c <HAL_RCC_OscConfig+0x3b4>
    }
    else
    {
      /* Update LSE configuration in RTC Domain control register    */
      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	689b      	ldr	r3, [r3, #8]
 8001d26:	2b01      	cmp	r3, #1
 8001d28:	d106      	bne.n	8001d38 <HAL_RCC_OscConfig+0x2e0>
 8001d2a:	4b1b      	ldr	r3, [pc, #108]	@ (8001d98 <HAL_RCC_OscConfig+0x340>)
 8001d2c:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8001d2e:	4b1a      	ldr	r3, [pc, #104]	@ (8001d98 <HAL_RCC_OscConfig+0x340>)
 8001d30:	2101      	movs	r1, #1
 8001d32:	430a      	orrs	r2, r1
 8001d34:	65da      	str	r2, [r3, #92]	@ 0x5c
 8001d36:	e01c      	b.n	8001d72 <HAL_RCC_OscConfig+0x31a>
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	689b      	ldr	r3, [r3, #8]
 8001d3c:	2b05      	cmp	r3, #5
 8001d3e:	d10c      	bne.n	8001d5a <HAL_RCC_OscConfig+0x302>
 8001d40:	4b15      	ldr	r3, [pc, #84]	@ (8001d98 <HAL_RCC_OscConfig+0x340>)
 8001d42:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8001d44:	4b14      	ldr	r3, [pc, #80]	@ (8001d98 <HAL_RCC_OscConfig+0x340>)
 8001d46:	2104      	movs	r1, #4
 8001d48:	430a      	orrs	r2, r1
 8001d4a:	65da      	str	r2, [r3, #92]	@ 0x5c
 8001d4c:	4b12      	ldr	r3, [pc, #72]	@ (8001d98 <HAL_RCC_OscConfig+0x340>)
 8001d4e:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8001d50:	4b11      	ldr	r3, [pc, #68]	@ (8001d98 <HAL_RCC_OscConfig+0x340>)
 8001d52:	2101      	movs	r1, #1
 8001d54:	430a      	orrs	r2, r1
 8001d56:	65da      	str	r2, [r3, #92]	@ 0x5c
 8001d58:	e00b      	b.n	8001d72 <HAL_RCC_OscConfig+0x31a>
 8001d5a:	4b0f      	ldr	r3, [pc, #60]	@ (8001d98 <HAL_RCC_OscConfig+0x340>)
 8001d5c:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8001d5e:	4b0e      	ldr	r3, [pc, #56]	@ (8001d98 <HAL_RCC_OscConfig+0x340>)
 8001d60:	2101      	movs	r1, #1
 8001d62:	438a      	bics	r2, r1
 8001d64:	65da      	str	r2, [r3, #92]	@ 0x5c
 8001d66:	4b0c      	ldr	r3, [pc, #48]	@ (8001d98 <HAL_RCC_OscConfig+0x340>)
 8001d68:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8001d6a:	4b0b      	ldr	r3, [pc, #44]	@ (8001d98 <HAL_RCC_OscConfig+0x340>)
 8001d6c:	2104      	movs	r1, #4
 8001d6e:	438a      	bics	r2, r1
 8001d70:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	689b      	ldr	r3, [r3, #8]
 8001d76:	2b00      	cmp	r3, #0
 8001d78:	d028      	beq.n	8001dcc <HAL_RCC_OscConfig+0x374>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d7a:	f7ff f8f7 	bl	8000f6c <HAL_GetTick>
 8001d7e:	0003      	movs	r3, r0
 8001d80:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->CSR1, RCC_CSR1_LSERDY) == 0U)
 8001d82:	e01d      	b.n	8001dc0 <HAL_RCC_OscConfig+0x368>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001d84:	f7ff f8f2 	bl	8000f6c <HAL_GetTick>
 8001d88:	0002      	movs	r2, r0
 8001d8a:	693b      	ldr	r3, [r7, #16]
 8001d8c:	1ad3      	subs	r3, r2, r3
 8001d8e:	4a0b      	ldr	r2, [pc, #44]	@ (8001dbc <HAL_RCC_OscConfig+0x364>)
 8001d90:	4293      	cmp	r3, r2
 8001d92:	d915      	bls.n	8001dc0 <HAL_RCC_OscConfig+0x368>
          {
            return HAL_TIMEOUT;
 8001d94:	2303      	movs	r3, #3
 8001d96:	e039      	b.n	8001e0c <HAL_RCC_OscConfig+0x3b4>
 8001d98:	40021000 	.word	0x40021000
 8001d9c:	fffeffff 	.word	0xfffeffff
 8001da0:	fffbffff 	.word	0xfffbffff
 8001da4:	ffff80ff 	.word	0xffff80ff
 8001da8:	ffffc7ff 	.word	0xffffc7ff
 8001dac:	02dc6c00 	.word	0x02dc6c00
 8001db0:	20000008 	.word	0x20000008
 8001db4:	2000000c 	.word	0x2000000c
 8001db8:	fffffeff 	.word	0xfffffeff
 8001dbc:	00001388 	.word	0x00001388
        while (READ_BIT(RCC->CSR1, RCC_CSR1_LSERDY) == 0U)
 8001dc0:	4b14      	ldr	r3, [pc, #80]	@ (8001e14 <HAL_RCC_OscConfig+0x3bc>)
 8001dc2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001dc4:	2202      	movs	r2, #2
 8001dc6:	4013      	ands	r3, r2
 8001dc8:	d0dc      	beq.n	8001d84 <HAL_RCC_OscConfig+0x32c>
 8001dca:	e013      	b.n	8001df4 <HAL_RCC_OscConfig+0x39c>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001dcc:	f7ff f8ce 	bl	8000f6c <HAL_GetTick>
 8001dd0:	0003      	movs	r3, r0
 8001dd2:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->CSR1, RCC_CSR1_LSERDY) != 0U)
 8001dd4:	e009      	b.n	8001dea <HAL_RCC_OscConfig+0x392>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001dd6:	f7ff f8c9 	bl	8000f6c <HAL_GetTick>
 8001dda:	0002      	movs	r2, r0
 8001ddc:	693b      	ldr	r3, [r7, #16]
 8001dde:	1ad3      	subs	r3, r2, r3
 8001de0:	4a0d      	ldr	r2, [pc, #52]	@ (8001e18 <HAL_RCC_OscConfig+0x3c0>)
 8001de2:	4293      	cmp	r3, r2
 8001de4:	d901      	bls.n	8001dea <HAL_RCC_OscConfig+0x392>
          {
            return HAL_TIMEOUT;
 8001de6:	2303      	movs	r3, #3
 8001de8:	e010      	b.n	8001e0c <HAL_RCC_OscConfig+0x3b4>
        while (READ_BIT(RCC->CSR1, RCC_CSR1_LSERDY) != 0U)
 8001dea:	4b0a      	ldr	r3, [pc, #40]	@ (8001e14 <HAL_RCC_OscConfig+0x3bc>)
 8001dec:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001dee:	2202      	movs	r2, #2
 8001df0:	4013      	ands	r3, r2
 8001df2:	d1f0      	bne.n	8001dd6 <HAL_RCC_OscConfig+0x37e>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 8001df4:	230f      	movs	r3, #15
 8001df6:	18fb      	adds	r3, r7, r3
 8001df8:	781b      	ldrb	r3, [r3, #0]
 8001dfa:	2b01      	cmp	r3, #1
 8001dfc:	d105      	bne.n	8001e0a <HAL_RCC_OscConfig+0x3b2>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 8001dfe:	4b05      	ldr	r3, [pc, #20]	@ (8001e14 <HAL_RCC_OscConfig+0x3bc>)
 8001e00:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8001e02:	4b04      	ldr	r3, [pc, #16]	@ (8001e14 <HAL_RCC_OscConfig+0x3bc>)
 8001e04:	4905      	ldr	r1, [pc, #20]	@ (8001e1c <HAL_RCC_OscConfig+0x3c4>)
 8001e06:	400a      	ands	r2, r1
 8001e08:	63da      	str	r2, [r3, #60]	@ 0x3c
        }
      }
    }
  }
#endif /* RCC_CR_HSIUSB48ON */
  return HAL_OK;
 8001e0a:	2300      	movs	r3, #0
}
 8001e0c:	0018      	movs	r0, r3
 8001e0e:	46bd      	mov	sp, r7
 8001e10:	b006      	add	sp, #24
 8001e12:	bd80      	pop	{r7, pc}
 8001e14:	40021000 	.word	0x40021000
 8001e18:	00001388 	.word	0x00001388
 8001e1c:	efffffff 	.word	0xefffffff

08001e20 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001e20:	b580      	push	{r7, lr}
 8001e22:	b084      	sub	sp, #16
 8001e24:	af00      	add	r7, sp, #0
 8001e26:	6078      	str	r0, [r7, #4]
 8001e28:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	2b00      	cmp	r3, #0
 8001e2e:	d101      	bne.n	8001e34 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001e30:	2301      	movs	r3, #1
 8001e32:	e0e9      	b.n	8002008 <HAL_RCC_ClockConfig+0x1e8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001e34:	4b76      	ldr	r3, [pc, #472]	@ (8002010 <HAL_RCC_ClockConfig+0x1f0>)
 8001e36:	681b      	ldr	r3, [r3, #0]
 8001e38:	2207      	movs	r2, #7
 8001e3a:	4013      	ands	r3, r2
 8001e3c:	683a      	ldr	r2, [r7, #0]
 8001e3e:	429a      	cmp	r2, r3
 8001e40:	d91e      	bls.n	8001e80 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001e42:	4b73      	ldr	r3, [pc, #460]	@ (8002010 <HAL_RCC_ClockConfig+0x1f0>)
 8001e44:	681b      	ldr	r3, [r3, #0]
 8001e46:	2207      	movs	r2, #7
 8001e48:	4393      	bics	r3, r2
 8001e4a:	0019      	movs	r1, r3
 8001e4c:	4b70      	ldr	r3, [pc, #448]	@ (8002010 <HAL_RCC_ClockConfig+0x1f0>)
 8001e4e:	683a      	ldr	r2, [r7, #0]
 8001e50:	430a      	orrs	r2, r1
 8001e52:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8001e54:	f7ff f88a 	bl	8000f6c <HAL_GetTick>
 8001e58:	0003      	movs	r3, r0
 8001e5a:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001e5c:	e009      	b.n	8001e72 <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 8001e5e:	f7ff f885 	bl	8000f6c <HAL_GetTick>
 8001e62:	0002      	movs	r2, r0
 8001e64:	68fb      	ldr	r3, [r7, #12]
 8001e66:	1ad3      	subs	r3, r2, r3
 8001e68:	4a6a      	ldr	r2, [pc, #424]	@ (8002014 <HAL_RCC_ClockConfig+0x1f4>)
 8001e6a:	4293      	cmp	r3, r2
 8001e6c:	d901      	bls.n	8001e72 <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 8001e6e:	2303      	movs	r3, #3
 8001e70:	e0ca      	b.n	8002008 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001e72:	4b67      	ldr	r3, [pc, #412]	@ (8002010 <HAL_RCC_ClockConfig+0x1f0>)
 8001e74:	681b      	ldr	r3, [r3, #0]
 8001e76:	2207      	movs	r2, #7
 8001e78:	4013      	ands	r3, r2
 8001e7a:	683a      	ldr	r2, [r7, #0]
 8001e7c:	429a      	cmp	r2, r3
 8001e7e:	d1ee      	bne.n	8001e5e <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	2202      	movs	r2, #2
 8001e86:	4013      	ands	r3, r2
 8001e88:	d017      	beq.n	8001eba <HAL_RCC_ClockConfig+0x9a>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	681b      	ldr	r3, [r3, #0]
 8001e8e:	2204      	movs	r2, #4
 8001e90:	4013      	ands	r3, r2
 8001e92:	d008      	beq.n	8001ea6 <HAL_RCC_ClockConfig+0x86>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8001e94:	4b60      	ldr	r3, [pc, #384]	@ (8002018 <HAL_RCC_ClockConfig+0x1f8>)
 8001e96:	689b      	ldr	r3, [r3, #8]
 8001e98:	4a60      	ldr	r2, [pc, #384]	@ (800201c <HAL_RCC_ClockConfig+0x1fc>)
 8001e9a:	401a      	ands	r2, r3
 8001e9c:	4b5e      	ldr	r3, [pc, #376]	@ (8002018 <HAL_RCC_ClockConfig+0x1f8>)
 8001e9e:	21b0      	movs	r1, #176	@ 0xb0
 8001ea0:	0109      	lsls	r1, r1, #4
 8001ea2:	430a      	orrs	r2, r1
 8001ea4:	609a      	str	r2, [r3, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001ea6:	4b5c      	ldr	r3, [pc, #368]	@ (8002018 <HAL_RCC_ClockConfig+0x1f8>)
 8001ea8:	689b      	ldr	r3, [r3, #8]
 8001eaa:	4a5d      	ldr	r2, [pc, #372]	@ (8002020 <HAL_RCC_ClockConfig+0x200>)
 8001eac:	4013      	ands	r3, r2
 8001eae:	0019      	movs	r1, r3
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	68da      	ldr	r2, [r3, #12]
 8001eb4:	4b58      	ldr	r3, [pc, #352]	@ (8002018 <HAL_RCC_ClockConfig+0x1f8>)
 8001eb6:	430a      	orrs	r2, r1
 8001eb8:	609a      	str	r2, [r3, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	681b      	ldr	r3, [r3, #0]
 8001ebe:	2201      	movs	r2, #1
 8001ec0:	4013      	ands	r3, r2
 8001ec2:	d055      	beq.n	8001f70 <HAL_RCC_ClockConfig+0x150>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

#if defined(RCC_CR_SYSDIV)
    MODIFY_REG(RCC->CR, RCC_CR_SYSDIV, RCC_ClkInitStruct->SYSCLKDivider);
 8001ec4:	4b54      	ldr	r3, [pc, #336]	@ (8002018 <HAL_RCC_ClockConfig+0x1f8>)
 8001ec6:	681b      	ldr	r3, [r3, #0]
 8001ec8:	221c      	movs	r2, #28
 8001eca:	4393      	bics	r3, r2
 8001ecc:	0019      	movs	r1, r3
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	689a      	ldr	r2, [r3, #8]
 8001ed2:	4b51      	ldr	r3, [pc, #324]	@ (8002018 <HAL_RCC_ClockConfig+0x1f8>)
 8001ed4:	430a      	orrs	r2, r1
 8001ed6:	601a      	str	r2, [r3, #0]
#endif /* RCC_CR_SYSDIV */

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	685b      	ldr	r3, [r3, #4]
 8001edc:	2b01      	cmp	r3, #1
 8001ede:	d107      	bne.n	8001ef0 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the HSE ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001ee0:	4b4d      	ldr	r3, [pc, #308]	@ (8002018 <HAL_RCC_ClockConfig+0x1f8>)
 8001ee2:	681a      	ldr	r2, [r3, #0]
 8001ee4:	2380      	movs	r3, #128	@ 0x80
 8001ee6:	029b      	lsls	r3, r3, #10
 8001ee8:	4013      	ands	r3, r2
 8001eea:	d11f      	bne.n	8001f2c <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8001eec:	2301      	movs	r3, #1
 8001eee:	e08b      	b.n	8002008 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	685b      	ldr	r3, [r3, #4]
 8001ef4:	2b00      	cmp	r3, #0
 8001ef6:	d107      	bne.n	8001f08 <HAL_RCC_ClockConfig+0xe8>
    {
      /* Check the HSI ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001ef8:	4b47      	ldr	r3, [pc, #284]	@ (8002018 <HAL_RCC_ClockConfig+0x1f8>)
 8001efa:	681a      	ldr	r2, [r3, #0]
 8001efc:	2380      	movs	r3, #128	@ 0x80
 8001efe:	00db      	lsls	r3, r3, #3
 8001f00:	4013      	ands	r3, r2
 8001f02:	d113      	bne.n	8001f2c <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8001f04:	2301      	movs	r3, #1
 8001f06:	e07f      	b.n	8002008 <HAL_RCC_ClockConfig+0x1e8>
        return HAL_ERROR;
      }
    }
#endif /* RCC_HSI48_SUPPORT */
    /* LSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	685b      	ldr	r3, [r3, #4]
 8001f0c:	2b03      	cmp	r3, #3
 8001f0e:	d106      	bne.n	8001f1e <HAL_RCC_ClockConfig+0xfe>
    {
      /* Check the LSI ready flag */
      if (READ_BIT(RCC->CSR2, RCC_CSR2_LSIRDY) == 0U)
 8001f10:	4b41      	ldr	r3, [pc, #260]	@ (8002018 <HAL_RCC_ClockConfig+0x1f8>)
 8001f12:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001f14:	2202      	movs	r2, #2
 8001f16:	4013      	ands	r3, r2
 8001f18:	d108      	bne.n	8001f2c <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8001f1a:	2301      	movs	r3, #1
 8001f1c:	e074      	b.n	8002008 <HAL_RCC_ClockConfig+0x1e8>
    }
    /* LSE is selected as System Clock Source */
    else
    {
      /* Check the LSE ready flag */
      if (READ_BIT(RCC->CSR1, RCC_CSR1_LSERDY) == 0U)
 8001f1e:	4b3e      	ldr	r3, [pc, #248]	@ (8002018 <HAL_RCC_ClockConfig+0x1f8>)
 8001f20:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001f22:	2202      	movs	r2, #2
 8001f24:	4013      	ands	r3, r2
 8001f26:	d101      	bne.n	8001f2c <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8001f28:	2301      	movs	r3, #1
 8001f2a:	e06d      	b.n	8002008 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001f2c:	4b3a      	ldr	r3, [pc, #232]	@ (8002018 <HAL_RCC_ClockConfig+0x1f8>)
 8001f2e:	689b      	ldr	r3, [r3, #8]
 8001f30:	2207      	movs	r2, #7
 8001f32:	4393      	bics	r3, r2
 8001f34:	0019      	movs	r1, r3
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	685a      	ldr	r2, [r3, #4]
 8001f3a:	4b37      	ldr	r3, [pc, #220]	@ (8002018 <HAL_RCC_ClockConfig+0x1f8>)
 8001f3c:	430a      	orrs	r2, r1
 8001f3e:	609a      	str	r2, [r3, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001f40:	f7ff f814 	bl	8000f6c <HAL_GetTick>
 8001f44:	0003      	movs	r3, r0
 8001f46:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001f48:	e009      	b.n	8001f5e <HAL_RCC_ClockConfig+0x13e>
    {
      if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 8001f4a:	f7ff f80f 	bl	8000f6c <HAL_GetTick>
 8001f4e:	0002      	movs	r2, r0
 8001f50:	68fb      	ldr	r3, [r7, #12]
 8001f52:	1ad3      	subs	r3, r2, r3
 8001f54:	4a2f      	ldr	r2, [pc, #188]	@ (8002014 <HAL_RCC_ClockConfig+0x1f4>)
 8001f56:	4293      	cmp	r3, r2
 8001f58:	d901      	bls.n	8001f5e <HAL_RCC_ClockConfig+0x13e>
      {
        return HAL_TIMEOUT;
 8001f5a:	2303      	movs	r3, #3
 8001f5c:	e054      	b.n	8002008 <HAL_RCC_ClockConfig+0x1e8>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001f5e:	4b2e      	ldr	r3, [pc, #184]	@ (8002018 <HAL_RCC_ClockConfig+0x1f8>)
 8001f60:	689b      	ldr	r3, [r3, #8]
 8001f62:	2238      	movs	r2, #56	@ 0x38
 8001f64:	401a      	ands	r2, r3
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	685b      	ldr	r3, [r3, #4]
 8001f6a:	00db      	lsls	r3, r3, #3
 8001f6c:	429a      	cmp	r2, r3
 8001f6e:	d1ec      	bne.n	8001f4a <HAL_RCC_ClockConfig+0x12a>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001f70:	4b27      	ldr	r3, [pc, #156]	@ (8002010 <HAL_RCC_ClockConfig+0x1f0>)
 8001f72:	681b      	ldr	r3, [r3, #0]
 8001f74:	2207      	movs	r2, #7
 8001f76:	4013      	ands	r3, r2
 8001f78:	683a      	ldr	r2, [r7, #0]
 8001f7a:	429a      	cmp	r2, r3
 8001f7c:	d21e      	bcs.n	8001fbc <HAL_RCC_ClockConfig+0x19c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001f7e:	4b24      	ldr	r3, [pc, #144]	@ (8002010 <HAL_RCC_ClockConfig+0x1f0>)
 8001f80:	681b      	ldr	r3, [r3, #0]
 8001f82:	2207      	movs	r2, #7
 8001f84:	4393      	bics	r3, r2
 8001f86:	0019      	movs	r1, r3
 8001f88:	4b21      	ldr	r3, [pc, #132]	@ (8002010 <HAL_RCC_ClockConfig+0x1f0>)
 8001f8a:	683a      	ldr	r2, [r7, #0]
 8001f8c:	430a      	orrs	r2, r1
 8001f8e:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8001f90:	f7fe ffec 	bl	8000f6c <HAL_GetTick>
 8001f94:	0003      	movs	r3, r0
 8001f96:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001f98:	e009      	b.n	8001fae <HAL_RCC_ClockConfig+0x18e>
    {
      if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 8001f9a:	f7fe ffe7 	bl	8000f6c <HAL_GetTick>
 8001f9e:	0002      	movs	r2, r0
 8001fa0:	68fb      	ldr	r3, [r7, #12]
 8001fa2:	1ad3      	subs	r3, r2, r3
 8001fa4:	4a1b      	ldr	r2, [pc, #108]	@ (8002014 <HAL_RCC_ClockConfig+0x1f4>)
 8001fa6:	4293      	cmp	r3, r2
 8001fa8:	d901      	bls.n	8001fae <HAL_RCC_ClockConfig+0x18e>
      {
        return HAL_TIMEOUT;
 8001faa:	2303      	movs	r3, #3
 8001fac:	e02c      	b.n	8002008 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001fae:	4b18      	ldr	r3, [pc, #96]	@ (8002010 <HAL_RCC_ClockConfig+0x1f0>)
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	2207      	movs	r2, #7
 8001fb4:	4013      	ands	r3, r2
 8001fb6:	683a      	ldr	r2, [r7, #0]
 8001fb8:	429a      	cmp	r2, r3
 8001fba:	d1ee      	bne.n	8001f9a <HAL_RCC_ClockConfig+0x17a>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	2204      	movs	r2, #4
 8001fc2:	4013      	ands	r3, r2
 8001fc4:	d009      	beq.n	8001fda <HAL_RCC_ClockConfig+0x1ba>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8001fc6:	4b14      	ldr	r3, [pc, #80]	@ (8002018 <HAL_RCC_ClockConfig+0x1f8>)
 8001fc8:	689b      	ldr	r3, [r3, #8]
 8001fca:	4a16      	ldr	r2, [pc, #88]	@ (8002024 <HAL_RCC_ClockConfig+0x204>)
 8001fcc:	4013      	ands	r3, r2
 8001fce:	0019      	movs	r1, r3
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	691a      	ldr	r2, [r3, #16]
 8001fd4:	4b10      	ldr	r3, [pc, #64]	@ (8002018 <HAL_RCC_ClockConfig+0x1f8>)
 8001fd6:	430a      	orrs	r2, r1
 8001fd8:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) \
 8001fda:	f000 f82b 	bl	8002034 <HAL_RCC_GetSysClockFreq>
 8001fde:	0001      	movs	r1, r0
 8001fe0:	4b0d      	ldr	r3, [pc, #52]	@ (8002018 <HAL_RCC_ClockConfig+0x1f8>)
 8001fe2:	689b      	ldr	r3, [r3, #8]
                                                                  >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 8001fe4:	0a1b      	lsrs	r3, r3, #8
 8001fe6:	220f      	movs	r2, #15
 8001fe8:	401a      	ands	r2, r3
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) \
 8001fea:	4b0f      	ldr	r3, [pc, #60]	@ (8002028 <HAL_RCC_ClockConfig+0x208>)
 8001fec:	0092      	lsls	r2, r2, #2
 8001fee:	58d3      	ldr	r3, [r2, r3]
                                                                  >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 8001ff0:	221f      	movs	r2, #31
 8001ff2:	4013      	ands	r3, r2
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) \
 8001ff4:	000a      	movs	r2, r1
 8001ff6:	40da      	lsrs	r2, r3
 8001ff8:	4b0c      	ldr	r3, [pc, #48]	@ (800202c <HAL_RCC_ClockConfig+0x20c>)
 8001ffa:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8001ffc:	4b0c      	ldr	r3, [pc, #48]	@ (8002030 <HAL_RCC_ClockConfig+0x210>)
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	0018      	movs	r0, r3
 8002002:	f7fe ff57 	bl	8000eb4 <HAL_InitTick>
 8002006:	0003      	movs	r3, r0
}
 8002008:	0018      	movs	r0, r3
 800200a:	46bd      	mov	sp, r7
 800200c:	b004      	add	sp, #16
 800200e:	bd80      	pop	{r7, pc}
 8002010:	40022000 	.word	0x40022000
 8002014:	00001388 	.word	0x00001388
 8002018:	40021000 	.word	0x40021000
 800201c:	ffff84ff 	.word	0xffff84ff
 8002020:	fffff0ff 	.word	0xfffff0ff
 8002024:	ffff8fff 	.word	0xffff8fff
 8002028:	080040ec 	.word	0x080040ec
 800202c:	20000008 	.word	0x20000008
 8002030:	2000000c 	.word	0x2000000c

08002034 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002034:	b580      	push	{r7, lr}
 8002036:	b084      	sub	sp, #16
 8002038:	af00      	add	r7, sp, #0
  uint32_t hsidiv;
  uint32_t sysclockfreq;
#if defined(RCC_CR_SYSDIV)
  uint32_t sysclockdiv = (uint32_t)(((RCC->CR & RCC_CR_SYSDIV) >> RCC_CR_SYSDIV_Pos) + 1U);
 800203a:	4b23      	ldr	r3, [pc, #140]	@ (80020c8 <HAL_RCC_GetSysClockFreq+0x94>)
 800203c:	681b      	ldr	r3, [r3, #0]
 800203e:	089b      	lsrs	r3, r3, #2
 8002040:	2207      	movs	r2, #7
 8002042:	4013      	ands	r3, r2
 8002044:	3301      	adds	r3, #1
 8002046:	60bb      	str	r3, [r7, #8]
#endif /* RCC_CR_SYSDIV */

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8002048:	4b1f      	ldr	r3, [pc, #124]	@ (80020c8 <HAL_RCC_GetSysClockFreq+0x94>)
 800204a:	689b      	ldr	r3, [r3, #8]
 800204c:	2238      	movs	r2, #56	@ 0x38
 800204e:	4013      	ands	r3, r2
 8002050:	d10f      	bne.n	8002072 <HAL_RCC_GetSysClockFreq+0x3e>
  {
    /* HSISYS can be derived for HSI48 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 8002052:	4b1d      	ldr	r3, [pc, #116]	@ (80020c8 <HAL_RCC_GetSysClockFreq+0x94>)
 8002054:	681b      	ldr	r3, [r3, #0]
 8002056:	0adb      	lsrs	r3, r3, #11
 8002058:	2207      	movs	r2, #7
 800205a:	4013      	ands	r3, r2
 800205c:	2201      	movs	r2, #1
 800205e:	409a      	lsls	r2, r3
 8002060:	0013      	movs	r3, r2
 8002062:	607b      	str	r3, [r7, #4]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 8002064:	6879      	ldr	r1, [r7, #4]
 8002066:	4819      	ldr	r0, [pc, #100]	@ (80020cc <HAL_RCC_GetSysClockFreq+0x98>)
 8002068:	f7fe f860 	bl	800012c <__udivsi3>
 800206c:	0003      	movs	r3, r0
 800206e:	60fb      	str	r3, [r7, #12]
 8002070:	e01e      	b.n	80020b0 <HAL_RCC_GetSysClockFreq+0x7c>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8002072:	4b15      	ldr	r3, [pc, #84]	@ (80020c8 <HAL_RCC_GetSysClockFreq+0x94>)
 8002074:	689b      	ldr	r3, [r3, #8]
 8002076:	2238      	movs	r2, #56	@ 0x38
 8002078:	4013      	ands	r3, r2
 800207a:	2b08      	cmp	r3, #8
 800207c:	d102      	bne.n	8002084 <HAL_RCC_GetSysClockFreq+0x50>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 800207e:	4b14      	ldr	r3, [pc, #80]	@ (80020d0 <HAL_RCC_GetSysClockFreq+0x9c>)
 8002080:	60fb      	str	r3, [r7, #12]
 8002082:	e015      	b.n	80020b0 <HAL_RCC_GetSysClockFreq+0x7c>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_LSE)
 8002084:	4b10      	ldr	r3, [pc, #64]	@ (80020c8 <HAL_RCC_GetSysClockFreq+0x94>)
 8002086:	689b      	ldr	r3, [r3, #8]
 8002088:	2238      	movs	r2, #56	@ 0x38
 800208a:	4013      	ands	r3, r2
 800208c:	2b20      	cmp	r3, #32
 800208e:	d103      	bne.n	8002098 <HAL_RCC_GetSysClockFreq+0x64>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 8002090:	2380      	movs	r3, #128	@ 0x80
 8002092:	021b      	lsls	r3, r3, #8
 8002094:	60fb      	str	r3, [r7, #12]
 8002096:	e00b      	b.n	80020b0 <HAL_RCC_GetSysClockFreq+0x7c>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_LSI)
 8002098:	4b0b      	ldr	r3, [pc, #44]	@ (80020c8 <HAL_RCC_GetSysClockFreq+0x94>)
 800209a:	689b      	ldr	r3, [r3, #8]
 800209c:	2238      	movs	r2, #56	@ 0x38
 800209e:	4013      	ands	r3, r2
 80020a0:	2b18      	cmp	r3, #24
 80020a2:	d103      	bne.n	80020ac <HAL_RCC_GetSysClockFreq+0x78>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 80020a4:	23fa      	movs	r3, #250	@ 0xfa
 80020a6:	01db      	lsls	r3, r3, #7
 80020a8:	60fb      	str	r3, [r7, #12]
 80020aa:	e001      	b.n	80020b0 <HAL_RCC_GetSysClockFreq+0x7c>
    sysclockfreq = HSI48_VALUE;
  }
#endif /* RCC_HSI48_SUPPORT */
  else
  {
    sysclockfreq = 0U;
 80020ac:	2300      	movs	r3, #0
 80020ae:	60fb      	str	r3, [r7, #12]
  }
#if defined(RCC_CR_SYSDIV)
  sysclockfreq = sysclockfreq / sysclockdiv;
 80020b0:	68b9      	ldr	r1, [r7, #8]
 80020b2:	68f8      	ldr	r0, [r7, #12]
 80020b4:	f7fe f83a 	bl	800012c <__udivsi3>
 80020b8:	0003      	movs	r3, r0
 80020ba:	60fb      	str	r3, [r7, #12]
#endif /* RCC_CR_SYSDIV */
  return sysclockfreq;
 80020bc:	68fb      	ldr	r3, [r7, #12]
}
 80020be:	0018      	movs	r0, r3
 80020c0:	46bd      	mov	sp, r7
 80020c2:	b004      	add	sp, #16
 80020c4:	bd80      	pop	{r7, pc}
 80020c6:	46c0      	nop			@ (mov r8, r8)
 80020c8:	40021000 	.word	0x40021000
 80020cc:	02dc6c00 	.word	0x02dc6c00
 80020d0:	007a1200 	.word	0x007a1200

080020d4 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80020d4:	b580      	push	{r7, lr}
 80020d6:	af00      	add	r7, sp, #0
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) \
 80020d8:	f7ff ffac 	bl	8002034 <HAL_RCC_GetSysClockFreq>
 80020dc:	0001      	movs	r1, r0
 80020de:	4b09      	ldr	r3, [pc, #36]	@ (8002104 <HAL_RCC_GetHCLKFreq+0x30>)
 80020e0:	689b      	ldr	r3, [r3, #8]
                                                                  >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 80020e2:	0a1b      	lsrs	r3, r3, #8
 80020e4:	220f      	movs	r2, #15
 80020e6:	401a      	ands	r2, r3
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) \
 80020e8:	4b07      	ldr	r3, [pc, #28]	@ (8002108 <HAL_RCC_GetHCLKFreq+0x34>)
 80020ea:	0092      	lsls	r2, r2, #2
 80020ec:	58d3      	ldr	r3, [r2, r3]
                                                                  >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 80020ee:	221f      	movs	r2, #31
 80020f0:	4013      	ands	r3, r2
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) \
 80020f2:	000a      	movs	r2, r1
 80020f4:	40da      	lsrs	r2, r3
 80020f6:	4b05      	ldr	r3, [pc, #20]	@ (800210c <HAL_RCC_GetHCLKFreq+0x38>)
 80020f8:	601a      	str	r2, [r3, #0]
  return SystemCoreClock;
 80020fa:	4b04      	ldr	r3, [pc, #16]	@ (800210c <HAL_RCC_GetHCLKFreq+0x38>)
 80020fc:	681b      	ldr	r3, [r3, #0]
}
 80020fe:	0018      	movs	r0, r3
 8002100:	46bd      	mov	sp, r7
 8002102:	bd80      	pop	{r7, pc}
 8002104:	40021000 	.word	0x40021000
 8002108:	080040ec 	.word	0x080040ec
 800210c:	20000008 	.word	0x20000008

08002110 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002110:	b580      	push	{r7, lr}
 8002112:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE) >> RCC_CFGR_PPRE_Pos]) & 0x1FU));
 8002114:	f7ff ffde 	bl	80020d4 <HAL_RCC_GetHCLKFreq>
 8002118:	0001      	movs	r1, r0
 800211a:	4b07      	ldr	r3, [pc, #28]	@ (8002138 <HAL_RCC_GetPCLK1Freq+0x28>)
 800211c:	689b      	ldr	r3, [r3, #8]
 800211e:	0b1b      	lsrs	r3, r3, #12
 8002120:	2207      	movs	r2, #7
 8002122:	401a      	ands	r2, r3
 8002124:	4b05      	ldr	r3, [pc, #20]	@ (800213c <HAL_RCC_GetPCLK1Freq+0x2c>)
 8002126:	0092      	lsls	r2, r2, #2
 8002128:	58d3      	ldr	r3, [r2, r3]
 800212a:	221f      	movs	r2, #31
 800212c:	4013      	ands	r3, r2
 800212e:	40d9      	lsrs	r1, r3
 8002130:	000b      	movs	r3, r1
}
 8002132:	0018      	movs	r0, r3
 8002134:	46bd      	mov	sp, r7
 8002136:	bd80      	pop	{r7, pc}
 8002138:	40021000 	.word	0x40021000
 800213c:	0800412c 	.word	0x0800412c

08002140 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002140:	b580      	push	{r7, lr}
 8002142:	b082      	sub	sp, #8
 8002144:	af00      	add	r7, sp, #0
 8002146:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	2b00      	cmp	r3, #0
 800214c:	d101      	bne.n	8002152 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800214e:	2301      	movs	r3, #1
 8002150:	e046      	b.n	80021e0 <HAL_UART_Init+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	2288      	movs	r2, #136	@ 0x88
 8002156:	589b      	ldr	r3, [r3, r2]
 8002158:	2b00      	cmp	r3, #0
 800215a:	d107      	bne.n	800216c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	2284      	movs	r2, #132	@ 0x84
 8002160:	2100      	movs	r1, #0
 8002162:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	0018      	movs	r0, r3
 8002168:	f7fe fd1e 	bl	8000ba8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	2288      	movs	r2, #136	@ 0x88
 8002170:	2124      	movs	r1, #36	@ 0x24
 8002172:	5099      	str	r1, [r3, r2]

  __HAL_UART_DISABLE(huart);
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	681a      	ldr	r2, [r3, #0]
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	681b      	ldr	r3, [r3, #0]
 800217e:	2101      	movs	r1, #1
 8002180:	438a      	bics	r2, r1
 8002182:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002188:	2b00      	cmp	r3, #0
 800218a:	d003      	beq.n	8002194 <HAL_UART_Init+0x54>
  {
    UART_AdvFeatureConfig(huart);
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	0018      	movs	r0, r3
 8002190:	f000 fb5c 	bl	800284c <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	0018      	movs	r0, r3
 8002198:	f000 f9c2 	bl	8002520 <UART_SetConfig>
 800219c:	0003      	movs	r3, r0
 800219e:	2b01      	cmp	r3, #1
 80021a0:	d101      	bne.n	80021a6 <HAL_UART_Init+0x66>
  {
    return HAL_ERROR;
 80021a2:	2301      	movs	r3, #1
 80021a4:	e01c      	b.n	80021e0 <HAL_UART_Init+0xa0>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	681b      	ldr	r3, [r3, #0]
 80021aa:	685a      	ldr	r2, [r3, #4]
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	490d      	ldr	r1, [pc, #52]	@ (80021e8 <HAL_UART_Init+0xa8>)
 80021b2:	400a      	ands	r2, r1
 80021b4:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	681b      	ldr	r3, [r3, #0]
 80021ba:	689a      	ldr	r2, [r3, #8]
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	212a      	movs	r1, #42	@ 0x2a
 80021c2:	438a      	bics	r2, r1
 80021c4:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	681b      	ldr	r3, [r3, #0]
 80021ca:	681a      	ldr	r2, [r3, #0]
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	2101      	movs	r1, #1
 80021d2:	430a      	orrs	r2, r1
 80021d4:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	0018      	movs	r0, r3
 80021da:	f000 fbeb 	bl	80029b4 <UART_CheckIdleState>
 80021de:	0003      	movs	r3, r0
}
 80021e0:	0018      	movs	r0, r3
 80021e2:	46bd      	mov	sp, r7
 80021e4:	b002      	add	sp, #8
 80021e6:	bd80      	pop	{r7, pc}
 80021e8:	ffffb7ff 	.word	0xffffb7ff

080021ec <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80021ec:	b580      	push	{r7, lr}
 80021ee:	b08a      	sub	sp, #40	@ 0x28
 80021f0:	af02      	add	r7, sp, #8
 80021f2:	60f8      	str	r0, [r7, #12]
 80021f4:	60b9      	str	r1, [r7, #8]
 80021f6:	603b      	str	r3, [r7, #0]
 80021f8:	1dbb      	adds	r3, r7, #6
 80021fa:	801a      	strh	r2, [r3, #0]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80021fc:	68fb      	ldr	r3, [r7, #12]
 80021fe:	2288      	movs	r2, #136	@ 0x88
 8002200:	589b      	ldr	r3, [r3, r2]
 8002202:	2b20      	cmp	r3, #32
 8002204:	d000      	beq.n	8002208 <HAL_UART_Transmit+0x1c>
 8002206:	e090      	b.n	800232a <HAL_UART_Transmit+0x13e>
  {
    if ((pData == NULL) || (Size == 0U))
 8002208:	68bb      	ldr	r3, [r7, #8]
 800220a:	2b00      	cmp	r3, #0
 800220c:	d003      	beq.n	8002216 <HAL_UART_Transmit+0x2a>
 800220e:	1dbb      	adds	r3, r7, #6
 8002210:	881b      	ldrh	r3, [r3, #0]
 8002212:	2b00      	cmp	r3, #0
 8002214:	d101      	bne.n	800221a <HAL_UART_Transmit+0x2e>
    {
      return  HAL_ERROR;
 8002216:	2301      	movs	r3, #1
 8002218:	e088      	b.n	800232c <HAL_UART_Transmit+0x140>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800221a:	68fb      	ldr	r3, [r7, #12]
 800221c:	689a      	ldr	r2, [r3, #8]
 800221e:	2380      	movs	r3, #128	@ 0x80
 8002220:	015b      	lsls	r3, r3, #5
 8002222:	429a      	cmp	r2, r3
 8002224:	d109      	bne.n	800223a <HAL_UART_Transmit+0x4e>
 8002226:	68fb      	ldr	r3, [r7, #12]
 8002228:	691b      	ldr	r3, [r3, #16]
 800222a:	2b00      	cmp	r3, #0
 800222c:	d105      	bne.n	800223a <HAL_UART_Transmit+0x4e>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 800222e:	68bb      	ldr	r3, [r7, #8]
 8002230:	2201      	movs	r2, #1
 8002232:	4013      	ands	r3, r2
 8002234:	d001      	beq.n	800223a <HAL_UART_Transmit+0x4e>
      {
        return  HAL_ERROR;
 8002236:	2301      	movs	r3, #1
 8002238:	e078      	b.n	800232c <HAL_UART_Transmit+0x140>
      }
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800223a:	68fb      	ldr	r3, [r7, #12]
 800223c:	2290      	movs	r2, #144	@ 0x90
 800223e:	2100      	movs	r1, #0
 8002240:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002242:	68fb      	ldr	r3, [r7, #12]
 8002244:	2288      	movs	r2, #136	@ 0x88
 8002246:	2121      	movs	r1, #33	@ 0x21
 8002248:	5099      	str	r1, [r3, r2]

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800224a:	f7fe fe8f 	bl	8000f6c <HAL_GetTick>
 800224e:	0003      	movs	r3, r0
 8002250:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 8002252:	68fb      	ldr	r3, [r7, #12]
 8002254:	1dba      	adds	r2, r7, #6
 8002256:	2154      	movs	r1, #84	@ 0x54
 8002258:	8812      	ldrh	r2, [r2, #0]
 800225a:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 800225c:	68fb      	ldr	r3, [r7, #12]
 800225e:	1dba      	adds	r2, r7, #6
 8002260:	2156      	movs	r1, #86	@ 0x56
 8002262:	8812      	ldrh	r2, [r2, #0]
 8002264:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002266:	68fb      	ldr	r3, [r7, #12]
 8002268:	689a      	ldr	r2, [r3, #8]
 800226a:	2380      	movs	r3, #128	@ 0x80
 800226c:	015b      	lsls	r3, r3, #5
 800226e:	429a      	cmp	r2, r3
 8002270:	d108      	bne.n	8002284 <HAL_UART_Transmit+0x98>
 8002272:	68fb      	ldr	r3, [r7, #12]
 8002274:	691b      	ldr	r3, [r3, #16]
 8002276:	2b00      	cmp	r3, #0
 8002278:	d104      	bne.n	8002284 <HAL_UART_Transmit+0x98>
    {
      pdata8bits  = NULL;
 800227a:	2300      	movs	r3, #0
 800227c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800227e:	68bb      	ldr	r3, [r7, #8]
 8002280:	61bb      	str	r3, [r7, #24]
 8002282:	e003      	b.n	800228c <HAL_UART_Transmit+0xa0>
    }
    else
    {
      pdata8bits  = pData;
 8002284:	68bb      	ldr	r3, [r7, #8]
 8002286:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002288:	2300      	movs	r3, #0
 800228a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800228c:	e030      	b.n	80022f0 <HAL_UART_Transmit+0x104>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800228e:	697a      	ldr	r2, [r7, #20]
 8002290:	68f8      	ldr	r0, [r7, #12]
 8002292:	683b      	ldr	r3, [r7, #0]
 8002294:	9300      	str	r3, [sp, #0]
 8002296:	0013      	movs	r3, r2
 8002298:	2200      	movs	r2, #0
 800229a:	2180      	movs	r1, #128	@ 0x80
 800229c:	f000 fc34 	bl	8002b08 <UART_WaitOnFlagUntilTimeout>
 80022a0:	1e03      	subs	r3, r0, #0
 80022a2:	d005      	beq.n	80022b0 <HAL_UART_Transmit+0xc4>
      {

        huart->gState = HAL_UART_STATE_READY;
 80022a4:	68fb      	ldr	r3, [r7, #12]
 80022a6:	2288      	movs	r2, #136	@ 0x88
 80022a8:	2120      	movs	r1, #32
 80022aa:	5099      	str	r1, [r3, r2]

        return HAL_TIMEOUT;
 80022ac:	2303      	movs	r3, #3
 80022ae:	e03d      	b.n	800232c <HAL_UART_Transmit+0x140>
      }
      if (pdata8bits == NULL)
 80022b0:	69fb      	ldr	r3, [r7, #28]
 80022b2:	2b00      	cmp	r3, #0
 80022b4:	d10b      	bne.n	80022ce <HAL_UART_Transmit+0xe2>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80022b6:	69bb      	ldr	r3, [r7, #24]
 80022b8:	881b      	ldrh	r3, [r3, #0]
 80022ba:	001a      	movs	r2, r3
 80022bc:	68fb      	ldr	r3, [r7, #12]
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	05d2      	lsls	r2, r2, #23
 80022c2:	0dd2      	lsrs	r2, r2, #23
 80022c4:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 80022c6:	69bb      	ldr	r3, [r7, #24]
 80022c8:	3302      	adds	r3, #2
 80022ca:	61bb      	str	r3, [r7, #24]
 80022cc:	e007      	b.n	80022de <HAL_UART_Transmit+0xf2>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80022ce:	69fb      	ldr	r3, [r7, #28]
 80022d0:	781a      	ldrb	r2, [r3, #0]
 80022d2:	68fb      	ldr	r3, [r7, #12]
 80022d4:	681b      	ldr	r3, [r3, #0]
 80022d6:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 80022d8:	69fb      	ldr	r3, [r7, #28]
 80022da:	3301      	adds	r3, #1
 80022dc:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80022de:	68fb      	ldr	r3, [r7, #12]
 80022e0:	2256      	movs	r2, #86	@ 0x56
 80022e2:	5a9b      	ldrh	r3, [r3, r2]
 80022e4:	b29b      	uxth	r3, r3
 80022e6:	3b01      	subs	r3, #1
 80022e8:	b299      	uxth	r1, r3
 80022ea:	68fb      	ldr	r3, [r7, #12]
 80022ec:	2256      	movs	r2, #86	@ 0x56
 80022ee:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 80022f0:	68fb      	ldr	r3, [r7, #12]
 80022f2:	2256      	movs	r2, #86	@ 0x56
 80022f4:	5a9b      	ldrh	r3, [r3, r2]
 80022f6:	b29b      	uxth	r3, r3
 80022f8:	2b00      	cmp	r3, #0
 80022fa:	d1c8      	bne.n	800228e <HAL_UART_Transmit+0xa2>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80022fc:	697a      	ldr	r2, [r7, #20]
 80022fe:	68f8      	ldr	r0, [r7, #12]
 8002300:	683b      	ldr	r3, [r7, #0]
 8002302:	9300      	str	r3, [sp, #0]
 8002304:	0013      	movs	r3, r2
 8002306:	2200      	movs	r2, #0
 8002308:	2140      	movs	r1, #64	@ 0x40
 800230a:	f000 fbfd 	bl	8002b08 <UART_WaitOnFlagUntilTimeout>
 800230e:	1e03      	subs	r3, r0, #0
 8002310:	d005      	beq.n	800231e <HAL_UART_Transmit+0x132>
    {
      huart->gState = HAL_UART_STATE_READY;
 8002312:	68fb      	ldr	r3, [r7, #12]
 8002314:	2288      	movs	r2, #136	@ 0x88
 8002316:	2120      	movs	r1, #32
 8002318:	5099      	str	r1, [r3, r2]

      return HAL_TIMEOUT;
 800231a:	2303      	movs	r3, #3
 800231c:	e006      	b.n	800232c <HAL_UART_Transmit+0x140>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800231e:	68fb      	ldr	r3, [r7, #12]
 8002320:	2288      	movs	r2, #136	@ 0x88
 8002322:	2120      	movs	r1, #32
 8002324:	5099      	str	r1, [r3, r2]

    return HAL_OK;
 8002326:	2300      	movs	r3, #0
 8002328:	e000      	b.n	800232c <HAL_UART_Transmit+0x140>
  }
  else
  {
    return HAL_BUSY;
 800232a:	2302      	movs	r3, #2
  }
}
 800232c:	0018      	movs	r0, r3
 800232e:	46bd      	mov	sp, r7
 8002330:	b008      	add	sp, #32
 8002332:	bd80      	pop	{r7, pc}

08002334 <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8002334:	b580      	push	{r7, lr}
 8002336:	b088      	sub	sp, #32
 8002338:	af00      	add	r7, sp, #0
 800233a:	60f8      	str	r0, [r7, #12]
 800233c:	60b9      	str	r1, [r7, #8]
 800233e:	1dbb      	adds	r3, r7, #6
 8002340:	801a      	strh	r2, [r3, #0]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8002342:	68fb      	ldr	r3, [r7, #12]
 8002344:	228c      	movs	r2, #140	@ 0x8c
 8002346:	589b      	ldr	r3, [r3, r2]
 8002348:	2b20      	cmp	r3, #32
 800234a:	d145      	bne.n	80023d8 <HAL_UART_Receive_DMA+0xa4>
  {
    if ((pData == NULL) || (Size == 0U))
 800234c:	68bb      	ldr	r3, [r7, #8]
 800234e:	2b00      	cmp	r3, #0
 8002350:	d003      	beq.n	800235a <HAL_UART_Receive_DMA+0x26>
 8002352:	1dbb      	adds	r3, r7, #6
 8002354:	881b      	ldrh	r3, [r3, #0]
 8002356:	2b00      	cmp	r3, #0
 8002358:	d101      	bne.n	800235e <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 800235a:	2301      	movs	r3, #1
 800235c:	e03d      	b.n	80023da <HAL_UART_Receive_DMA+0xa6>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data copy from RDR will be
       handled by DMA from a u16 frontier. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800235e:	68fb      	ldr	r3, [r7, #12]
 8002360:	689a      	ldr	r2, [r3, #8]
 8002362:	2380      	movs	r3, #128	@ 0x80
 8002364:	015b      	lsls	r3, r3, #5
 8002366:	429a      	cmp	r2, r3
 8002368:	d109      	bne.n	800237e <HAL_UART_Receive_DMA+0x4a>
 800236a:	68fb      	ldr	r3, [r7, #12]
 800236c:	691b      	ldr	r3, [r3, #16]
 800236e:	2b00      	cmp	r3, #0
 8002370:	d105      	bne.n	800237e <HAL_UART_Receive_DMA+0x4a>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8002372:	68bb      	ldr	r3, [r7, #8]
 8002374:	2201      	movs	r2, #1
 8002376:	4013      	ands	r3, r2
 8002378:	d001      	beq.n	800237e <HAL_UART_Receive_DMA+0x4a>
      {
        return  HAL_ERROR;
 800237a:	2301      	movs	r3, #1
 800237c:	e02d      	b.n	80023da <HAL_UART_Receive_DMA+0xa6>
      }
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800237e:	68fb      	ldr	r3, [r7, #12]
 8002380:	2200      	movs	r2, #0
 8002382:	66da      	str	r2, [r3, #108]	@ 0x6c

    /* Check that USART RTOEN bit is set */
    if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8002384:	68fb      	ldr	r3, [r7, #12]
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	685a      	ldr	r2, [r3, #4]
 800238a:	2380      	movs	r3, #128	@ 0x80
 800238c:	041b      	lsls	r3, r3, #16
 800238e:	4013      	ands	r3, r2
 8002390:	d019      	beq.n	80023c6 <HAL_UART_Receive_DMA+0x92>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8002392:	f3ef 8310 	mrs	r3, PRIMASK
 8002396:	613b      	str	r3, [r7, #16]
  return(result);
 8002398:	693b      	ldr	r3, [r7, #16]
    {
      /* Enable the UART Receiver Timeout Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800239a:	61fb      	str	r3, [r7, #28]
 800239c:	2301      	movs	r3, #1
 800239e:	617b      	str	r3, [r7, #20]
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80023a0:	697b      	ldr	r3, [r7, #20]
 80023a2:	f383 8810 	msr	PRIMASK, r3
}
 80023a6:	46c0      	nop			@ (mov r8, r8)
 80023a8:	68fb      	ldr	r3, [r7, #12]
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	681a      	ldr	r2, [r3, #0]
 80023ae:	68fb      	ldr	r3, [r7, #12]
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	2180      	movs	r1, #128	@ 0x80
 80023b4:	04c9      	lsls	r1, r1, #19
 80023b6:	430a      	orrs	r2, r1
 80023b8:	601a      	str	r2, [r3, #0]
 80023ba:	69fb      	ldr	r3, [r7, #28]
 80023bc:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80023be:	69bb      	ldr	r3, [r7, #24]
 80023c0:	f383 8810 	msr	PRIMASK, r3
}
 80023c4:	46c0      	nop			@ (mov r8, r8)
    }

    return (UART_Start_Receive_DMA(huart, pData, Size));
 80023c6:	1dbb      	adds	r3, r7, #6
 80023c8:	881a      	ldrh	r2, [r3, #0]
 80023ca:	68b9      	ldr	r1, [r7, #8]
 80023cc:	68fb      	ldr	r3, [r7, #12]
 80023ce:	0018      	movs	r0, r3
 80023d0:	f000 fc0a 	bl	8002be8 <UART_Start_Receive_DMA>
 80023d4:	0003      	movs	r3, r0
 80023d6:	e000      	b.n	80023da <HAL_UART_Receive_DMA+0xa6>
  }
  else
  {
    return HAL_BUSY;
 80023d8:	2302      	movs	r3, #2
  }
}
 80023da:	0018      	movs	r0, r3
 80023dc:	46bd      	mov	sp, r7
 80023de:	b008      	add	sp, #32
 80023e0:	bd80      	pop	{r7, pc}

080023e2 <HAL_UART_DMAStop>:
  * @brief Stop the DMA Transfer.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_DMAStop(UART_HandleTypeDef *huart)
{
 80023e2:	b580      	push	{r7, lr}
 80023e4:	b08c      	sub	sp, #48	@ 0x30
 80023e6:	af00      	add	r7, sp, #0
 80023e8:	6078      	str	r0, [r7, #4]
     HAL_UART_TxHalfCpltCallback / HAL_UART_RxHalfCpltCallback:
     indeed, when HAL_DMA_Abort() API is called, the DMA TX/RX Transfer or Half Transfer complete
     interrupt is generated if the DMA transfer interruption occurs at the middle or at the end of
     the stream and the corresponding call back is executed. */

  const HAL_UART_StateTypeDef gstate = huart->gState;
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	2288      	movs	r2, #136	@ 0x88
 80023ee:	589b      	ldr	r3, [r3, r2]
 80023f0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	228c      	movs	r2, #140	@ 0x8c
 80023f6:	589b      	ldr	r3, [r3, r2]
 80023f8:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	681b      	ldr	r3, [r3, #0]
 80023fe:	689b      	ldr	r3, [r3, #8]
 8002400:	2280      	movs	r2, #128	@ 0x80
 8002402:	4013      	ands	r3, r2
 8002404:	2b80      	cmp	r3, #128	@ 0x80
 8002406:	d138      	bne.n	800247a <HAL_UART_DMAStop+0x98>
 8002408:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800240a:	2b21      	cmp	r3, #33	@ 0x21
 800240c:	d135      	bne.n	800247a <HAL_UART_DMAStop+0x98>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 800240e:	f3ef 8310 	mrs	r3, PRIMASK
 8002412:	617b      	str	r3, [r7, #20]
  return(result);
 8002414:	697b      	ldr	r3, [r7, #20]
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8002416:	627b      	str	r3, [r7, #36]	@ 0x24
 8002418:	2301      	movs	r3, #1
 800241a:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800241c:	69bb      	ldr	r3, [r7, #24]
 800241e:	f383 8810 	msr	PRIMASK, r3
}
 8002422:	46c0      	nop			@ (mov r8, r8)
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	689a      	ldr	r2, [r3, #8]
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	681b      	ldr	r3, [r3, #0]
 800242e:	2180      	movs	r1, #128	@ 0x80
 8002430:	438a      	bics	r2, r1
 8002432:	609a      	str	r2, [r3, #8]
 8002434:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002436:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002438:	69fb      	ldr	r3, [r7, #28]
 800243a:	f383 8810 	msr	PRIMASK, r3
}
 800243e:	46c0      	nop			@ (mov r8, r8)

    /* Abort the UART DMA Tx channel */
    if (huart->hdmatx != NULL)
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8002444:	2b00      	cmp	r3, #0
 8002446:	d014      	beq.n	8002472 <HAL_UART_DMAStop+0x90>
    {
      if (HAL_DMA_Abort(huart->hdmatx) != HAL_OK)
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800244c:	0018      	movs	r0, r3
 800244e:	f7fe ffab 	bl	80013a8 <HAL_DMA_Abort>
 8002452:	1e03      	subs	r3, r0, #0
 8002454:	d00d      	beq.n	8002472 <HAL_UART_DMAStop+0x90>
      {
        if (HAL_DMA_GetError(huart->hdmatx) == HAL_DMA_ERROR_TIMEOUT)
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800245a:	0018      	movs	r0, r3
 800245c:	f7ff f8b8 	bl	80015d0 <HAL_DMA_GetError>
 8002460:	0003      	movs	r3, r0
 8002462:	2b20      	cmp	r3, #32
 8002464:	d105      	bne.n	8002472 <HAL_UART_DMAStop+0x90>
        {
          /* Set error code to DMA */
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	2290      	movs	r2, #144	@ 0x90
 800246a:	2110      	movs	r1, #16
 800246c:	5099      	str	r1, [r3, r2]

          return HAL_TIMEOUT;
 800246e:	2303      	movs	r3, #3
 8002470:	e047      	b.n	8002502 <HAL_UART_DMAStop+0x120>
        }
      }
    }

    UART_EndTxTransfer(huart);
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	0018      	movs	r0, r3
 8002476:	f000 fc5d 	bl	8002d34 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	689b      	ldr	r3, [r3, #8]
 8002480:	2240      	movs	r2, #64	@ 0x40
 8002482:	4013      	ands	r3, r2
 8002484:	2b40      	cmp	r3, #64	@ 0x40
 8002486:	d13b      	bne.n	8002500 <HAL_UART_DMAStop+0x11e>
 8002488:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800248a:	2b22      	cmp	r3, #34	@ 0x22
 800248c:	d138      	bne.n	8002500 <HAL_UART_DMAStop+0x11e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 800248e:	f3ef 8310 	mrs	r3, PRIMASK
 8002492:	60bb      	str	r3, [r7, #8]
  return(result);
 8002494:	68bb      	ldr	r3, [r7, #8]
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002496:	623b      	str	r3, [r7, #32]
 8002498:	2301      	movs	r3, #1
 800249a:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800249c:	68fb      	ldr	r3, [r7, #12]
 800249e:	f383 8810 	msr	PRIMASK, r3
}
 80024a2:	46c0      	nop			@ (mov r8, r8)
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	689a      	ldr	r2, [r3, #8]
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	2140      	movs	r1, #64	@ 0x40
 80024b0:	438a      	bics	r2, r1
 80024b2:	609a      	str	r2, [r3, #8]
 80024b4:	6a3b      	ldr	r3, [r7, #32]
 80024b6:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80024b8:	693b      	ldr	r3, [r7, #16]
 80024ba:	f383 8810 	msr	PRIMASK, r3
}
 80024be:	46c0      	nop			@ (mov r8, r8)

    /* Abort the UART DMA Rx channel */
    if (huart->hdmarx != NULL)
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	2280      	movs	r2, #128	@ 0x80
 80024c4:	589b      	ldr	r3, [r3, r2]
 80024c6:	2b00      	cmp	r3, #0
 80024c8:	d016      	beq.n	80024f8 <HAL_UART_DMAStop+0x116>
    {
      if (HAL_DMA_Abort(huart->hdmarx) != HAL_OK)
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	2280      	movs	r2, #128	@ 0x80
 80024ce:	589b      	ldr	r3, [r3, r2]
 80024d0:	0018      	movs	r0, r3
 80024d2:	f7fe ff69 	bl	80013a8 <HAL_DMA_Abort>
 80024d6:	1e03      	subs	r3, r0, #0
 80024d8:	d00e      	beq.n	80024f8 <HAL_UART_DMAStop+0x116>
      {
        if (HAL_DMA_GetError(huart->hdmarx) == HAL_DMA_ERROR_TIMEOUT)
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	2280      	movs	r2, #128	@ 0x80
 80024de:	589b      	ldr	r3, [r3, r2]
 80024e0:	0018      	movs	r0, r3
 80024e2:	f7ff f875 	bl	80015d0 <HAL_DMA_GetError>
 80024e6:	0003      	movs	r3, r0
 80024e8:	2b20      	cmp	r3, #32
 80024ea:	d105      	bne.n	80024f8 <HAL_UART_DMAStop+0x116>
        {
          /* Set error code to DMA */
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	2290      	movs	r2, #144	@ 0x90
 80024f0:	2110      	movs	r1, #16
 80024f2:	5099      	str	r1, [r3, r2]

          return HAL_TIMEOUT;
 80024f4:	2303      	movs	r3, #3
 80024f6:	e004      	b.n	8002502 <HAL_UART_DMAStop+0x120>
        }
      }
    }

    UART_EndRxTransfer(huart);
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	0018      	movs	r0, r3
 80024fc:	f000 fc5a 	bl	8002db4 <UART_EndRxTransfer>
  }

  return HAL_OK;
 8002500:	2300      	movs	r3, #0
}
 8002502:	0018      	movs	r0, r3
 8002504:	46bd      	mov	sp, r7
 8002506:	b00c      	add	sp, #48	@ 0x30
 8002508:	bd80      	pop	{r7, pc}

0800250a <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800250a:	b580      	push	{r7, lr}
 800250c:	b082      	sub	sp, #8
 800250e:	af00      	add	r7, sp, #0
 8002510:	6078      	str	r0, [r7, #4]
 8002512:	000a      	movs	r2, r1
 8002514:	1cbb      	adds	r3, r7, #2
 8002516:	801a      	strh	r2, [r3, #0]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8002518:	46c0      	nop			@ (mov r8, r8)
 800251a:	46bd      	mov	sp, r7
 800251c:	b002      	add	sp, #8
 800251e:	bd80      	pop	{r7, pc}

08002520 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002520:	b580      	push	{r7, lr}
 8002522:	b088      	sub	sp, #32
 8002524:	af00      	add	r7, sp, #0
 8002526:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8002528:	231e      	movs	r3, #30
 800252a:	18fb      	adds	r3, r7, r3
 800252c:	2200      	movs	r2, #0
 800252e:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	689a      	ldr	r2, [r3, #8]
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	691b      	ldr	r3, [r3, #16]
 8002538:	431a      	orrs	r2, r3
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	695b      	ldr	r3, [r3, #20]
 800253e:	431a      	orrs	r2, r3
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	69db      	ldr	r3, [r3, #28]
 8002544:	4313      	orrs	r3, r2
 8002546:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	4ab5      	ldr	r2, [pc, #724]	@ (8002824 <UART_SetConfig+0x304>)
 8002550:	4013      	ands	r3, r2
 8002552:	0019      	movs	r1, r3
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	697a      	ldr	r2, [r7, #20]
 800255a:	430a      	orrs	r2, r1
 800255c:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	685b      	ldr	r3, [r3, #4]
 8002564:	4ab0      	ldr	r2, [pc, #704]	@ (8002828 <UART_SetConfig+0x308>)
 8002566:	4013      	ands	r3, r2
 8002568:	0019      	movs	r1, r3
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	68da      	ldr	r2, [r3, #12]
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	681b      	ldr	r3, [r3, #0]
 8002572:	430a      	orrs	r2, r1
 8002574:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	699b      	ldr	r3, [r3, #24]
 800257a:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	6a1b      	ldr	r3, [r3, #32]
 8002580:	697a      	ldr	r2, [r7, #20]
 8002582:	4313      	orrs	r3, r2
 8002584:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	681b      	ldr	r3, [r3, #0]
 800258a:	689b      	ldr	r3, [r3, #8]
 800258c:	4aa7      	ldr	r2, [pc, #668]	@ (800282c <UART_SetConfig+0x30c>)
 800258e:	4013      	ands	r3, r2
 8002590:	0019      	movs	r1, r3
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	681b      	ldr	r3, [r3, #0]
 8002596:	697a      	ldr	r2, [r7, #20]
 8002598:	430a      	orrs	r2, r1
 800259a:	609a      	str	r2, [r3, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	681b      	ldr	r3, [r3, #0]
 80025a0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80025a2:	220f      	movs	r2, #15
 80025a4:	4393      	bics	r3, r2
 80025a6:	0019      	movs	r1, r3
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	430a      	orrs	r2, r1
 80025b2:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	4a9d      	ldr	r2, [pc, #628]	@ (8002830 <UART_SetConfig+0x310>)
 80025ba:	4293      	cmp	r3, r2
 80025bc:	d127      	bne.n	800260e <UART_SetConfig+0xee>
 80025be:	4b9d      	ldr	r3, [pc, #628]	@ (8002834 <UART_SetConfig+0x314>)
 80025c0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80025c2:	2203      	movs	r2, #3
 80025c4:	4013      	ands	r3, r2
 80025c6:	2b03      	cmp	r3, #3
 80025c8:	d017      	beq.n	80025fa <UART_SetConfig+0xda>
 80025ca:	d81b      	bhi.n	8002604 <UART_SetConfig+0xe4>
 80025cc:	2b02      	cmp	r3, #2
 80025ce:	d00a      	beq.n	80025e6 <UART_SetConfig+0xc6>
 80025d0:	d818      	bhi.n	8002604 <UART_SetConfig+0xe4>
 80025d2:	2b00      	cmp	r3, #0
 80025d4:	d002      	beq.n	80025dc <UART_SetConfig+0xbc>
 80025d6:	2b01      	cmp	r3, #1
 80025d8:	d00a      	beq.n	80025f0 <UART_SetConfig+0xd0>
 80025da:	e013      	b.n	8002604 <UART_SetConfig+0xe4>
 80025dc:	231f      	movs	r3, #31
 80025de:	18fb      	adds	r3, r7, r3
 80025e0:	2200      	movs	r2, #0
 80025e2:	701a      	strb	r2, [r3, #0]
 80025e4:	e035      	b.n	8002652 <UART_SetConfig+0x132>
 80025e6:	231f      	movs	r3, #31
 80025e8:	18fb      	adds	r3, r7, r3
 80025ea:	2202      	movs	r2, #2
 80025ec:	701a      	strb	r2, [r3, #0]
 80025ee:	e030      	b.n	8002652 <UART_SetConfig+0x132>
 80025f0:	231f      	movs	r3, #31
 80025f2:	18fb      	adds	r3, r7, r3
 80025f4:	2204      	movs	r2, #4
 80025f6:	701a      	strb	r2, [r3, #0]
 80025f8:	e02b      	b.n	8002652 <UART_SetConfig+0x132>
 80025fa:	231f      	movs	r3, #31
 80025fc:	18fb      	adds	r3, r7, r3
 80025fe:	2208      	movs	r2, #8
 8002600:	701a      	strb	r2, [r3, #0]
 8002602:	e026      	b.n	8002652 <UART_SetConfig+0x132>
 8002604:	231f      	movs	r3, #31
 8002606:	18fb      	adds	r3, r7, r3
 8002608:	2210      	movs	r2, #16
 800260a:	701a      	strb	r2, [r3, #0]
 800260c:	e021      	b.n	8002652 <UART_SetConfig+0x132>
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	4a89      	ldr	r2, [pc, #548]	@ (8002838 <UART_SetConfig+0x318>)
 8002614:	4293      	cmp	r3, r2
 8002616:	d104      	bne.n	8002622 <UART_SetConfig+0x102>
 8002618:	231f      	movs	r3, #31
 800261a:	18fb      	adds	r3, r7, r3
 800261c:	2200      	movs	r2, #0
 800261e:	701a      	strb	r2, [r3, #0]
 8002620:	e017      	b.n	8002652 <UART_SetConfig+0x132>
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	4a85      	ldr	r2, [pc, #532]	@ (800283c <UART_SetConfig+0x31c>)
 8002628:	4293      	cmp	r3, r2
 800262a:	d104      	bne.n	8002636 <UART_SetConfig+0x116>
 800262c:	231f      	movs	r3, #31
 800262e:	18fb      	adds	r3, r7, r3
 8002630:	2200      	movs	r2, #0
 8002632:	701a      	strb	r2, [r3, #0]
 8002634:	e00d      	b.n	8002652 <UART_SetConfig+0x132>
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	4a81      	ldr	r2, [pc, #516]	@ (8002840 <UART_SetConfig+0x320>)
 800263c:	4293      	cmp	r3, r2
 800263e:	d104      	bne.n	800264a <UART_SetConfig+0x12a>
 8002640:	231f      	movs	r3, #31
 8002642:	18fb      	adds	r3, r7, r3
 8002644:	2200      	movs	r2, #0
 8002646:	701a      	strb	r2, [r3, #0]
 8002648:	e003      	b.n	8002652 <UART_SetConfig+0x132>
 800264a:	231f      	movs	r3, #31
 800264c:	18fb      	adds	r3, r7, r3
 800264e:	2210      	movs	r2, #16
 8002650:	701a      	strb	r2, [r3, #0]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	69da      	ldr	r2, [r3, #28]
 8002656:	2380      	movs	r3, #128	@ 0x80
 8002658:	021b      	lsls	r3, r3, #8
 800265a:	429a      	cmp	r2, r3
 800265c:	d000      	beq.n	8002660 <UART_SetConfig+0x140>
 800265e:	e06f      	b.n	8002740 <UART_SetConfig+0x220>
  {
    switch (clocksource)
 8002660:	231f      	movs	r3, #31
 8002662:	18fb      	adds	r3, r7, r3
 8002664:	781b      	ldrb	r3, [r3, #0]
 8002666:	2b08      	cmp	r3, #8
 8002668:	d01f      	beq.n	80026aa <UART_SetConfig+0x18a>
 800266a:	dc22      	bgt.n	80026b2 <UART_SetConfig+0x192>
 800266c:	2b04      	cmp	r3, #4
 800266e:	d017      	beq.n	80026a0 <UART_SetConfig+0x180>
 8002670:	dc1f      	bgt.n	80026b2 <UART_SetConfig+0x192>
 8002672:	2b00      	cmp	r3, #0
 8002674:	d002      	beq.n	800267c <UART_SetConfig+0x15c>
 8002676:	2b02      	cmp	r3, #2
 8002678:	d005      	beq.n	8002686 <UART_SetConfig+0x166>
 800267a:	e01a      	b.n	80026b2 <UART_SetConfig+0x192>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800267c:	f7ff fd48 	bl	8002110 <HAL_RCC_GetPCLK1Freq>
 8002680:	0003      	movs	r3, r0
 8002682:	61bb      	str	r3, [r7, #24]
        break;
 8002684:	e01c      	b.n	80026c0 <UART_SetConfig+0x1a0>
      case UART_CLOCKSOURCE_HSI:
        pclk = (HSI_VALUE / ((__HAL_RCC_GET_HSIKER_DIVIDER() >> RCC_CR_HSIKERDIV_Pos) + 1U));
 8002686:	4b6b      	ldr	r3, [pc, #428]	@ (8002834 <UART_SetConfig+0x314>)
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	095b      	lsrs	r3, r3, #5
 800268c:	2207      	movs	r2, #7
 800268e:	4013      	ands	r3, r2
 8002690:	3301      	adds	r3, #1
 8002692:	0019      	movs	r1, r3
 8002694:	486b      	ldr	r0, [pc, #428]	@ (8002844 <UART_SetConfig+0x324>)
 8002696:	f7fd fd49 	bl	800012c <__udivsi3>
 800269a:	0003      	movs	r3, r0
 800269c:	61bb      	str	r3, [r7, #24]
        break;
 800269e:	e00f      	b.n	80026c0 <UART_SetConfig+0x1a0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80026a0:	f7ff fcc8 	bl	8002034 <HAL_RCC_GetSysClockFreq>
 80026a4:	0003      	movs	r3, r0
 80026a6:	61bb      	str	r3, [r7, #24]
        break;
 80026a8:	e00a      	b.n	80026c0 <UART_SetConfig+0x1a0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80026aa:	2380      	movs	r3, #128	@ 0x80
 80026ac:	021b      	lsls	r3, r3, #8
 80026ae:	61bb      	str	r3, [r7, #24]
        break;
 80026b0:	e006      	b.n	80026c0 <UART_SetConfig+0x1a0>
      default:
        pclk = 0U;
 80026b2:	2300      	movs	r3, #0
 80026b4:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80026b6:	231e      	movs	r3, #30
 80026b8:	18fb      	adds	r3, r7, r3
 80026ba:	2201      	movs	r2, #1
 80026bc:	701a      	strb	r2, [r3, #0]
        break;
 80026be:	46c0      	nop			@ (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80026c0:	69bb      	ldr	r3, [r7, #24]
 80026c2:	2b00      	cmp	r3, #0
 80026c4:	d100      	bne.n	80026c8 <UART_SetConfig+0x1a8>
 80026c6:	e097      	b.n	80027f8 <UART_SetConfig+0x2d8>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80026cc:	4b5e      	ldr	r3, [pc, #376]	@ (8002848 <UART_SetConfig+0x328>)
 80026ce:	0052      	lsls	r2, r2, #1
 80026d0:	5ad3      	ldrh	r3, [r2, r3]
 80026d2:	0019      	movs	r1, r3
 80026d4:	69b8      	ldr	r0, [r7, #24]
 80026d6:	f7fd fd29 	bl	800012c <__udivsi3>
 80026da:	0003      	movs	r3, r0
 80026dc:	005a      	lsls	r2, r3, #1
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	685b      	ldr	r3, [r3, #4]
 80026e2:	085b      	lsrs	r3, r3, #1
 80026e4:	18d2      	adds	r2, r2, r3
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	685b      	ldr	r3, [r3, #4]
 80026ea:	0019      	movs	r1, r3
 80026ec:	0010      	movs	r0, r2
 80026ee:	f7fd fd1d 	bl	800012c <__udivsi3>
 80026f2:	0003      	movs	r3, r0
 80026f4:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80026f6:	693b      	ldr	r3, [r7, #16]
 80026f8:	2b0f      	cmp	r3, #15
 80026fa:	d91c      	bls.n	8002736 <UART_SetConfig+0x216>
 80026fc:	693a      	ldr	r2, [r7, #16]
 80026fe:	2380      	movs	r3, #128	@ 0x80
 8002700:	025b      	lsls	r3, r3, #9
 8002702:	429a      	cmp	r2, r3
 8002704:	d217      	bcs.n	8002736 <UART_SetConfig+0x216>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8002706:	693b      	ldr	r3, [r7, #16]
 8002708:	b29a      	uxth	r2, r3
 800270a:	200e      	movs	r0, #14
 800270c:	183b      	adds	r3, r7, r0
 800270e:	210f      	movs	r1, #15
 8002710:	438a      	bics	r2, r1
 8002712:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8002714:	693b      	ldr	r3, [r7, #16]
 8002716:	085b      	lsrs	r3, r3, #1
 8002718:	b29b      	uxth	r3, r3
 800271a:	2207      	movs	r2, #7
 800271c:	4013      	ands	r3, r2
 800271e:	b299      	uxth	r1, r3
 8002720:	183b      	adds	r3, r7, r0
 8002722:	183a      	adds	r2, r7, r0
 8002724:	8812      	ldrh	r2, [r2, #0]
 8002726:	430a      	orrs	r2, r1
 8002728:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	183a      	adds	r2, r7, r0
 8002730:	8812      	ldrh	r2, [r2, #0]
 8002732:	60da      	str	r2, [r3, #12]
 8002734:	e060      	b.n	80027f8 <UART_SetConfig+0x2d8>
      }
      else
      {
        ret = HAL_ERROR;
 8002736:	231e      	movs	r3, #30
 8002738:	18fb      	adds	r3, r7, r3
 800273a:	2201      	movs	r2, #1
 800273c:	701a      	strb	r2, [r3, #0]
 800273e:	e05b      	b.n	80027f8 <UART_SetConfig+0x2d8>
      }
    }
  }
  else
  {
    switch (clocksource)
 8002740:	231f      	movs	r3, #31
 8002742:	18fb      	adds	r3, r7, r3
 8002744:	781b      	ldrb	r3, [r3, #0]
 8002746:	2b08      	cmp	r3, #8
 8002748:	d01f      	beq.n	800278a <UART_SetConfig+0x26a>
 800274a:	dc22      	bgt.n	8002792 <UART_SetConfig+0x272>
 800274c:	2b04      	cmp	r3, #4
 800274e:	d017      	beq.n	8002780 <UART_SetConfig+0x260>
 8002750:	dc1f      	bgt.n	8002792 <UART_SetConfig+0x272>
 8002752:	2b00      	cmp	r3, #0
 8002754:	d002      	beq.n	800275c <UART_SetConfig+0x23c>
 8002756:	2b02      	cmp	r3, #2
 8002758:	d005      	beq.n	8002766 <UART_SetConfig+0x246>
 800275a:	e01a      	b.n	8002792 <UART_SetConfig+0x272>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800275c:	f7ff fcd8 	bl	8002110 <HAL_RCC_GetPCLK1Freq>
 8002760:	0003      	movs	r3, r0
 8002762:	61bb      	str	r3, [r7, #24]
        break;
 8002764:	e01c      	b.n	80027a0 <UART_SetConfig+0x280>
      case UART_CLOCKSOURCE_HSI:
        pclk = (HSI_VALUE / ((__HAL_RCC_GET_HSIKER_DIVIDER() >> RCC_CR_HSIKERDIV_Pos) + 1U));
 8002766:	4b33      	ldr	r3, [pc, #204]	@ (8002834 <UART_SetConfig+0x314>)
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	095b      	lsrs	r3, r3, #5
 800276c:	2207      	movs	r2, #7
 800276e:	4013      	ands	r3, r2
 8002770:	3301      	adds	r3, #1
 8002772:	0019      	movs	r1, r3
 8002774:	4833      	ldr	r0, [pc, #204]	@ (8002844 <UART_SetConfig+0x324>)
 8002776:	f7fd fcd9 	bl	800012c <__udivsi3>
 800277a:	0003      	movs	r3, r0
 800277c:	61bb      	str	r3, [r7, #24]
        break;
 800277e:	e00f      	b.n	80027a0 <UART_SetConfig+0x280>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002780:	f7ff fc58 	bl	8002034 <HAL_RCC_GetSysClockFreq>
 8002784:	0003      	movs	r3, r0
 8002786:	61bb      	str	r3, [r7, #24]
        break;
 8002788:	e00a      	b.n	80027a0 <UART_SetConfig+0x280>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800278a:	2380      	movs	r3, #128	@ 0x80
 800278c:	021b      	lsls	r3, r3, #8
 800278e:	61bb      	str	r3, [r7, #24]
        break;
 8002790:	e006      	b.n	80027a0 <UART_SetConfig+0x280>
      default:
        pclk = 0U;
 8002792:	2300      	movs	r3, #0
 8002794:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8002796:	231e      	movs	r3, #30
 8002798:	18fb      	adds	r3, r7, r3
 800279a:	2201      	movs	r2, #1
 800279c:	701a      	strb	r2, [r3, #0]
        break;
 800279e:	46c0      	nop			@ (mov r8, r8)
    }

    if (pclk != 0U)
 80027a0:	69bb      	ldr	r3, [r7, #24]
 80027a2:	2b00      	cmp	r3, #0
 80027a4:	d028      	beq.n	80027f8 <UART_SetConfig+0x2d8>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80027aa:	4b27      	ldr	r3, [pc, #156]	@ (8002848 <UART_SetConfig+0x328>)
 80027ac:	0052      	lsls	r2, r2, #1
 80027ae:	5ad3      	ldrh	r3, [r2, r3]
 80027b0:	0019      	movs	r1, r3
 80027b2:	69b8      	ldr	r0, [r7, #24]
 80027b4:	f7fd fcba 	bl	800012c <__udivsi3>
 80027b8:	0003      	movs	r3, r0
 80027ba:	001a      	movs	r2, r3
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	685b      	ldr	r3, [r3, #4]
 80027c0:	085b      	lsrs	r3, r3, #1
 80027c2:	18d2      	adds	r2, r2, r3
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	685b      	ldr	r3, [r3, #4]
 80027c8:	0019      	movs	r1, r3
 80027ca:	0010      	movs	r0, r2
 80027cc:	f7fd fcae 	bl	800012c <__udivsi3>
 80027d0:	0003      	movs	r3, r0
 80027d2:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80027d4:	693b      	ldr	r3, [r7, #16]
 80027d6:	2b0f      	cmp	r3, #15
 80027d8:	d90a      	bls.n	80027f0 <UART_SetConfig+0x2d0>
 80027da:	693a      	ldr	r2, [r7, #16]
 80027dc:	2380      	movs	r3, #128	@ 0x80
 80027de:	025b      	lsls	r3, r3, #9
 80027e0:	429a      	cmp	r2, r3
 80027e2:	d205      	bcs.n	80027f0 <UART_SetConfig+0x2d0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80027e4:	693b      	ldr	r3, [r7, #16]
 80027e6:	b29a      	uxth	r2, r3
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	60da      	str	r2, [r3, #12]
 80027ee:	e003      	b.n	80027f8 <UART_SetConfig+0x2d8>
      }
      else
      {
        ret = HAL_ERROR;
 80027f0:	231e      	movs	r3, #30
 80027f2:	18fb      	adds	r3, r7, r3
 80027f4:	2201      	movs	r2, #1
 80027f6:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	226a      	movs	r2, #106	@ 0x6a
 80027fc:	2101      	movs	r1, #1
 80027fe:	5299      	strh	r1, [r3, r2]
  huart->NbRxDataToProcess = 1;
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	2268      	movs	r2, #104	@ 0x68
 8002804:	2101      	movs	r1, #1
 8002806:	5299      	strh	r1, [r3, r2]

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	2200      	movs	r2, #0
 800280c:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	2200      	movs	r2, #0
 8002812:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8002814:	231e      	movs	r3, #30
 8002816:	18fb      	adds	r3, r7, r3
 8002818:	781b      	ldrb	r3, [r3, #0]
}
 800281a:	0018      	movs	r0, r3
 800281c:	46bd      	mov	sp, r7
 800281e:	b008      	add	sp, #32
 8002820:	bd80      	pop	{r7, pc}
 8002822:	46c0      	nop			@ (mov r8, r8)
 8002824:	cfff69f3 	.word	0xcfff69f3
 8002828:	ffffcfff 	.word	0xffffcfff
 800282c:	11fff4ff 	.word	0x11fff4ff
 8002830:	40013800 	.word	0x40013800
 8002834:	40021000 	.word	0x40021000
 8002838:	40004400 	.word	0x40004400
 800283c:	40004800 	.word	0x40004800
 8002840:	40004c00 	.word	0x40004c00
 8002844:	02dc6c00 	.word	0x02dc6c00
 8002848:	0800414c 	.word	0x0800414c

0800284c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800284c:	b580      	push	{r7, lr}
 800284e:	b082      	sub	sp, #8
 8002850:	af00      	add	r7, sp, #0
 8002852:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002858:	2208      	movs	r2, #8
 800285a:	4013      	ands	r3, r2
 800285c:	d00b      	beq.n	8002876 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	685b      	ldr	r3, [r3, #4]
 8002864:	4a4a      	ldr	r2, [pc, #296]	@ (8002990 <UART_AdvFeatureConfig+0x144>)
 8002866:	4013      	ands	r3, r2
 8002868:	0019      	movs	r1, r3
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	430a      	orrs	r2, r1
 8002874:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800287a:	2201      	movs	r2, #1
 800287c:	4013      	ands	r3, r2
 800287e:	d00b      	beq.n	8002898 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	685b      	ldr	r3, [r3, #4]
 8002886:	4a43      	ldr	r2, [pc, #268]	@ (8002994 <UART_AdvFeatureConfig+0x148>)
 8002888:	4013      	ands	r3, r2
 800288a:	0019      	movs	r1, r3
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	430a      	orrs	r2, r1
 8002896:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800289c:	2202      	movs	r2, #2
 800289e:	4013      	ands	r3, r2
 80028a0:	d00b      	beq.n	80028ba <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	685b      	ldr	r3, [r3, #4]
 80028a8:	4a3b      	ldr	r2, [pc, #236]	@ (8002998 <UART_AdvFeatureConfig+0x14c>)
 80028aa:	4013      	ands	r3, r2
 80028ac:	0019      	movs	r1, r3
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	430a      	orrs	r2, r1
 80028b8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80028be:	2204      	movs	r2, #4
 80028c0:	4013      	ands	r3, r2
 80028c2:	d00b      	beq.n	80028dc <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	685b      	ldr	r3, [r3, #4]
 80028ca:	4a34      	ldr	r2, [pc, #208]	@ (800299c <UART_AdvFeatureConfig+0x150>)
 80028cc:	4013      	ands	r3, r2
 80028ce:	0019      	movs	r1, r3
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	430a      	orrs	r2, r1
 80028da:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80028e0:	2210      	movs	r2, #16
 80028e2:	4013      	ands	r3, r2
 80028e4:	d00b      	beq.n	80028fe <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	689b      	ldr	r3, [r3, #8]
 80028ec:	4a2c      	ldr	r2, [pc, #176]	@ (80029a0 <UART_AdvFeatureConfig+0x154>)
 80028ee:	4013      	ands	r3, r2
 80028f0:	0019      	movs	r1, r3
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	430a      	orrs	r2, r1
 80028fc:	609a      	str	r2, [r3, #8]
  }

#if defined(HAL_DMA_MODULE_ENABLED)
  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002902:	2220      	movs	r2, #32
 8002904:	4013      	ands	r3, r2
 8002906:	d00b      	beq.n	8002920 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	689b      	ldr	r3, [r3, #8]
 800290e:	4a25      	ldr	r2, [pc, #148]	@ (80029a4 <UART_AdvFeatureConfig+0x158>)
 8002910:	4013      	ands	r3, r2
 8002912:	0019      	movs	r1, r3
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	430a      	orrs	r2, r1
 800291e:	609a      	str	r2, [r3, #8]
  }
#endif /* HAL_DMA_MODULE_ENABLED */

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002924:	2240      	movs	r2, #64	@ 0x40
 8002926:	4013      	ands	r3, r2
 8002928:	d01d      	beq.n	8002966 <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	681b      	ldr	r3, [r3, #0]
 800292e:	685b      	ldr	r3, [r3, #4]
 8002930:	4a1d      	ldr	r2, [pc, #116]	@ (80029a8 <UART_AdvFeatureConfig+0x15c>)
 8002932:	4013      	ands	r3, r2
 8002934:	0019      	movs	r1, r3
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	430a      	orrs	r2, r1
 8002940:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8002946:	2380      	movs	r3, #128	@ 0x80
 8002948:	035b      	lsls	r3, r3, #13
 800294a:	429a      	cmp	r2, r3
 800294c:	d10b      	bne.n	8002966 <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	685b      	ldr	r3, [r3, #4]
 8002954:	4a15      	ldr	r2, [pc, #84]	@ (80029ac <UART_AdvFeatureConfig+0x160>)
 8002956:	4013      	ands	r3, r2
 8002958:	0019      	movs	r1, r3
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	430a      	orrs	r2, r1
 8002964:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800296a:	2280      	movs	r2, #128	@ 0x80
 800296c:	4013      	ands	r3, r2
 800296e:	d00b      	beq.n	8002988 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	685b      	ldr	r3, [r3, #4]
 8002976:	4a0e      	ldr	r2, [pc, #56]	@ (80029b0 <UART_AdvFeatureConfig+0x164>)
 8002978:	4013      	ands	r3, r2
 800297a:	0019      	movs	r1, r3
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	430a      	orrs	r2, r1
 8002986:	605a      	str	r2, [r3, #4]
  }
}
 8002988:	46c0      	nop			@ (mov r8, r8)
 800298a:	46bd      	mov	sp, r7
 800298c:	b002      	add	sp, #8
 800298e:	bd80      	pop	{r7, pc}
 8002990:	ffff7fff 	.word	0xffff7fff
 8002994:	fffdffff 	.word	0xfffdffff
 8002998:	fffeffff 	.word	0xfffeffff
 800299c:	fffbffff 	.word	0xfffbffff
 80029a0:	ffffefff 	.word	0xffffefff
 80029a4:	ffffdfff 	.word	0xffffdfff
 80029a8:	ffefffff 	.word	0xffefffff
 80029ac:	ff9fffff 	.word	0xff9fffff
 80029b0:	fff7ffff 	.word	0xfff7ffff

080029b4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80029b4:	b580      	push	{r7, lr}
 80029b6:	b092      	sub	sp, #72	@ 0x48
 80029b8:	af02      	add	r7, sp, #8
 80029ba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	2290      	movs	r2, #144	@ 0x90
 80029c0:	2100      	movs	r1, #0
 80029c2:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80029c4:	f7fe fad2 	bl	8000f6c <HAL_GetTick>
 80029c8:	0003      	movs	r3, r0
 80029ca:	63fb      	str	r3, [r7, #60]	@ 0x3c

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	2208      	movs	r2, #8
 80029d4:	4013      	ands	r3, r2
 80029d6:	2b08      	cmp	r3, #8
 80029d8:	d12d      	bne.n	8002a36 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80029da:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80029dc:	2280      	movs	r2, #128	@ 0x80
 80029de:	0391      	lsls	r1, r2, #14
 80029e0:	6878      	ldr	r0, [r7, #4]
 80029e2:	4a47      	ldr	r2, [pc, #284]	@ (8002b00 <UART_CheckIdleState+0x14c>)
 80029e4:	9200      	str	r2, [sp, #0]
 80029e6:	2200      	movs	r2, #0
 80029e8:	f000 f88e 	bl	8002b08 <UART_WaitOnFlagUntilTimeout>
 80029ec:	1e03      	subs	r3, r0, #0
 80029ee:	d022      	beq.n	8002a36 <UART_CheckIdleState+0x82>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 80029f0:	f3ef 8310 	mrs	r3, PRIMASK
 80029f4:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 80029f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 80029f8:	63bb      	str	r3, [r7, #56]	@ 0x38
 80029fa:	2301      	movs	r3, #1
 80029fc:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80029fe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002a00:	f383 8810 	msr	PRIMASK, r3
}
 8002a04:	46c0      	nop			@ (mov r8, r8)
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	681a      	ldr	r2, [r3, #0]
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	2180      	movs	r1, #128	@ 0x80
 8002a12:	438a      	bics	r2, r1
 8002a14:	601a      	str	r2, [r3, #0]
 8002a16:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002a18:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002a1a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002a1c:	f383 8810 	msr	PRIMASK, r3
}
 8002a20:	46c0      	nop			@ (mov r8, r8)

      huart->gState = HAL_UART_STATE_READY;
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	2288      	movs	r2, #136	@ 0x88
 8002a26:	2120      	movs	r1, #32
 8002a28:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	2284      	movs	r2, #132	@ 0x84
 8002a2e:	2100      	movs	r1, #0
 8002a30:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8002a32:	2303      	movs	r3, #3
 8002a34:	e060      	b.n	8002af8 <UART_CheckIdleState+0x144>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	2204      	movs	r2, #4
 8002a3e:	4013      	ands	r3, r2
 8002a40:	2b04      	cmp	r3, #4
 8002a42:	d146      	bne.n	8002ad2 <UART_CheckIdleState+0x11e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002a44:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002a46:	2280      	movs	r2, #128	@ 0x80
 8002a48:	03d1      	lsls	r1, r2, #15
 8002a4a:	6878      	ldr	r0, [r7, #4]
 8002a4c:	4a2c      	ldr	r2, [pc, #176]	@ (8002b00 <UART_CheckIdleState+0x14c>)
 8002a4e:	9200      	str	r2, [sp, #0]
 8002a50:	2200      	movs	r2, #0
 8002a52:	f000 f859 	bl	8002b08 <UART_WaitOnFlagUntilTimeout>
 8002a56:	1e03      	subs	r3, r0, #0
 8002a58:	d03b      	beq.n	8002ad2 <UART_CheckIdleState+0x11e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8002a5a:	f3ef 8310 	mrs	r3, PRIMASK
 8002a5e:	60fb      	str	r3, [r7, #12]
  return(result);
 8002a60:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8002a62:	637b      	str	r3, [r7, #52]	@ 0x34
 8002a64:	2301      	movs	r3, #1
 8002a66:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002a68:	693b      	ldr	r3, [r7, #16]
 8002a6a:	f383 8810 	msr	PRIMASK, r3
}
 8002a6e:	46c0      	nop			@ (mov r8, r8)
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	681a      	ldr	r2, [r3, #0]
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	4922      	ldr	r1, [pc, #136]	@ (8002b04 <UART_CheckIdleState+0x150>)
 8002a7c:	400a      	ands	r2, r1
 8002a7e:	601a      	str	r2, [r3, #0]
 8002a80:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002a82:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002a84:	697b      	ldr	r3, [r7, #20]
 8002a86:	f383 8810 	msr	PRIMASK, r3
}
 8002a8a:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8002a8c:	f3ef 8310 	mrs	r3, PRIMASK
 8002a90:	61bb      	str	r3, [r7, #24]
  return(result);
 8002a92:	69bb      	ldr	r3, [r7, #24]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002a94:	633b      	str	r3, [r7, #48]	@ 0x30
 8002a96:	2301      	movs	r3, #1
 8002a98:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002a9a:	69fb      	ldr	r3, [r7, #28]
 8002a9c:	f383 8810 	msr	PRIMASK, r3
}
 8002aa0:	46c0      	nop			@ (mov r8, r8)
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	689a      	ldr	r2, [r3, #8]
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	2101      	movs	r1, #1
 8002aae:	438a      	bics	r2, r1
 8002ab0:	609a      	str	r2, [r3, #8]
 8002ab2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002ab4:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002ab6:	6a3b      	ldr	r3, [r7, #32]
 8002ab8:	f383 8810 	msr	PRIMASK, r3
}
 8002abc:	46c0      	nop			@ (mov r8, r8)

      huart->RxState = HAL_UART_STATE_READY;
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	228c      	movs	r2, #140	@ 0x8c
 8002ac2:	2120      	movs	r1, #32
 8002ac4:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	2284      	movs	r2, #132	@ 0x84
 8002aca:	2100      	movs	r1, #0
 8002acc:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8002ace:	2303      	movs	r3, #3
 8002ad0:	e012      	b.n	8002af8 <UART_CheckIdleState+0x144>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	2288      	movs	r2, #136	@ 0x88
 8002ad6:	2120      	movs	r1, #32
 8002ad8:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_READY;
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	228c      	movs	r2, #140	@ 0x8c
 8002ade:	2120      	movs	r1, #32
 8002ae0:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	2200      	movs	r2, #0
 8002ae6:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	2200      	movs	r2, #0
 8002aec:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	2284      	movs	r2, #132	@ 0x84
 8002af2:	2100      	movs	r1, #0
 8002af4:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002af6:	2300      	movs	r3, #0
}
 8002af8:	0018      	movs	r0, r3
 8002afa:	46bd      	mov	sp, r7
 8002afc:	b010      	add	sp, #64	@ 0x40
 8002afe:	bd80      	pop	{r7, pc}
 8002b00:	01ffffff 	.word	0x01ffffff
 8002b04:	fffffedf 	.word	0xfffffedf

08002b08 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8002b08:	b580      	push	{r7, lr}
 8002b0a:	b084      	sub	sp, #16
 8002b0c:	af00      	add	r7, sp, #0
 8002b0e:	60f8      	str	r0, [r7, #12]
 8002b10:	60b9      	str	r1, [r7, #8]
 8002b12:	603b      	str	r3, [r7, #0]
 8002b14:	1dfb      	adds	r3, r7, #7
 8002b16:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002b18:	e051      	b.n	8002bbe <UART_WaitOnFlagUntilTimeout+0xb6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002b1a:	69bb      	ldr	r3, [r7, #24]
 8002b1c:	3301      	adds	r3, #1
 8002b1e:	d04e      	beq.n	8002bbe <UART_WaitOnFlagUntilTimeout+0xb6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002b20:	f7fe fa24 	bl	8000f6c <HAL_GetTick>
 8002b24:	0002      	movs	r2, r0
 8002b26:	683b      	ldr	r3, [r7, #0]
 8002b28:	1ad3      	subs	r3, r2, r3
 8002b2a:	69ba      	ldr	r2, [r7, #24]
 8002b2c:	429a      	cmp	r2, r3
 8002b2e:	d302      	bcc.n	8002b36 <UART_WaitOnFlagUntilTimeout+0x2e>
 8002b30:	69bb      	ldr	r3, [r7, #24]
 8002b32:	2b00      	cmp	r3, #0
 8002b34:	d101      	bne.n	8002b3a <UART_WaitOnFlagUntilTimeout+0x32>
      {

        return HAL_TIMEOUT;
 8002b36:	2303      	movs	r3, #3
 8002b38:	e051      	b.n	8002bde <UART_WaitOnFlagUntilTimeout+0xd6>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8002b3a:	68fb      	ldr	r3, [r7, #12]
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	2204      	movs	r2, #4
 8002b42:	4013      	ands	r3, r2
 8002b44:	d03b      	beq.n	8002bbe <UART_WaitOnFlagUntilTimeout+0xb6>
 8002b46:	68bb      	ldr	r3, [r7, #8]
 8002b48:	2b80      	cmp	r3, #128	@ 0x80
 8002b4a:	d038      	beq.n	8002bbe <UART_WaitOnFlagUntilTimeout+0xb6>
 8002b4c:	68bb      	ldr	r3, [r7, #8]
 8002b4e:	2b40      	cmp	r3, #64	@ 0x40
 8002b50:	d035      	beq.n	8002bbe <UART_WaitOnFlagUntilTimeout+0xb6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8002b52:	68fb      	ldr	r3, [r7, #12]
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	69db      	ldr	r3, [r3, #28]
 8002b58:	2208      	movs	r2, #8
 8002b5a:	4013      	ands	r3, r2
 8002b5c:	2b08      	cmp	r3, #8
 8002b5e:	d111      	bne.n	8002b84 <UART_WaitOnFlagUntilTimeout+0x7c>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8002b60:	68fb      	ldr	r3, [r7, #12]
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	2208      	movs	r2, #8
 8002b66:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8002b68:	68fb      	ldr	r3, [r7, #12]
 8002b6a:	0018      	movs	r0, r3
 8002b6c:	f000 f922 	bl	8002db4 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8002b70:	68fb      	ldr	r3, [r7, #12]
 8002b72:	2290      	movs	r2, #144	@ 0x90
 8002b74:	2108      	movs	r1, #8
 8002b76:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8002b78:	68fb      	ldr	r3, [r7, #12]
 8002b7a:	2284      	movs	r2, #132	@ 0x84
 8002b7c:	2100      	movs	r1, #0
 8002b7e:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 8002b80:	2301      	movs	r3, #1
 8002b82:	e02c      	b.n	8002bde <UART_WaitOnFlagUntilTimeout+0xd6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8002b84:	68fb      	ldr	r3, [r7, #12]
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	69da      	ldr	r2, [r3, #28]
 8002b8a:	2380      	movs	r3, #128	@ 0x80
 8002b8c:	011b      	lsls	r3, r3, #4
 8002b8e:	401a      	ands	r2, r3
 8002b90:	2380      	movs	r3, #128	@ 0x80
 8002b92:	011b      	lsls	r3, r3, #4
 8002b94:	429a      	cmp	r2, r3
 8002b96:	d112      	bne.n	8002bbe <UART_WaitOnFlagUntilTimeout+0xb6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8002b98:	68fb      	ldr	r3, [r7, #12]
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	2280      	movs	r2, #128	@ 0x80
 8002b9e:	0112      	lsls	r2, r2, #4
 8002ba0:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8002ba2:	68fb      	ldr	r3, [r7, #12]
 8002ba4:	0018      	movs	r0, r3
 8002ba6:	f000 f905 	bl	8002db4 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8002baa:	68fb      	ldr	r3, [r7, #12]
 8002bac:	2290      	movs	r2, #144	@ 0x90
 8002bae:	2120      	movs	r1, #32
 8002bb0:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8002bb2:	68fb      	ldr	r3, [r7, #12]
 8002bb4:	2284      	movs	r2, #132	@ 0x84
 8002bb6:	2100      	movs	r1, #0
 8002bb8:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8002bba:	2303      	movs	r3, #3
 8002bbc:	e00f      	b.n	8002bde <UART_WaitOnFlagUntilTimeout+0xd6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002bbe:	68fb      	ldr	r3, [r7, #12]
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	69db      	ldr	r3, [r3, #28]
 8002bc4:	68ba      	ldr	r2, [r7, #8]
 8002bc6:	4013      	ands	r3, r2
 8002bc8:	68ba      	ldr	r2, [r7, #8]
 8002bca:	1ad3      	subs	r3, r2, r3
 8002bcc:	425a      	negs	r2, r3
 8002bce:	4153      	adcs	r3, r2
 8002bd0:	b2db      	uxtb	r3, r3
 8002bd2:	001a      	movs	r2, r3
 8002bd4:	1dfb      	adds	r3, r7, #7
 8002bd6:	781b      	ldrb	r3, [r3, #0]
 8002bd8:	429a      	cmp	r2, r3
 8002bda:	d09e      	beq.n	8002b1a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002bdc:	2300      	movs	r3, #0
}
 8002bde:	0018      	movs	r0, r3
 8002be0:	46bd      	mov	sp, r7
 8002be2:	b004      	add	sp, #16
 8002be4:	bd80      	pop	{r7, pc}
	...

08002be8 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8002be8:	b580      	push	{r7, lr}
 8002bea:	b090      	sub	sp, #64	@ 0x40
 8002bec:	af00      	add	r7, sp, #0
 8002bee:	60f8      	str	r0, [r7, #12]
 8002bf0:	60b9      	str	r1, [r7, #8]
 8002bf2:	1dbb      	adds	r3, r7, #6
 8002bf4:	801a      	strh	r2, [r3, #0]
  huart->pRxBuffPtr = pData;
 8002bf6:	68fb      	ldr	r3, [r7, #12]
 8002bf8:	68ba      	ldr	r2, [r7, #8]
 8002bfa:	659a      	str	r2, [r3, #88]	@ 0x58
  huart->RxXferSize = Size;
 8002bfc:	68fb      	ldr	r3, [r7, #12]
 8002bfe:	1dba      	adds	r2, r7, #6
 8002c00:	215c      	movs	r1, #92	@ 0x5c
 8002c02:	8812      	ldrh	r2, [r2, #0]
 8002c04:	525a      	strh	r2, [r3, r1]

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002c06:	68fb      	ldr	r3, [r7, #12]
 8002c08:	2290      	movs	r2, #144	@ 0x90
 8002c0a:	2100      	movs	r1, #0
 8002c0c:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8002c0e:	68fb      	ldr	r3, [r7, #12]
 8002c10:	228c      	movs	r2, #140	@ 0x8c
 8002c12:	2122      	movs	r1, #34	@ 0x22
 8002c14:	5099      	str	r1, [r3, r2]

  if (huart->hdmarx != NULL)
 8002c16:	68fb      	ldr	r3, [r7, #12]
 8002c18:	2280      	movs	r2, #128	@ 0x80
 8002c1a:	589b      	ldr	r3, [r3, r2]
 8002c1c:	2b00      	cmp	r3, #0
 8002c1e:	d02d      	beq.n	8002c7c <UART_Start_Receive_DMA+0x94>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8002c20:	68fb      	ldr	r3, [r7, #12]
 8002c22:	2280      	movs	r2, #128	@ 0x80
 8002c24:	589b      	ldr	r3, [r3, r2]
 8002c26:	4a40      	ldr	r2, [pc, #256]	@ (8002d28 <UART_Start_Receive_DMA+0x140>)
 8002c28:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8002c2a:	68fb      	ldr	r3, [r7, #12]
 8002c2c:	2280      	movs	r2, #128	@ 0x80
 8002c2e:	589b      	ldr	r3, [r3, r2]
 8002c30:	4a3e      	ldr	r2, [pc, #248]	@ (8002d2c <UART_Start_Receive_DMA+0x144>)
 8002c32:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 8002c34:	68fb      	ldr	r3, [r7, #12]
 8002c36:	2280      	movs	r2, #128	@ 0x80
 8002c38:	589b      	ldr	r3, [r3, r2]
 8002c3a:	4a3d      	ldr	r2, [pc, #244]	@ (8002d30 <UART_Start_Receive_DMA+0x148>)
 8002c3c:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 8002c3e:	68fb      	ldr	r3, [r7, #12]
 8002c40:	2280      	movs	r2, #128	@ 0x80
 8002c42:	589b      	ldr	r3, [r3, r2]
 8002c44:	2200      	movs	r2, #0
 8002c46:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 8002c48:	68fb      	ldr	r3, [r7, #12]
 8002c4a:	2280      	movs	r2, #128	@ 0x80
 8002c4c:	5898      	ldr	r0, [r3, r2]
 8002c4e:	68fb      	ldr	r3, [r7, #12]
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	3324      	adds	r3, #36	@ 0x24
 8002c54:	0019      	movs	r1, r3
 8002c56:	68fb      	ldr	r3, [r7, #12]
 8002c58:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002c5a:	001a      	movs	r2, r3
 8002c5c:	1dbb      	adds	r3, r7, #6
 8002c5e:	881b      	ldrh	r3, [r3, #0]
 8002c60:	f7fe fb1a 	bl	8001298 <HAL_DMA_Start_IT>
 8002c64:	1e03      	subs	r3, r0, #0
 8002c66:	d009      	beq.n	8002c7c <UART_Start_Receive_DMA+0x94>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 8002c68:	68fb      	ldr	r3, [r7, #12]
 8002c6a:	2290      	movs	r2, #144	@ 0x90
 8002c6c:	2110      	movs	r1, #16
 8002c6e:	5099      	str	r1, [r3, r2]

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 8002c70:	68fb      	ldr	r3, [r7, #12]
 8002c72:	228c      	movs	r2, #140	@ 0x8c
 8002c74:	2120      	movs	r1, #32
 8002c76:	5099      	str	r1, [r3, r2]

      return HAL_ERROR;
 8002c78:	2301      	movs	r3, #1
 8002c7a:	e050      	b.n	8002d1e <UART_Start_Receive_DMA+0x136>
    }
  }

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 8002c7c:	68fb      	ldr	r3, [r7, #12]
 8002c7e:	691b      	ldr	r3, [r3, #16]
 8002c80:	2b00      	cmp	r3, #0
 8002c82:	d019      	beq.n	8002cb8 <UART_Start_Receive_DMA+0xd0>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8002c84:	f3ef 8310 	mrs	r3, PRIMASK
 8002c88:	62bb      	str	r3, [r7, #40]	@ 0x28
  return(result);
 8002c8a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8002c8c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002c8e:	2301      	movs	r3, #1
 8002c90:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002c92:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002c94:	f383 8810 	msr	PRIMASK, r3
}
 8002c98:	46c0      	nop			@ (mov r8, r8)
 8002c9a:	68fb      	ldr	r3, [r7, #12]
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	681a      	ldr	r2, [r3, #0]
 8002ca0:	68fb      	ldr	r3, [r7, #12]
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	2180      	movs	r1, #128	@ 0x80
 8002ca6:	0049      	lsls	r1, r1, #1
 8002ca8:	430a      	orrs	r2, r1
 8002caa:	601a      	str	r2, [r3, #0]
 8002cac:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002cae:	633b      	str	r3, [r7, #48]	@ 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002cb0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002cb2:	f383 8810 	msr	PRIMASK, r3
}
 8002cb6:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8002cb8:	f3ef 8310 	mrs	r3, PRIMASK
 8002cbc:	613b      	str	r3, [r7, #16]
  return(result);
 8002cbe:	693b      	ldr	r3, [r7, #16]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002cc0:	63bb      	str	r3, [r7, #56]	@ 0x38
 8002cc2:	2301      	movs	r3, #1
 8002cc4:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002cc6:	697b      	ldr	r3, [r7, #20]
 8002cc8:	f383 8810 	msr	PRIMASK, r3
}
 8002ccc:	46c0      	nop			@ (mov r8, r8)
 8002cce:	68fb      	ldr	r3, [r7, #12]
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	689a      	ldr	r2, [r3, #8]
 8002cd4:	68fb      	ldr	r3, [r7, #12]
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	2101      	movs	r1, #1
 8002cda:	430a      	orrs	r2, r1
 8002cdc:	609a      	str	r2, [r3, #8]
 8002cde:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002ce0:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002ce2:	69bb      	ldr	r3, [r7, #24]
 8002ce4:	f383 8810 	msr	PRIMASK, r3
}
 8002ce8:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8002cea:	f3ef 8310 	mrs	r3, PRIMASK
 8002cee:	61fb      	str	r3, [r7, #28]
  return(result);
 8002cf0:	69fb      	ldr	r3, [r7, #28]

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002cf2:	637b      	str	r3, [r7, #52]	@ 0x34
 8002cf4:	2301      	movs	r3, #1
 8002cf6:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002cf8:	6a3b      	ldr	r3, [r7, #32]
 8002cfa:	f383 8810 	msr	PRIMASK, r3
}
 8002cfe:	46c0      	nop			@ (mov r8, r8)
 8002d00:	68fb      	ldr	r3, [r7, #12]
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	689a      	ldr	r2, [r3, #8]
 8002d06:	68fb      	ldr	r3, [r7, #12]
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	2140      	movs	r1, #64	@ 0x40
 8002d0c:	430a      	orrs	r2, r1
 8002d0e:	609a      	str	r2, [r3, #8]
 8002d10:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002d12:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002d14:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002d16:	f383 8810 	msr	PRIMASK, r3
}
 8002d1a:	46c0      	nop			@ (mov r8, r8)

  return HAL_OK;
 8002d1c:	2300      	movs	r3, #0
}
 8002d1e:	0018      	movs	r0, r3
 8002d20:	46bd      	mov	sp, r7
 8002d22:	b010      	add	sp, #64	@ 0x40
 8002d24:	bd80      	pop	{r7, pc}
 8002d26:	46c0      	nop			@ (mov r8, r8)
 8002d28:	08002e81 	.word	0x08002e81
 8002d2c:	08002fe9 	.word	0x08002fe9
 8002d30:	08003067 	.word	0x08003067

08002d34 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8002d34:	b580      	push	{r7, lr}
 8002d36:	b08a      	sub	sp, #40	@ 0x28
 8002d38:	af00      	add	r7, sp, #0
 8002d3a:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8002d3c:	f3ef 8310 	mrs	r3, PRIMASK
 8002d40:	60bb      	str	r3, [r7, #8]
  return(result);
 8002d42:	68bb      	ldr	r3, [r7, #8]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 8002d44:	627b      	str	r3, [r7, #36]	@ 0x24
 8002d46:	2301      	movs	r3, #1
 8002d48:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002d4a:	68fb      	ldr	r3, [r7, #12]
 8002d4c:	f383 8810 	msr	PRIMASK, r3
}
 8002d50:	46c0      	nop			@ (mov r8, r8)
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	681a      	ldr	r2, [r3, #0]
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	21c0      	movs	r1, #192	@ 0xc0
 8002d5e:	438a      	bics	r2, r1
 8002d60:	601a      	str	r2, [r3, #0]
 8002d62:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002d64:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002d66:	693b      	ldr	r3, [r7, #16]
 8002d68:	f383 8810 	msr	PRIMASK, r3
}
 8002d6c:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8002d6e:	f3ef 8310 	mrs	r3, PRIMASK
 8002d72:	617b      	str	r3, [r7, #20]
  return(result);
 8002d74:	697b      	ldr	r3, [r7, #20]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 8002d76:	623b      	str	r3, [r7, #32]
 8002d78:	2301      	movs	r3, #1
 8002d7a:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002d7c:	69bb      	ldr	r3, [r7, #24]
 8002d7e:	f383 8810 	msr	PRIMASK, r3
}
 8002d82:	46c0      	nop			@ (mov r8, r8)
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	689a      	ldr	r2, [r3, #8]
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	4908      	ldr	r1, [pc, #32]	@ (8002db0 <UART_EndTxTransfer+0x7c>)
 8002d90:	400a      	ands	r2, r1
 8002d92:	609a      	str	r2, [r3, #8]
 8002d94:	6a3b      	ldr	r3, [r7, #32]
 8002d96:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002d98:	69fb      	ldr	r3, [r7, #28]
 8002d9a:	f383 8810 	msr	PRIMASK, r3
}
 8002d9e:	46c0      	nop			@ (mov r8, r8)

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	2288      	movs	r2, #136	@ 0x88
 8002da4:	2120      	movs	r1, #32
 8002da6:	5099      	str	r1, [r3, r2]
}
 8002da8:	46c0      	nop			@ (mov r8, r8)
 8002daa:	46bd      	mov	sp, r7
 8002dac:	b00a      	add	sp, #40	@ 0x28
 8002dae:	bd80      	pop	{r7, pc}
 8002db0:	ff7fffff 	.word	0xff7fffff

08002db4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8002db4:	b580      	push	{r7, lr}
 8002db6:	b08e      	sub	sp, #56	@ 0x38
 8002db8:	af00      	add	r7, sp, #0
 8002dba:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8002dbc:	f3ef 8310 	mrs	r3, PRIMASK
 8002dc0:	617b      	str	r3, [r7, #20]
  return(result);
 8002dc2:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8002dc4:	637b      	str	r3, [r7, #52]	@ 0x34
 8002dc6:	2301      	movs	r3, #1
 8002dc8:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002dca:	69bb      	ldr	r3, [r7, #24]
 8002dcc:	f383 8810 	msr	PRIMASK, r3
}
 8002dd0:	46c0      	nop			@ (mov r8, r8)
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	681a      	ldr	r2, [r3, #0]
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	4926      	ldr	r1, [pc, #152]	@ (8002e78 <UART_EndRxTransfer+0xc4>)
 8002dde:	400a      	ands	r2, r1
 8002de0:	601a      	str	r2, [r3, #0]
 8002de2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002de4:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002de6:	69fb      	ldr	r3, [r7, #28]
 8002de8:	f383 8810 	msr	PRIMASK, r3
}
 8002dec:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8002dee:	f3ef 8310 	mrs	r3, PRIMASK
 8002df2:	623b      	str	r3, [r7, #32]
  return(result);
 8002df4:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8002df6:	633b      	str	r3, [r7, #48]	@ 0x30
 8002df8:	2301      	movs	r3, #1
 8002dfa:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002dfc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002dfe:	f383 8810 	msr	PRIMASK, r3
}
 8002e02:	46c0      	nop			@ (mov r8, r8)
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	689a      	ldr	r2, [r3, #8]
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	491b      	ldr	r1, [pc, #108]	@ (8002e7c <UART_EndRxTransfer+0xc8>)
 8002e10:	400a      	ands	r2, r1
 8002e12:	609a      	str	r2, [r3, #8]
 8002e14:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002e16:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002e18:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002e1a:	f383 8810 	msr	PRIMASK, r3
}
 8002e1e:	46c0      	nop			@ (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002e24:	2b01      	cmp	r3, #1
 8002e26:	d118      	bne.n	8002e5a <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8002e28:	f3ef 8310 	mrs	r3, PRIMASK
 8002e2c:	60bb      	str	r3, [r7, #8]
  return(result);
 8002e2e:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002e30:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002e32:	2301      	movs	r3, #1
 8002e34:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002e36:	68fb      	ldr	r3, [r7, #12]
 8002e38:	f383 8810 	msr	PRIMASK, r3
}
 8002e3c:	46c0      	nop			@ (mov r8, r8)
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	681a      	ldr	r2, [r3, #0]
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	2110      	movs	r1, #16
 8002e4a:	438a      	bics	r2, r1
 8002e4c:	601a      	str	r2, [r3, #0]
 8002e4e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002e50:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002e52:	693b      	ldr	r3, [r7, #16]
 8002e54:	f383 8810 	msr	PRIMASK, r3
}
 8002e58:	46c0      	nop			@ (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	228c      	movs	r2, #140	@ 0x8c
 8002e5e:	2120      	movs	r1, #32
 8002e60:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	2200      	movs	r2, #0
 8002e66:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	2200      	movs	r2, #0
 8002e6c:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8002e6e:	46c0      	nop			@ (mov r8, r8)
 8002e70:	46bd      	mov	sp, r7
 8002e72:	b00e      	add	sp, #56	@ 0x38
 8002e74:	bd80      	pop	{r7, pc}
 8002e76:	46c0      	nop			@ (mov r8, r8)
 8002e78:	fffffedf 	.word	0xfffffedf
 8002e7c:	effffffe 	.word	0xeffffffe

08002e80 <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8002e80:	b580      	push	{r7, lr}
 8002e82:	b094      	sub	sp, #80	@ 0x50
 8002e84:	af00      	add	r7, sp, #0
 8002e86:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002e8c:	64fb      	str	r3, [r7, #76]	@ 0x4c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	2220      	movs	r2, #32
 8002e96:	4013      	ands	r3, r2
 8002e98:	d16f      	bne.n	8002f7a <UART_DMAReceiveCplt+0xfa>
  {
    huart->RxXferCount = 0U;
 8002e9a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8002e9c:	225e      	movs	r2, #94	@ 0x5e
 8002e9e:	2100      	movs	r1, #0
 8002ea0:	5299      	strh	r1, [r3, r2]
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8002ea2:	f3ef 8310 	mrs	r3, PRIMASK
 8002ea6:	617b      	str	r3, [r7, #20]
  return(result);
 8002ea8:	697b      	ldr	r3, [r7, #20]

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8002eaa:	64bb      	str	r3, [r7, #72]	@ 0x48
 8002eac:	2301      	movs	r3, #1
 8002eae:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002eb0:	69bb      	ldr	r3, [r7, #24]
 8002eb2:	f383 8810 	msr	PRIMASK, r3
}
 8002eb6:	46c0      	nop			@ (mov r8, r8)
 8002eb8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	681a      	ldr	r2, [r3, #0]
 8002ebe:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	4948      	ldr	r1, [pc, #288]	@ (8002fe4 <UART_DMAReceiveCplt+0x164>)
 8002ec4:	400a      	ands	r2, r1
 8002ec6:	601a      	str	r2, [r3, #0]
 8002ec8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002eca:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002ecc:	69fb      	ldr	r3, [r7, #28]
 8002ece:	f383 8810 	msr	PRIMASK, r3
}
 8002ed2:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8002ed4:	f3ef 8310 	mrs	r3, PRIMASK
 8002ed8:	623b      	str	r3, [r7, #32]
  return(result);
 8002eda:	6a3b      	ldr	r3, [r7, #32]
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002edc:	647b      	str	r3, [r7, #68]	@ 0x44
 8002ede:	2301      	movs	r3, #1
 8002ee0:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002ee2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ee4:	f383 8810 	msr	PRIMASK, r3
}
 8002ee8:	46c0      	nop			@ (mov r8, r8)
 8002eea:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	689a      	ldr	r2, [r3, #8]
 8002ef0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	2101      	movs	r1, #1
 8002ef6:	438a      	bics	r2, r1
 8002ef8:	609a      	str	r2, [r3, #8]
 8002efa:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002efc:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002efe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002f00:	f383 8810 	msr	PRIMASK, r3
}
 8002f04:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8002f06:	f3ef 8310 	mrs	r3, PRIMASK
 8002f0a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  return(result);
 8002f0c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002f0e:	643b      	str	r3, [r7, #64]	@ 0x40
 8002f10:	2301      	movs	r3, #1
 8002f12:	633b      	str	r3, [r7, #48]	@ 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002f14:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002f16:	f383 8810 	msr	PRIMASK, r3
}
 8002f1a:	46c0      	nop			@ (mov r8, r8)
 8002f1c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	689a      	ldr	r2, [r3, #8]
 8002f22:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	2140      	movs	r1, #64	@ 0x40
 8002f28:	438a      	bics	r2, r1
 8002f2a:	609a      	str	r2, [r3, #8]
 8002f2c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002f2e:	637b      	str	r3, [r7, #52]	@ 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002f30:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002f32:	f383 8810 	msr	PRIMASK, r3
}
 8002f36:	46c0      	nop			@ (mov r8, r8)

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8002f38:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8002f3a:	228c      	movs	r2, #140	@ 0x8c
 8002f3c:	2120      	movs	r1, #32
 8002f3e:	5099      	str	r1, [r3, r2]

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002f40:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8002f42:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002f44:	2b01      	cmp	r3, #1
 8002f46:	d118      	bne.n	8002f7a <UART_DMAReceiveCplt+0xfa>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8002f48:	f3ef 8310 	mrs	r3, PRIMASK
 8002f4c:	60bb      	str	r3, [r7, #8]
  return(result);
 8002f4e:	68bb      	ldr	r3, [r7, #8]
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002f50:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002f52:	2301      	movs	r3, #1
 8002f54:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002f56:	68fb      	ldr	r3, [r7, #12]
 8002f58:	f383 8810 	msr	PRIMASK, r3
}
 8002f5c:	46c0      	nop			@ (mov r8, r8)
 8002f5e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	681a      	ldr	r2, [r3, #0]
 8002f64:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	2110      	movs	r1, #16
 8002f6a:	438a      	bics	r2, r1
 8002f6c:	601a      	str	r2, [r3, #0]
 8002f6e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002f70:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002f72:	693b      	ldr	r3, [r7, #16]
 8002f74:	f383 8810 	msr	PRIMASK, r3
}
 8002f78:	46c0      	nop			@ (mov r8, r8)
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002f7a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8002f7c:	2200      	movs	r2, #0
 8002f7e:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002f80:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8002f82:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002f84:	2b01      	cmp	r3, #1
 8002f86:	d124      	bne.n	8002fd2 <UART_DMAReceiveCplt+0x152>
  {
    huart->RxXferCount = 0;
 8002f88:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8002f8a:	225e      	movs	r2, #94	@ 0x5e
 8002f8c:	2100      	movs	r1, #0
 8002f8e:	5299      	strh	r1, [r3, r2]

    /* Check current nb of data still to be received on DMA side.
       DMA Normal mode, remaining nb of data will be 0
       DMA Circular mode, remaining nb of data is reset to RxXferSize */
    uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(hdma);
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	685a      	ldr	r2, [r3, #4]
 8002f96:	213a      	movs	r1, #58	@ 0x3a
 8002f98:	187b      	adds	r3, r7, r1
 8002f9a:	801a      	strh	r2, [r3, #0]
    if (nb_remaining_rx_data < huart->RxXferSize)
 8002f9c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8002f9e:	225c      	movs	r2, #92	@ 0x5c
 8002fa0:	5a9b      	ldrh	r3, [r3, r2]
 8002fa2:	187a      	adds	r2, r7, r1
 8002fa4:	8812      	ldrh	r2, [r2, #0]
 8002fa6:	429a      	cmp	r2, r3
 8002fa8:	d204      	bcs.n	8002fb4 <UART_DMAReceiveCplt+0x134>
    {
      /* Update nb of remaining data */
      huart->RxXferCount = nb_remaining_rx_data;
 8002faa:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8002fac:	187a      	adds	r2, r7, r1
 8002fae:	215e      	movs	r1, #94	@ 0x5e
 8002fb0:	8812      	ldrh	r2, [r2, #0]
 8002fb2:	525a      	strh	r2, [r3, r1]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8002fb4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8002fb6:	225c      	movs	r2, #92	@ 0x5c
 8002fb8:	5a9a      	ldrh	r2, [r3, r2]
 8002fba:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8002fbc:	215e      	movs	r1, #94	@ 0x5e
 8002fbe:	5a5b      	ldrh	r3, [r3, r1]
 8002fc0:	b29b      	uxth	r3, r3
 8002fc2:	1ad3      	subs	r3, r2, r3
 8002fc4:	b29a      	uxth	r2, r3
 8002fc6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8002fc8:	0011      	movs	r1, r2
 8002fca:	0018      	movs	r0, r3
 8002fcc:	f7ff fa9d 	bl	800250a <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8002fd0:	e003      	b.n	8002fda <UART_DMAReceiveCplt+0x15a>
    HAL_UART_RxCpltCallback(huart);
 8002fd2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8002fd4:	0018      	movs	r0, r3
 8002fd6:	f7fd fd59 	bl	8000a8c <HAL_UART_RxCpltCallback>
}
 8002fda:	46c0      	nop			@ (mov r8, r8)
 8002fdc:	46bd      	mov	sp, r7
 8002fde:	b014      	add	sp, #80	@ 0x50
 8002fe0:	bd80      	pop	{r7, pc}
 8002fe2:	46c0      	nop			@ (mov r8, r8)
 8002fe4:	fffffeff 	.word	0xfffffeff

08002fe8 <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8002fe8:	b580      	push	{r7, lr}
 8002fea:	b084      	sub	sp, #16
 8002fec:	af00      	add	r7, sp, #0
 8002fee:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002ff4:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 8002ff6:	68fb      	ldr	r3, [r7, #12]
 8002ff8:	2201      	movs	r2, #1
 8002ffa:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002ffc:	68fb      	ldr	r3, [r7, #12]
 8002ffe:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003000:	2b01      	cmp	r3, #1
 8003002:	d128      	bne.n	8003056 <UART_DMARxHalfCplt+0x6e>
  {
    huart->RxXferCount = huart->RxXferSize / 2U;
 8003004:	68fb      	ldr	r3, [r7, #12]
 8003006:	225c      	movs	r2, #92	@ 0x5c
 8003008:	5a9b      	ldrh	r3, [r3, r2]
 800300a:	085b      	lsrs	r3, r3, #1
 800300c:	b299      	uxth	r1, r3
 800300e:	68fb      	ldr	r3, [r7, #12]
 8003010:	225e      	movs	r2, #94	@ 0x5e
 8003012:	5299      	strh	r1, [r3, r2]

    /* Check current nb of data still to be received on DMA side. */
    uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(hdma);
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	685a      	ldr	r2, [r3, #4]
 800301a:	210a      	movs	r1, #10
 800301c:	187b      	adds	r3, r7, r1
 800301e:	801a      	strh	r2, [r3, #0]
    if (nb_remaining_rx_data <= huart->RxXferSize)
 8003020:	68fb      	ldr	r3, [r7, #12]
 8003022:	225c      	movs	r2, #92	@ 0x5c
 8003024:	5a9b      	ldrh	r3, [r3, r2]
 8003026:	187a      	adds	r2, r7, r1
 8003028:	8812      	ldrh	r2, [r2, #0]
 800302a:	429a      	cmp	r2, r3
 800302c:	d804      	bhi.n	8003038 <UART_DMARxHalfCplt+0x50>
    {
      /* Update nb of remaining data */
      huart->RxXferCount = nb_remaining_rx_data;
 800302e:	68fb      	ldr	r3, [r7, #12]
 8003030:	187a      	adds	r2, r7, r1
 8003032:	215e      	movs	r1, #94	@ 0x5e
 8003034:	8812      	ldrh	r2, [r2, #0]
 8003036:	525a      	strh	r2, [r3, r1]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8003038:	68fb      	ldr	r3, [r7, #12]
 800303a:	225c      	movs	r2, #92	@ 0x5c
 800303c:	5a9a      	ldrh	r2, [r3, r2]
 800303e:	68fb      	ldr	r3, [r7, #12]
 8003040:	215e      	movs	r1, #94	@ 0x5e
 8003042:	5a5b      	ldrh	r3, [r3, r1]
 8003044:	b29b      	uxth	r3, r3
 8003046:	1ad3      	subs	r3, r2, r3
 8003048:	b29a      	uxth	r2, r3
 800304a:	68fb      	ldr	r3, [r7, #12]
 800304c:	0011      	movs	r1, r2
 800304e:	0018      	movs	r0, r3
 8003050:	f7ff fa5b 	bl	800250a <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8003054:	e003      	b.n	800305e <UART_DMARxHalfCplt+0x76>
    HAL_UART_RxHalfCpltCallback(huart);
 8003056:	68fb      	ldr	r3, [r7, #12]
 8003058:	0018      	movs	r0, r3
 800305a:	f7fd fd1f 	bl	8000a9c <HAL_UART_RxHalfCpltCallback>
}
 800305e:	46c0      	nop			@ (mov r8, r8)
 8003060:	46bd      	mov	sp, r7
 8003062:	b004      	add	sp, #16
 8003064:	bd80      	pop	{r7, pc}

08003066 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8003066:	b580      	push	{r7, lr}
 8003068:	b086      	sub	sp, #24
 800306a:	af00      	add	r7, sp, #0
 800306c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003072:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 8003074:	697b      	ldr	r3, [r7, #20]
 8003076:	2288      	movs	r2, #136	@ 0x88
 8003078:	589b      	ldr	r3, [r3, r2]
 800307a:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 800307c:	697b      	ldr	r3, [r7, #20]
 800307e:	228c      	movs	r2, #140	@ 0x8c
 8003080:	589b      	ldr	r3, [r3, r2]
 8003082:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 8003084:	697b      	ldr	r3, [r7, #20]
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	689b      	ldr	r3, [r3, #8]
 800308a:	2280      	movs	r2, #128	@ 0x80
 800308c:	4013      	ands	r3, r2
 800308e:	2b80      	cmp	r3, #128	@ 0x80
 8003090:	d10a      	bne.n	80030a8 <UART_DMAError+0x42>
 8003092:	693b      	ldr	r3, [r7, #16]
 8003094:	2b21      	cmp	r3, #33	@ 0x21
 8003096:	d107      	bne.n	80030a8 <UART_DMAError+0x42>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 8003098:	697b      	ldr	r3, [r7, #20]
 800309a:	2256      	movs	r2, #86	@ 0x56
 800309c:	2100      	movs	r1, #0
 800309e:	5299      	strh	r1, [r3, r2]
    UART_EndTxTransfer(huart);
 80030a0:	697b      	ldr	r3, [r7, #20]
 80030a2:	0018      	movs	r0, r3
 80030a4:	f7ff fe46 	bl	8002d34 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 80030a8:	697b      	ldr	r3, [r7, #20]
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	689b      	ldr	r3, [r3, #8]
 80030ae:	2240      	movs	r2, #64	@ 0x40
 80030b0:	4013      	ands	r3, r2
 80030b2:	2b40      	cmp	r3, #64	@ 0x40
 80030b4:	d10a      	bne.n	80030cc <UART_DMAError+0x66>
 80030b6:	68fb      	ldr	r3, [r7, #12]
 80030b8:	2b22      	cmp	r3, #34	@ 0x22
 80030ba:	d107      	bne.n	80030cc <UART_DMAError+0x66>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 80030bc:	697b      	ldr	r3, [r7, #20]
 80030be:	225e      	movs	r2, #94	@ 0x5e
 80030c0:	2100      	movs	r1, #0
 80030c2:	5299      	strh	r1, [r3, r2]
    UART_EndRxTransfer(huart);
 80030c4:	697b      	ldr	r3, [r7, #20]
 80030c6:	0018      	movs	r0, r3
 80030c8:	f7ff fe74 	bl	8002db4 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 80030cc:	697b      	ldr	r3, [r7, #20]
 80030ce:	2290      	movs	r2, #144	@ 0x90
 80030d0:	589b      	ldr	r3, [r3, r2]
 80030d2:	2210      	movs	r2, #16
 80030d4:	431a      	orrs	r2, r3
 80030d6:	697b      	ldr	r3, [r7, #20]
 80030d8:	2190      	movs	r1, #144	@ 0x90
 80030da:	505a      	str	r2, [r3, r1]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80030dc:	697b      	ldr	r3, [r7, #20]
 80030de:	0018      	movs	r0, r3
 80030e0:	f7fd fcae 	bl	8000a40 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80030e4:	46c0      	nop			@ (mov r8, r8)
 80030e6:	46bd      	mov	sp, r7
 80030e8:	b006      	add	sp, #24
 80030ea:	bd80      	pop	{r7, pc}

080030ec <std>:
 80030ec:	2300      	movs	r3, #0
 80030ee:	b510      	push	{r4, lr}
 80030f0:	0004      	movs	r4, r0
 80030f2:	6003      	str	r3, [r0, #0]
 80030f4:	6043      	str	r3, [r0, #4]
 80030f6:	6083      	str	r3, [r0, #8]
 80030f8:	8181      	strh	r1, [r0, #12]
 80030fa:	6643      	str	r3, [r0, #100]	@ 0x64
 80030fc:	81c2      	strh	r2, [r0, #14]
 80030fe:	6103      	str	r3, [r0, #16]
 8003100:	6143      	str	r3, [r0, #20]
 8003102:	6183      	str	r3, [r0, #24]
 8003104:	0019      	movs	r1, r3
 8003106:	2208      	movs	r2, #8
 8003108:	305c      	adds	r0, #92	@ 0x5c
 800310a:	f000 fa0f 	bl	800352c <memset>
 800310e:	4b0b      	ldr	r3, [pc, #44]	@ (800313c <std+0x50>)
 8003110:	6224      	str	r4, [r4, #32]
 8003112:	6263      	str	r3, [r4, #36]	@ 0x24
 8003114:	4b0a      	ldr	r3, [pc, #40]	@ (8003140 <std+0x54>)
 8003116:	62a3      	str	r3, [r4, #40]	@ 0x28
 8003118:	4b0a      	ldr	r3, [pc, #40]	@ (8003144 <std+0x58>)
 800311a:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800311c:	4b0a      	ldr	r3, [pc, #40]	@ (8003148 <std+0x5c>)
 800311e:	6323      	str	r3, [r4, #48]	@ 0x30
 8003120:	4b0a      	ldr	r3, [pc, #40]	@ (800314c <std+0x60>)
 8003122:	429c      	cmp	r4, r3
 8003124:	d005      	beq.n	8003132 <std+0x46>
 8003126:	4b0a      	ldr	r3, [pc, #40]	@ (8003150 <std+0x64>)
 8003128:	429c      	cmp	r4, r3
 800312a:	d002      	beq.n	8003132 <std+0x46>
 800312c:	4b09      	ldr	r3, [pc, #36]	@ (8003154 <std+0x68>)
 800312e:	429c      	cmp	r4, r3
 8003130:	d103      	bne.n	800313a <std+0x4e>
 8003132:	0020      	movs	r0, r4
 8003134:	3058      	adds	r0, #88	@ 0x58
 8003136:	f000 fa79 	bl	800362c <__retarget_lock_init_recursive>
 800313a:	bd10      	pop	{r4, pc}
 800313c:	08003355 	.word	0x08003355
 8003140:	0800337d 	.word	0x0800337d
 8003144:	080033b5 	.word	0x080033b5
 8003148:	080033e1 	.word	0x080033e1
 800314c:	200002f4 	.word	0x200002f4
 8003150:	2000035c 	.word	0x2000035c
 8003154:	200003c4 	.word	0x200003c4

08003158 <stdio_exit_handler>:
 8003158:	b510      	push	{r4, lr}
 800315a:	4a03      	ldr	r2, [pc, #12]	@ (8003168 <stdio_exit_handler+0x10>)
 800315c:	4903      	ldr	r1, [pc, #12]	@ (800316c <stdio_exit_handler+0x14>)
 800315e:	4804      	ldr	r0, [pc, #16]	@ (8003170 <stdio_exit_handler+0x18>)
 8003160:	f000 f86c 	bl	800323c <_fwalk_sglue>
 8003164:	bd10      	pop	{r4, pc}
 8003166:	46c0      	nop			@ (mov r8, r8)
 8003168:	20000014 	.word	0x20000014
 800316c:	08003ec9 	.word	0x08003ec9
 8003170:	20000024 	.word	0x20000024

08003174 <cleanup_stdio>:
 8003174:	6841      	ldr	r1, [r0, #4]
 8003176:	4b0b      	ldr	r3, [pc, #44]	@ (80031a4 <cleanup_stdio+0x30>)
 8003178:	b510      	push	{r4, lr}
 800317a:	0004      	movs	r4, r0
 800317c:	4299      	cmp	r1, r3
 800317e:	d001      	beq.n	8003184 <cleanup_stdio+0x10>
 8003180:	f000 fea2 	bl	8003ec8 <_fflush_r>
 8003184:	68a1      	ldr	r1, [r4, #8]
 8003186:	4b08      	ldr	r3, [pc, #32]	@ (80031a8 <cleanup_stdio+0x34>)
 8003188:	4299      	cmp	r1, r3
 800318a:	d002      	beq.n	8003192 <cleanup_stdio+0x1e>
 800318c:	0020      	movs	r0, r4
 800318e:	f000 fe9b 	bl	8003ec8 <_fflush_r>
 8003192:	68e1      	ldr	r1, [r4, #12]
 8003194:	4b05      	ldr	r3, [pc, #20]	@ (80031ac <cleanup_stdio+0x38>)
 8003196:	4299      	cmp	r1, r3
 8003198:	d002      	beq.n	80031a0 <cleanup_stdio+0x2c>
 800319a:	0020      	movs	r0, r4
 800319c:	f000 fe94 	bl	8003ec8 <_fflush_r>
 80031a0:	bd10      	pop	{r4, pc}
 80031a2:	46c0      	nop			@ (mov r8, r8)
 80031a4:	200002f4 	.word	0x200002f4
 80031a8:	2000035c 	.word	0x2000035c
 80031ac:	200003c4 	.word	0x200003c4

080031b0 <global_stdio_init.part.0>:
 80031b0:	b510      	push	{r4, lr}
 80031b2:	4b09      	ldr	r3, [pc, #36]	@ (80031d8 <global_stdio_init.part.0+0x28>)
 80031b4:	4a09      	ldr	r2, [pc, #36]	@ (80031dc <global_stdio_init.part.0+0x2c>)
 80031b6:	2104      	movs	r1, #4
 80031b8:	601a      	str	r2, [r3, #0]
 80031ba:	4809      	ldr	r0, [pc, #36]	@ (80031e0 <global_stdio_init.part.0+0x30>)
 80031bc:	2200      	movs	r2, #0
 80031be:	f7ff ff95 	bl	80030ec <std>
 80031c2:	2201      	movs	r2, #1
 80031c4:	2109      	movs	r1, #9
 80031c6:	4807      	ldr	r0, [pc, #28]	@ (80031e4 <global_stdio_init.part.0+0x34>)
 80031c8:	f7ff ff90 	bl	80030ec <std>
 80031cc:	2202      	movs	r2, #2
 80031ce:	2112      	movs	r1, #18
 80031d0:	4805      	ldr	r0, [pc, #20]	@ (80031e8 <global_stdio_init.part.0+0x38>)
 80031d2:	f7ff ff8b 	bl	80030ec <std>
 80031d6:	bd10      	pop	{r4, pc}
 80031d8:	2000042c 	.word	0x2000042c
 80031dc:	08003159 	.word	0x08003159
 80031e0:	200002f4 	.word	0x200002f4
 80031e4:	2000035c 	.word	0x2000035c
 80031e8:	200003c4 	.word	0x200003c4

080031ec <__sfp_lock_acquire>:
 80031ec:	b510      	push	{r4, lr}
 80031ee:	4802      	ldr	r0, [pc, #8]	@ (80031f8 <__sfp_lock_acquire+0xc>)
 80031f0:	f000 fa1d 	bl	800362e <__retarget_lock_acquire_recursive>
 80031f4:	bd10      	pop	{r4, pc}
 80031f6:	46c0      	nop			@ (mov r8, r8)
 80031f8:	20000435 	.word	0x20000435

080031fc <__sfp_lock_release>:
 80031fc:	b510      	push	{r4, lr}
 80031fe:	4802      	ldr	r0, [pc, #8]	@ (8003208 <__sfp_lock_release+0xc>)
 8003200:	f000 fa16 	bl	8003630 <__retarget_lock_release_recursive>
 8003204:	bd10      	pop	{r4, pc}
 8003206:	46c0      	nop			@ (mov r8, r8)
 8003208:	20000435 	.word	0x20000435

0800320c <__sinit>:
 800320c:	b510      	push	{r4, lr}
 800320e:	0004      	movs	r4, r0
 8003210:	f7ff ffec 	bl	80031ec <__sfp_lock_acquire>
 8003214:	6a23      	ldr	r3, [r4, #32]
 8003216:	2b00      	cmp	r3, #0
 8003218:	d002      	beq.n	8003220 <__sinit+0x14>
 800321a:	f7ff ffef 	bl	80031fc <__sfp_lock_release>
 800321e:	bd10      	pop	{r4, pc}
 8003220:	4b04      	ldr	r3, [pc, #16]	@ (8003234 <__sinit+0x28>)
 8003222:	6223      	str	r3, [r4, #32]
 8003224:	4b04      	ldr	r3, [pc, #16]	@ (8003238 <__sinit+0x2c>)
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	2b00      	cmp	r3, #0
 800322a:	d1f6      	bne.n	800321a <__sinit+0xe>
 800322c:	f7ff ffc0 	bl	80031b0 <global_stdio_init.part.0>
 8003230:	e7f3      	b.n	800321a <__sinit+0xe>
 8003232:	46c0      	nop			@ (mov r8, r8)
 8003234:	08003175 	.word	0x08003175
 8003238:	2000042c 	.word	0x2000042c

0800323c <_fwalk_sglue>:
 800323c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800323e:	0014      	movs	r4, r2
 8003240:	2600      	movs	r6, #0
 8003242:	9000      	str	r0, [sp, #0]
 8003244:	9101      	str	r1, [sp, #4]
 8003246:	68a5      	ldr	r5, [r4, #8]
 8003248:	6867      	ldr	r7, [r4, #4]
 800324a:	3f01      	subs	r7, #1
 800324c:	d504      	bpl.n	8003258 <_fwalk_sglue+0x1c>
 800324e:	6824      	ldr	r4, [r4, #0]
 8003250:	2c00      	cmp	r4, #0
 8003252:	d1f8      	bne.n	8003246 <_fwalk_sglue+0xa>
 8003254:	0030      	movs	r0, r6
 8003256:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8003258:	89ab      	ldrh	r3, [r5, #12]
 800325a:	2b01      	cmp	r3, #1
 800325c:	d908      	bls.n	8003270 <_fwalk_sglue+0x34>
 800325e:	220e      	movs	r2, #14
 8003260:	5eab      	ldrsh	r3, [r5, r2]
 8003262:	3301      	adds	r3, #1
 8003264:	d004      	beq.n	8003270 <_fwalk_sglue+0x34>
 8003266:	0029      	movs	r1, r5
 8003268:	9800      	ldr	r0, [sp, #0]
 800326a:	9b01      	ldr	r3, [sp, #4]
 800326c:	4798      	blx	r3
 800326e:	4306      	orrs	r6, r0
 8003270:	3568      	adds	r5, #104	@ 0x68
 8003272:	e7ea      	b.n	800324a <_fwalk_sglue+0xe>

08003274 <iprintf>:
 8003274:	b40f      	push	{r0, r1, r2, r3}
 8003276:	b507      	push	{r0, r1, r2, lr}
 8003278:	4905      	ldr	r1, [pc, #20]	@ (8003290 <iprintf+0x1c>)
 800327a:	ab04      	add	r3, sp, #16
 800327c:	6808      	ldr	r0, [r1, #0]
 800327e:	cb04      	ldmia	r3!, {r2}
 8003280:	6881      	ldr	r1, [r0, #8]
 8003282:	9301      	str	r3, [sp, #4]
 8003284:	f000 fb02 	bl	800388c <_vfiprintf_r>
 8003288:	b003      	add	sp, #12
 800328a:	bc08      	pop	{r3}
 800328c:	b004      	add	sp, #16
 800328e:	4718      	bx	r3
 8003290:	20000020 	.word	0x20000020

08003294 <_puts_r>:
 8003294:	6a03      	ldr	r3, [r0, #32]
 8003296:	b570      	push	{r4, r5, r6, lr}
 8003298:	0005      	movs	r5, r0
 800329a:	000e      	movs	r6, r1
 800329c:	6884      	ldr	r4, [r0, #8]
 800329e:	2b00      	cmp	r3, #0
 80032a0:	d101      	bne.n	80032a6 <_puts_r+0x12>
 80032a2:	f7ff ffb3 	bl	800320c <__sinit>
 80032a6:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80032a8:	07db      	lsls	r3, r3, #31
 80032aa:	d405      	bmi.n	80032b8 <_puts_r+0x24>
 80032ac:	89a3      	ldrh	r3, [r4, #12]
 80032ae:	059b      	lsls	r3, r3, #22
 80032b0:	d402      	bmi.n	80032b8 <_puts_r+0x24>
 80032b2:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80032b4:	f000 f9bb 	bl	800362e <__retarget_lock_acquire_recursive>
 80032b8:	89a3      	ldrh	r3, [r4, #12]
 80032ba:	071b      	lsls	r3, r3, #28
 80032bc:	d502      	bpl.n	80032c4 <_puts_r+0x30>
 80032be:	6923      	ldr	r3, [r4, #16]
 80032c0:	2b00      	cmp	r3, #0
 80032c2:	d11f      	bne.n	8003304 <_puts_r+0x70>
 80032c4:	0021      	movs	r1, r4
 80032c6:	0028      	movs	r0, r5
 80032c8:	f000 f8d2 	bl	8003470 <__swsetup_r>
 80032cc:	2800      	cmp	r0, #0
 80032ce:	d019      	beq.n	8003304 <_puts_r+0x70>
 80032d0:	2501      	movs	r5, #1
 80032d2:	426d      	negs	r5, r5
 80032d4:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80032d6:	07db      	lsls	r3, r3, #31
 80032d8:	d405      	bmi.n	80032e6 <_puts_r+0x52>
 80032da:	89a3      	ldrh	r3, [r4, #12]
 80032dc:	059b      	lsls	r3, r3, #22
 80032de:	d402      	bmi.n	80032e6 <_puts_r+0x52>
 80032e0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80032e2:	f000 f9a5 	bl	8003630 <__retarget_lock_release_recursive>
 80032e6:	0028      	movs	r0, r5
 80032e8:	bd70      	pop	{r4, r5, r6, pc}
 80032ea:	3601      	adds	r6, #1
 80032ec:	60a3      	str	r3, [r4, #8]
 80032ee:	2b00      	cmp	r3, #0
 80032f0:	da04      	bge.n	80032fc <_puts_r+0x68>
 80032f2:	69a2      	ldr	r2, [r4, #24]
 80032f4:	429a      	cmp	r2, r3
 80032f6:	dc16      	bgt.n	8003326 <_puts_r+0x92>
 80032f8:	290a      	cmp	r1, #10
 80032fa:	d014      	beq.n	8003326 <_puts_r+0x92>
 80032fc:	6823      	ldr	r3, [r4, #0]
 80032fe:	1c5a      	adds	r2, r3, #1
 8003300:	6022      	str	r2, [r4, #0]
 8003302:	7019      	strb	r1, [r3, #0]
 8003304:	68a3      	ldr	r3, [r4, #8]
 8003306:	7831      	ldrb	r1, [r6, #0]
 8003308:	3b01      	subs	r3, #1
 800330a:	2900      	cmp	r1, #0
 800330c:	d1ed      	bne.n	80032ea <_puts_r+0x56>
 800330e:	60a3      	str	r3, [r4, #8]
 8003310:	2b00      	cmp	r3, #0
 8003312:	da0f      	bge.n	8003334 <_puts_r+0xa0>
 8003314:	0022      	movs	r2, r4
 8003316:	0028      	movs	r0, r5
 8003318:	310a      	adds	r1, #10
 800331a:	f000 f867 	bl	80033ec <__swbuf_r>
 800331e:	3001      	adds	r0, #1
 8003320:	d0d6      	beq.n	80032d0 <_puts_r+0x3c>
 8003322:	250a      	movs	r5, #10
 8003324:	e7d6      	b.n	80032d4 <_puts_r+0x40>
 8003326:	0022      	movs	r2, r4
 8003328:	0028      	movs	r0, r5
 800332a:	f000 f85f 	bl	80033ec <__swbuf_r>
 800332e:	3001      	adds	r0, #1
 8003330:	d1e8      	bne.n	8003304 <_puts_r+0x70>
 8003332:	e7cd      	b.n	80032d0 <_puts_r+0x3c>
 8003334:	6823      	ldr	r3, [r4, #0]
 8003336:	1c5a      	adds	r2, r3, #1
 8003338:	6022      	str	r2, [r4, #0]
 800333a:	220a      	movs	r2, #10
 800333c:	701a      	strb	r2, [r3, #0]
 800333e:	e7f0      	b.n	8003322 <_puts_r+0x8e>

08003340 <puts>:
 8003340:	b510      	push	{r4, lr}
 8003342:	4b03      	ldr	r3, [pc, #12]	@ (8003350 <puts+0x10>)
 8003344:	0001      	movs	r1, r0
 8003346:	6818      	ldr	r0, [r3, #0]
 8003348:	f7ff ffa4 	bl	8003294 <_puts_r>
 800334c:	bd10      	pop	{r4, pc}
 800334e:	46c0      	nop			@ (mov r8, r8)
 8003350:	20000020 	.word	0x20000020

08003354 <__sread>:
 8003354:	b570      	push	{r4, r5, r6, lr}
 8003356:	000c      	movs	r4, r1
 8003358:	250e      	movs	r5, #14
 800335a:	5f49      	ldrsh	r1, [r1, r5]
 800335c:	f000 f914 	bl	8003588 <_read_r>
 8003360:	2800      	cmp	r0, #0
 8003362:	db03      	blt.n	800336c <__sread+0x18>
 8003364:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 8003366:	181b      	adds	r3, r3, r0
 8003368:	6563      	str	r3, [r4, #84]	@ 0x54
 800336a:	bd70      	pop	{r4, r5, r6, pc}
 800336c:	89a3      	ldrh	r3, [r4, #12]
 800336e:	4a02      	ldr	r2, [pc, #8]	@ (8003378 <__sread+0x24>)
 8003370:	4013      	ands	r3, r2
 8003372:	81a3      	strh	r3, [r4, #12]
 8003374:	e7f9      	b.n	800336a <__sread+0x16>
 8003376:	46c0      	nop			@ (mov r8, r8)
 8003378:	ffffefff 	.word	0xffffefff

0800337c <__swrite>:
 800337c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800337e:	001f      	movs	r7, r3
 8003380:	898b      	ldrh	r3, [r1, #12]
 8003382:	0005      	movs	r5, r0
 8003384:	000c      	movs	r4, r1
 8003386:	0016      	movs	r6, r2
 8003388:	05db      	lsls	r3, r3, #23
 800338a:	d505      	bpl.n	8003398 <__swrite+0x1c>
 800338c:	230e      	movs	r3, #14
 800338e:	5ec9      	ldrsh	r1, [r1, r3]
 8003390:	2200      	movs	r2, #0
 8003392:	2302      	movs	r3, #2
 8003394:	f000 f8e4 	bl	8003560 <_lseek_r>
 8003398:	89a3      	ldrh	r3, [r4, #12]
 800339a:	4a05      	ldr	r2, [pc, #20]	@ (80033b0 <__swrite+0x34>)
 800339c:	0028      	movs	r0, r5
 800339e:	4013      	ands	r3, r2
 80033a0:	81a3      	strh	r3, [r4, #12]
 80033a2:	0032      	movs	r2, r6
 80033a4:	230e      	movs	r3, #14
 80033a6:	5ee1      	ldrsh	r1, [r4, r3]
 80033a8:	003b      	movs	r3, r7
 80033aa:	f000 f901 	bl	80035b0 <_write_r>
 80033ae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80033b0:	ffffefff 	.word	0xffffefff

080033b4 <__sseek>:
 80033b4:	b570      	push	{r4, r5, r6, lr}
 80033b6:	000c      	movs	r4, r1
 80033b8:	250e      	movs	r5, #14
 80033ba:	5f49      	ldrsh	r1, [r1, r5]
 80033bc:	f000 f8d0 	bl	8003560 <_lseek_r>
 80033c0:	89a3      	ldrh	r3, [r4, #12]
 80033c2:	1c42      	adds	r2, r0, #1
 80033c4:	d103      	bne.n	80033ce <__sseek+0x1a>
 80033c6:	4a05      	ldr	r2, [pc, #20]	@ (80033dc <__sseek+0x28>)
 80033c8:	4013      	ands	r3, r2
 80033ca:	81a3      	strh	r3, [r4, #12]
 80033cc:	bd70      	pop	{r4, r5, r6, pc}
 80033ce:	2280      	movs	r2, #128	@ 0x80
 80033d0:	0152      	lsls	r2, r2, #5
 80033d2:	4313      	orrs	r3, r2
 80033d4:	81a3      	strh	r3, [r4, #12]
 80033d6:	6560      	str	r0, [r4, #84]	@ 0x54
 80033d8:	e7f8      	b.n	80033cc <__sseek+0x18>
 80033da:	46c0      	nop			@ (mov r8, r8)
 80033dc:	ffffefff 	.word	0xffffefff

080033e0 <__sclose>:
 80033e0:	b510      	push	{r4, lr}
 80033e2:	230e      	movs	r3, #14
 80033e4:	5ec9      	ldrsh	r1, [r1, r3]
 80033e6:	f000 f8a9 	bl	800353c <_close_r>
 80033ea:	bd10      	pop	{r4, pc}

080033ec <__swbuf_r>:
 80033ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80033ee:	0006      	movs	r6, r0
 80033f0:	000d      	movs	r5, r1
 80033f2:	0014      	movs	r4, r2
 80033f4:	2800      	cmp	r0, #0
 80033f6:	d004      	beq.n	8003402 <__swbuf_r+0x16>
 80033f8:	6a03      	ldr	r3, [r0, #32]
 80033fa:	2b00      	cmp	r3, #0
 80033fc:	d101      	bne.n	8003402 <__swbuf_r+0x16>
 80033fe:	f7ff ff05 	bl	800320c <__sinit>
 8003402:	69a3      	ldr	r3, [r4, #24]
 8003404:	60a3      	str	r3, [r4, #8]
 8003406:	89a3      	ldrh	r3, [r4, #12]
 8003408:	071b      	lsls	r3, r3, #28
 800340a:	d502      	bpl.n	8003412 <__swbuf_r+0x26>
 800340c:	6923      	ldr	r3, [r4, #16]
 800340e:	2b00      	cmp	r3, #0
 8003410:	d109      	bne.n	8003426 <__swbuf_r+0x3a>
 8003412:	0021      	movs	r1, r4
 8003414:	0030      	movs	r0, r6
 8003416:	f000 f82b 	bl	8003470 <__swsetup_r>
 800341a:	2800      	cmp	r0, #0
 800341c:	d003      	beq.n	8003426 <__swbuf_r+0x3a>
 800341e:	2501      	movs	r5, #1
 8003420:	426d      	negs	r5, r5
 8003422:	0028      	movs	r0, r5
 8003424:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003426:	6923      	ldr	r3, [r4, #16]
 8003428:	6820      	ldr	r0, [r4, #0]
 800342a:	b2ef      	uxtb	r7, r5
 800342c:	1ac0      	subs	r0, r0, r3
 800342e:	6963      	ldr	r3, [r4, #20]
 8003430:	b2ed      	uxtb	r5, r5
 8003432:	4283      	cmp	r3, r0
 8003434:	dc05      	bgt.n	8003442 <__swbuf_r+0x56>
 8003436:	0021      	movs	r1, r4
 8003438:	0030      	movs	r0, r6
 800343a:	f000 fd45 	bl	8003ec8 <_fflush_r>
 800343e:	2800      	cmp	r0, #0
 8003440:	d1ed      	bne.n	800341e <__swbuf_r+0x32>
 8003442:	68a3      	ldr	r3, [r4, #8]
 8003444:	3001      	adds	r0, #1
 8003446:	3b01      	subs	r3, #1
 8003448:	60a3      	str	r3, [r4, #8]
 800344a:	6823      	ldr	r3, [r4, #0]
 800344c:	1c5a      	adds	r2, r3, #1
 800344e:	6022      	str	r2, [r4, #0]
 8003450:	701f      	strb	r7, [r3, #0]
 8003452:	6963      	ldr	r3, [r4, #20]
 8003454:	4283      	cmp	r3, r0
 8003456:	d004      	beq.n	8003462 <__swbuf_r+0x76>
 8003458:	89a3      	ldrh	r3, [r4, #12]
 800345a:	07db      	lsls	r3, r3, #31
 800345c:	d5e1      	bpl.n	8003422 <__swbuf_r+0x36>
 800345e:	2d0a      	cmp	r5, #10
 8003460:	d1df      	bne.n	8003422 <__swbuf_r+0x36>
 8003462:	0021      	movs	r1, r4
 8003464:	0030      	movs	r0, r6
 8003466:	f000 fd2f 	bl	8003ec8 <_fflush_r>
 800346a:	2800      	cmp	r0, #0
 800346c:	d0d9      	beq.n	8003422 <__swbuf_r+0x36>
 800346e:	e7d6      	b.n	800341e <__swbuf_r+0x32>

08003470 <__swsetup_r>:
 8003470:	4b2d      	ldr	r3, [pc, #180]	@ (8003528 <__swsetup_r+0xb8>)
 8003472:	b570      	push	{r4, r5, r6, lr}
 8003474:	0005      	movs	r5, r0
 8003476:	6818      	ldr	r0, [r3, #0]
 8003478:	000c      	movs	r4, r1
 800347a:	2800      	cmp	r0, #0
 800347c:	d004      	beq.n	8003488 <__swsetup_r+0x18>
 800347e:	6a03      	ldr	r3, [r0, #32]
 8003480:	2b00      	cmp	r3, #0
 8003482:	d101      	bne.n	8003488 <__swsetup_r+0x18>
 8003484:	f7ff fec2 	bl	800320c <__sinit>
 8003488:	220c      	movs	r2, #12
 800348a:	5ea3      	ldrsh	r3, [r4, r2]
 800348c:	071a      	lsls	r2, r3, #28
 800348e:	d423      	bmi.n	80034d8 <__swsetup_r+0x68>
 8003490:	06da      	lsls	r2, r3, #27
 8003492:	d407      	bmi.n	80034a4 <__swsetup_r+0x34>
 8003494:	2209      	movs	r2, #9
 8003496:	602a      	str	r2, [r5, #0]
 8003498:	2240      	movs	r2, #64	@ 0x40
 800349a:	2001      	movs	r0, #1
 800349c:	4313      	orrs	r3, r2
 800349e:	81a3      	strh	r3, [r4, #12]
 80034a0:	4240      	negs	r0, r0
 80034a2:	e03a      	b.n	800351a <__swsetup_r+0xaa>
 80034a4:	075b      	lsls	r3, r3, #29
 80034a6:	d513      	bpl.n	80034d0 <__swsetup_r+0x60>
 80034a8:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80034aa:	2900      	cmp	r1, #0
 80034ac:	d008      	beq.n	80034c0 <__swsetup_r+0x50>
 80034ae:	0023      	movs	r3, r4
 80034b0:	3344      	adds	r3, #68	@ 0x44
 80034b2:	4299      	cmp	r1, r3
 80034b4:	d002      	beq.n	80034bc <__swsetup_r+0x4c>
 80034b6:	0028      	movs	r0, r5
 80034b8:	f000 f8c4 	bl	8003644 <_free_r>
 80034bc:	2300      	movs	r3, #0
 80034be:	6363      	str	r3, [r4, #52]	@ 0x34
 80034c0:	2224      	movs	r2, #36	@ 0x24
 80034c2:	89a3      	ldrh	r3, [r4, #12]
 80034c4:	4393      	bics	r3, r2
 80034c6:	81a3      	strh	r3, [r4, #12]
 80034c8:	2300      	movs	r3, #0
 80034ca:	6063      	str	r3, [r4, #4]
 80034cc:	6923      	ldr	r3, [r4, #16]
 80034ce:	6023      	str	r3, [r4, #0]
 80034d0:	2308      	movs	r3, #8
 80034d2:	89a2      	ldrh	r2, [r4, #12]
 80034d4:	4313      	orrs	r3, r2
 80034d6:	81a3      	strh	r3, [r4, #12]
 80034d8:	6923      	ldr	r3, [r4, #16]
 80034da:	2b00      	cmp	r3, #0
 80034dc:	d10b      	bne.n	80034f6 <__swsetup_r+0x86>
 80034de:	21a0      	movs	r1, #160	@ 0xa0
 80034e0:	2280      	movs	r2, #128	@ 0x80
 80034e2:	89a3      	ldrh	r3, [r4, #12]
 80034e4:	0089      	lsls	r1, r1, #2
 80034e6:	0092      	lsls	r2, r2, #2
 80034e8:	400b      	ands	r3, r1
 80034ea:	4293      	cmp	r3, r2
 80034ec:	d003      	beq.n	80034f6 <__swsetup_r+0x86>
 80034ee:	0021      	movs	r1, r4
 80034f0:	0028      	movs	r0, r5
 80034f2:	f000 fd3f 	bl	8003f74 <__smakebuf_r>
 80034f6:	220c      	movs	r2, #12
 80034f8:	5ea3      	ldrsh	r3, [r4, r2]
 80034fa:	2101      	movs	r1, #1
 80034fc:	001a      	movs	r2, r3
 80034fe:	400a      	ands	r2, r1
 8003500:	420b      	tst	r3, r1
 8003502:	d00b      	beq.n	800351c <__swsetup_r+0xac>
 8003504:	2200      	movs	r2, #0
 8003506:	60a2      	str	r2, [r4, #8]
 8003508:	6962      	ldr	r2, [r4, #20]
 800350a:	4252      	negs	r2, r2
 800350c:	61a2      	str	r2, [r4, #24]
 800350e:	2000      	movs	r0, #0
 8003510:	6922      	ldr	r2, [r4, #16]
 8003512:	4282      	cmp	r2, r0
 8003514:	d101      	bne.n	800351a <__swsetup_r+0xaa>
 8003516:	061a      	lsls	r2, r3, #24
 8003518:	d4be      	bmi.n	8003498 <__swsetup_r+0x28>
 800351a:	bd70      	pop	{r4, r5, r6, pc}
 800351c:	0799      	lsls	r1, r3, #30
 800351e:	d400      	bmi.n	8003522 <__swsetup_r+0xb2>
 8003520:	6962      	ldr	r2, [r4, #20]
 8003522:	60a2      	str	r2, [r4, #8]
 8003524:	e7f3      	b.n	800350e <__swsetup_r+0x9e>
 8003526:	46c0      	nop			@ (mov r8, r8)
 8003528:	20000020 	.word	0x20000020

0800352c <memset>:
 800352c:	0003      	movs	r3, r0
 800352e:	1882      	adds	r2, r0, r2
 8003530:	4293      	cmp	r3, r2
 8003532:	d100      	bne.n	8003536 <memset+0xa>
 8003534:	4770      	bx	lr
 8003536:	7019      	strb	r1, [r3, #0]
 8003538:	3301      	adds	r3, #1
 800353a:	e7f9      	b.n	8003530 <memset+0x4>

0800353c <_close_r>:
 800353c:	2300      	movs	r3, #0
 800353e:	b570      	push	{r4, r5, r6, lr}
 8003540:	4d06      	ldr	r5, [pc, #24]	@ (800355c <_close_r+0x20>)
 8003542:	0004      	movs	r4, r0
 8003544:	0008      	movs	r0, r1
 8003546:	602b      	str	r3, [r5, #0]
 8003548:	f7fd fc05 	bl	8000d56 <_close>
 800354c:	1c43      	adds	r3, r0, #1
 800354e:	d103      	bne.n	8003558 <_close_r+0x1c>
 8003550:	682b      	ldr	r3, [r5, #0]
 8003552:	2b00      	cmp	r3, #0
 8003554:	d000      	beq.n	8003558 <_close_r+0x1c>
 8003556:	6023      	str	r3, [r4, #0]
 8003558:	bd70      	pop	{r4, r5, r6, pc}
 800355a:	46c0      	nop			@ (mov r8, r8)
 800355c:	20000430 	.word	0x20000430

08003560 <_lseek_r>:
 8003560:	b570      	push	{r4, r5, r6, lr}
 8003562:	0004      	movs	r4, r0
 8003564:	0008      	movs	r0, r1
 8003566:	0011      	movs	r1, r2
 8003568:	001a      	movs	r2, r3
 800356a:	2300      	movs	r3, #0
 800356c:	4d05      	ldr	r5, [pc, #20]	@ (8003584 <_lseek_r+0x24>)
 800356e:	602b      	str	r3, [r5, #0]
 8003570:	f7fd fc12 	bl	8000d98 <_lseek>
 8003574:	1c43      	adds	r3, r0, #1
 8003576:	d103      	bne.n	8003580 <_lseek_r+0x20>
 8003578:	682b      	ldr	r3, [r5, #0]
 800357a:	2b00      	cmp	r3, #0
 800357c:	d000      	beq.n	8003580 <_lseek_r+0x20>
 800357e:	6023      	str	r3, [r4, #0]
 8003580:	bd70      	pop	{r4, r5, r6, pc}
 8003582:	46c0      	nop			@ (mov r8, r8)
 8003584:	20000430 	.word	0x20000430

08003588 <_read_r>:
 8003588:	b570      	push	{r4, r5, r6, lr}
 800358a:	0004      	movs	r4, r0
 800358c:	0008      	movs	r0, r1
 800358e:	0011      	movs	r1, r2
 8003590:	001a      	movs	r2, r3
 8003592:	2300      	movs	r3, #0
 8003594:	4d05      	ldr	r5, [pc, #20]	@ (80035ac <_read_r+0x24>)
 8003596:	602b      	str	r3, [r5, #0]
 8003598:	f7fd fba4 	bl	8000ce4 <_read>
 800359c:	1c43      	adds	r3, r0, #1
 800359e:	d103      	bne.n	80035a8 <_read_r+0x20>
 80035a0:	682b      	ldr	r3, [r5, #0]
 80035a2:	2b00      	cmp	r3, #0
 80035a4:	d000      	beq.n	80035a8 <_read_r+0x20>
 80035a6:	6023      	str	r3, [r4, #0]
 80035a8:	bd70      	pop	{r4, r5, r6, pc}
 80035aa:	46c0      	nop			@ (mov r8, r8)
 80035ac:	20000430 	.word	0x20000430

080035b0 <_write_r>:
 80035b0:	b570      	push	{r4, r5, r6, lr}
 80035b2:	0004      	movs	r4, r0
 80035b4:	0008      	movs	r0, r1
 80035b6:	0011      	movs	r1, r2
 80035b8:	001a      	movs	r2, r3
 80035ba:	2300      	movs	r3, #0
 80035bc:	4d05      	ldr	r5, [pc, #20]	@ (80035d4 <_write_r+0x24>)
 80035be:	602b      	str	r3, [r5, #0]
 80035c0:	f7fd fbad 	bl	8000d1e <_write>
 80035c4:	1c43      	adds	r3, r0, #1
 80035c6:	d103      	bne.n	80035d0 <_write_r+0x20>
 80035c8:	682b      	ldr	r3, [r5, #0]
 80035ca:	2b00      	cmp	r3, #0
 80035cc:	d000      	beq.n	80035d0 <_write_r+0x20>
 80035ce:	6023      	str	r3, [r4, #0]
 80035d0:	bd70      	pop	{r4, r5, r6, pc}
 80035d2:	46c0      	nop			@ (mov r8, r8)
 80035d4:	20000430 	.word	0x20000430

080035d8 <__errno>:
 80035d8:	4b01      	ldr	r3, [pc, #4]	@ (80035e0 <__errno+0x8>)
 80035da:	6818      	ldr	r0, [r3, #0]
 80035dc:	4770      	bx	lr
 80035de:	46c0      	nop			@ (mov r8, r8)
 80035e0:	20000020 	.word	0x20000020

080035e4 <__libc_init_array>:
 80035e4:	b570      	push	{r4, r5, r6, lr}
 80035e6:	2600      	movs	r6, #0
 80035e8:	4c0c      	ldr	r4, [pc, #48]	@ (800361c <__libc_init_array+0x38>)
 80035ea:	4d0d      	ldr	r5, [pc, #52]	@ (8003620 <__libc_init_array+0x3c>)
 80035ec:	1b64      	subs	r4, r4, r5
 80035ee:	10a4      	asrs	r4, r4, #2
 80035f0:	42a6      	cmp	r6, r4
 80035f2:	d109      	bne.n	8003608 <__libc_init_array+0x24>
 80035f4:	2600      	movs	r6, #0
 80035f6:	f000 fd41 	bl	800407c <_init>
 80035fa:	4c0a      	ldr	r4, [pc, #40]	@ (8003624 <__libc_init_array+0x40>)
 80035fc:	4d0a      	ldr	r5, [pc, #40]	@ (8003628 <__libc_init_array+0x44>)
 80035fe:	1b64      	subs	r4, r4, r5
 8003600:	10a4      	asrs	r4, r4, #2
 8003602:	42a6      	cmp	r6, r4
 8003604:	d105      	bne.n	8003612 <__libc_init_array+0x2e>
 8003606:	bd70      	pop	{r4, r5, r6, pc}
 8003608:	00b3      	lsls	r3, r6, #2
 800360a:	58eb      	ldr	r3, [r5, r3]
 800360c:	4798      	blx	r3
 800360e:	3601      	adds	r6, #1
 8003610:	e7ee      	b.n	80035f0 <__libc_init_array+0xc>
 8003612:	00b3      	lsls	r3, r6, #2
 8003614:	58eb      	ldr	r3, [r5, r3]
 8003616:	4798      	blx	r3
 8003618:	3601      	adds	r6, #1
 800361a:	e7f2      	b.n	8003602 <__libc_init_array+0x1e>
 800361c:	08004198 	.word	0x08004198
 8003620:	08004198 	.word	0x08004198
 8003624:	0800419c 	.word	0x0800419c
 8003628:	08004198 	.word	0x08004198

0800362c <__retarget_lock_init_recursive>:
 800362c:	4770      	bx	lr

0800362e <__retarget_lock_acquire_recursive>:
 800362e:	4770      	bx	lr

08003630 <__retarget_lock_release_recursive>:
 8003630:	4770      	bx	lr

08003632 <memcpy>:
 8003632:	2300      	movs	r3, #0
 8003634:	b510      	push	{r4, lr}
 8003636:	429a      	cmp	r2, r3
 8003638:	d100      	bne.n	800363c <memcpy+0xa>
 800363a:	bd10      	pop	{r4, pc}
 800363c:	5ccc      	ldrb	r4, [r1, r3]
 800363e:	54c4      	strb	r4, [r0, r3]
 8003640:	3301      	adds	r3, #1
 8003642:	e7f8      	b.n	8003636 <memcpy+0x4>

08003644 <_free_r>:
 8003644:	b570      	push	{r4, r5, r6, lr}
 8003646:	0005      	movs	r5, r0
 8003648:	1e0c      	subs	r4, r1, #0
 800364a:	d010      	beq.n	800366e <_free_r+0x2a>
 800364c:	3c04      	subs	r4, #4
 800364e:	6823      	ldr	r3, [r4, #0]
 8003650:	2b00      	cmp	r3, #0
 8003652:	da00      	bge.n	8003656 <_free_r+0x12>
 8003654:	18e4      	adds	r4, r4, r3
 8003656:	0028      	movs	r0, r5
 8003658:	f000 f8e0 	bl	800381c <__malloc_lock>
 800365c:	4a1d      	ldr	r2, [pc, #116]	@ (80036d4 <_free_r+0x90>)
 800365e:	6813      	ldr	r3, [r2, #0]
 8003660:	2b00      	cmp	r3, #0
 8003662:	d105      	bne.n	8003670 <_free_r+0x2c>
 8003664:	6063      	str	r3, [r4, #4]
 8003666:	6014      	str	r4, [r2, #0]
 8003668:	0028      	movs	r0, r5
 800366a:	f000 f8df 	bl	800382c <__malloc_unlock>
 800366e:	bd70      	pop	{r4, r5, r6, pc}
 8003670:	42a3      	cmp	r3, r4
 8003672:	d908      	bls.n	8003686 <_free_r+0x42>
 8003674:	6820      	ldr	r0, [r4, #0]
 8003676:	1821      	adds	r1, r4, r0
 8003678:	428b      	cmp	r3, r1
 800367a:	d1f3      	bne.n	8003664 <_free_r+0x20>
 800367c:	6819      	ldr	r1, [r3, #0]
 800367e:	685b      	ldr	r3, [r3, #4]
 8003680:	1809      	adds	r1, r1, r0
 8003682:	6021      	str	r1, [r4, #0]
 8003684:	e7ee      	b.n	8003664 <_free_r+0x20>
 8003686:	001a      	movs	r2, r3
 8003688:	685b      	ldr	r3, [r3, #4]
 800368a:	2b00      	cmp	r3, #0
 800368c:	d001      	beq.n	8003692 <_free_r+0x4e>
 800368e:	42a3      	cmp	r3, r4
 8003690:	d9f9      	bls.n	8003686 <_free_r+0x42>
 8003692:	6811      	ldr	r1, [r2, #0]
 8003694:	1850      	adds	r0, r2, r1
 8003696:	42a0      	cmp	r0, r4
 8003698:	d10b      	bne.n	80036b2 <_free_r+0x6e>
 800369a:	6820      	ldr	r0, [r4, #0]
 800369c:	1809      	adds	r1, r1, r0
 800369e:	1850      	adds	r0, r2, r1
 80036a0:	6011      	str	r1, [r2, #0]
 80036a2:	4283      	cmp	r3, r0
 80036a4:	d1e0      	bne.n	8003668 <_free_r+0x24>
 80036a6:	6818      	ldr	r0, [r3, #0]
 80036a8:	685b      	ldr	r3, [r3, #4]
 80036aa:	1841      	adds	r1, r0, r1
 80036ac:	6011      	str	r1, [r2, #0]
 80036ae:	6053      	str	r3, [r2, #4]
 80036b0:	e7da      	b.n	8003668 <_free_r+0x24>
 80036b2:	42a0      	cmp	r0, r4
 80036b4:	d902      	bls.n	80036bc <_free_r+0x78>
 80036b6:	230c      	movs	r3, #12
 80036b8:	602b      	str	r3, [r5, #0]
 80036ba:	e7d5      	b.n	8003668 <_free_r+0x24>
 80036bc:	6820      	ldr	r0, [r4, #0]
 80036be:	1821      	adds	r1, r4, r0
 80036c0:	428b      	cmp	r3, r1
 80036c2:	d103      	bne.n	80036cc <_free_r+0x88>
 80036c4:	6819      	ldr	r1, [r3, #0]
 80036c6:	685b      	ldr	r3, [r3, #4]
 80036c8:	1809      	adds	r1, r1, r0
 80036ca:	6021      	str	r1, [r4, #0]
 80036cc:	6063      	str	r3, [r4, #4]
 80036ce:	6054      	str	r4, [r2, #4]
 80036d0:	e7ca      	b.n	8003668 <_free_r+0x24>
 80036d2:	46c0      	nop			@ (mov r8, r8)
 80036d4:	2000043c 	.word	0x2000043c

080036d8 <sbrk_aligned>:
 80036d8:	b570      	push	{r4, r5, r6, lr}
 80036da:	4e0f      	ldr	r6, [pc, #60]	@ (8003718 <sbrk_aligned+0x40>)
 80036dc:	000d      	movs	r5, r1
 80036de:	6831      	ldr	r1, [r6, #0]
 80036e0:	0004      	movs	r4, r0
 80036e2:	2900      	cmp	r1, #0
 80036e4:	d102      	bne.n	80036ec <sbrk_aligned+0x14>
 80036e6:	f000 fcab 	bl	8004040 <_sbrk_r>
 80036ea:	6030      	str	r0, [r6, #0]
 80036ec:	0029      	movs	r1, r5
 80036ee:	0020      	movs	r0, r4
 80036f0:	f000 fca6 	bl	8004040 <_sbrk_r>
 80036f4:	1c43      	adds	r3, r0, #1
 80036f6:	d103      	bne.n	8003700 <sbrk_aligned+0x28>
 80036f8:	2501      	movs	r5, #1
 80036fa:	426d      	negs	r5, r5
 80036fc:	0028      	movs	r0, r5
 80036fe:	bd70      	pop	{r4, r5, r6, pc}
 8003700:	2303      	movs	r3, #3
 8003702:	1cc5      	adds	r5, r0, #3
 8003704:	439d      	bics	r5, r3
 8003706:	42a8      	cmp	r0, r5
 8003708:	d0f8      	beq.n	80036fc <sbrk_aligned+0x24>
 800370a:	1a29      	subs	r1, r5, r0
 800370c:	0020      	movs	r0, r4
 800370e:	f000 fc97 	bl	8004040 <_sbrk_r>
 8003712:	3001      	adds	r0, #1
 8003714:	d1f2      	bne.n	80036fc <sbrk_aligned+0x24>
 8003716:	e7ef      	b.n	80036f8 <sbrk_aligned+0x20>
 8003718:	20000438 	.word	0x20000438

0800371c <_malloc_r>:
 800371c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800371e:	2203      	movs	r2, #3
 8003720:	1ccb      	adds	r3, r1, #3
 8003722:	4393      	bics	r3, r2
 8003724:	3308      	adds	r3, #8
 8003726:	0005      	movs	r5, r0
 8003728:	001f      	movs	r7, r3
 800372a:	2b0c      	cmp	r3, #12
 800372c:	d234      	bcs.n	8003798 <_malloc_r+0x7c>
 800372e:	270c      	movs	r7, #12
 8003730:	42b9      	cmp	r1, r7
 8003732:	d833      	bhi.n	800379c <_malloc_r+0x80>
 8003734:	0028      	movs	r0, r5
 8003736:	f000 f871 	bl	800381c <__malloc_lock>
 800373a:	4e37      	ldr	r6, [pc, #220]	@ (8003818 <_malloc_r+0xfc>)
 800373c:	6833      	ldr	r3, [r6, #0]
 800373e:	001c      	movs	r4, r3
 8003740:	2c00      	cmp	r4, #0
 8003742:	d12f      	bne.n	80037a4 <_malloc_r+0x88>
 8003744:	0039      	movs	r1, r7
 8003746:	0028      	movs	r0, r5
 8003748:	f7ff ffc6 	bl	80036d8 <sbrk_aligned>
 800374c:	0004      	movs	r4, r0
 800374e:	1c43      	adds	r3, r0, #1
 8003750:	d15f      	bne.n	8003812 <_malloc_r+0xf6>
 8003752:	6834      	ldr	r4, [r6, #0]
 8003754:	9400      	str	r4, [sp, #0]
 8003756:	9b00      	ldr	r3, [sp, #0]
 8003758:	2b00      	cmp	r3, #0
 800375a:	d14a      	bne.n	80037f2 <_malloc_r+0xd6>
 800375c:	2c00      	cmp	r4, #0
 800375e:	d052      	beq.n	8003806 <_malloc_r+0xea>
 8003760:	6823      	ldr	r3, [r4, #0]
 8003762:	0028      	movs	r0, r5
 8003764:	18e3      	adds	r3, r4, r3
 8003766:	9900      	ldr	r1, [sp, #0]
 8003768:	9301      	str	r3, [sp, #4]
 800376a:	f000 fc69 	bl	8004040 <_sbrk_r>
 800376e:	9b01      	ldr	r3, [sp, #4]
 8003770:	4283      	cmp	r3, r0
 8003772:	d148      	bne.n	8003806 <_malloc_r+0xea>
 8003774:	6823      	ldr	r3, [r4, #0]
 8003776:	0028      	movs	r0, r5
 8003778:	1aff      	subs	r7, r7, r3
 800377a:	0039      	movs	r1, r7
 800377c:	f7ff ffac 	bl	80036d8 <sbrk_aligned>
 8003780:	3001      	adds	r0, #1
 8003782:	d040      	beq.n	8003806 <_malloc_r+0xea>
 8003784:	6823      	ldr	r3, [r4, #0]
 8003786:	19db      	adds	r3, r3, r7
 8003788:	6023      	str	r3, [r4, #0]
 800378a:	6833      	ldr	r3, [r6, #0]
 800378c:	685a      	ldr	r2, [r3, #4]
 800378e:	2a00      	cmp	r2, #0
 8003790:	d133      	bne.n	80037fa <_malloc_r+0xde>
 8003792:	9b00      	ldr	r3, [sp, #0]
 8003794:	6033      	str	r3, [r6, #0]
 8003796:	e019      	b.n	80037cc <_malloc_r+0xb0>
 8003798:	2b00      	cmp	r3, #0
 800379a:	dac9      	bge.n	8003730 <_malloc_r+0x14>
 800379c:	230c      	movs	r3, #12
 800379e:	602b      	str	r3, [r5, #0]
 80037a0:	2000      	movs	r0, #0
 80037a2:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80037a4:	6821      	ldr	r1, [r4, #0]
 80037a6:	1bc9      	subs	r1, r1, r7
 80037a8:	d420      	bmi.n	80037ec <_malloc_r+0xd0>
 80037aa:	290b      	cmp	r1, #11
 80037ac:	d90a      	bls.n	80037c4 <_malloc_r+0xa8>
 80037ae:	19e2      	adds	r2, r4, r7
 80037b0:	6027      	str	r7, [r4, #0]
 80037b2:	42a3      	cmp	r3, r4
 80037b4:	d104      	bne.n	80037c0 <_malloc_r+0xa4>
 80037b6:	6032      	str	r2, [r6, #0]
 80037b8:	6863      	ldr	r3, [r4, #4]
 80037ba:	6011      	str	r1, [r2, #0]
 80037bc:	6053      	str	r3, [r2, #4]
 80037be:	e005      	b.n	80037cc <_malloc_r+0xb0>
 80037c0:	605a      	str	r2, [r3, #4]
 80037c2:	e7f9      	b.n	80037b8 <_malloc_r+0x9c>
 80037c4:	6862      	ldr	r2, [r4, #4]
 80037c6:	42a3      	cmp	r3, r4
 80037c8:	d10e      	bne.n	80037e8 <_malloc_r+0xcc>
 80037ca:	6032      	str	r2, [r6, #0]
 80037cc:	0028      	movs	r0, r5
 80037ce:	f000 f82d 	bl	800382c <__malloc_unlock>
 80037d2:	0020      	movs	r0, r4
 80037d4:	2207      	movs	r2, #7
 80037d6:	300b      	adds	r0, #11
 80037d8:	1d23      	adds	r3, r4, #4
 80037da:	4390      	bics	r0, r2
 80037dc:	1ac2      	subs	r2, r0, r3
 80037de:	4298      	cmp	r0, r3
 80037e0:	d0df      	beq.n	80037a2 <_malloc_r+0x86>
 80037e2:	1a1b      	subs	r3, r3, r0
 80037e4:	50a3      	str	r3, [r4, r2]
 80037e6:	e7dc      	b.n	80037a2 <_malloc_r+0x86>
 80037e8:	605a      	str	r2, [r3, #4]
 80037ea:	e7ef      	b.n	80037cc <_malloc_r+0xb0>
 80037ec:	0023      	movs	r3, r4
 80037ee:	6864      	ldr	r4, [r4, #4]
 80037f0:	e7a6      	b.n	8003740 <_malloc_r+0x24>
 80037f2:	9c00      	ldr	r4, [sp, #0]
 80037f4:	6863      	ldr	r3, [r4, #4]
 80037f6:	9300      	str	r3, [sp, #0]
 80037f8:	e7ad      	b.n	8003756 <_malloc_r+0x3a>
 80037fa:	001a      	movs	r2, r3
 80037fc:	685b      	ldr	r3, [r3, #4]
 80037fe:	42a3      	cmp	r3, r4
 8003800:	d1fb      	bne.n	80037fa <_malloc_r+0xde>
 8003802:	2300      	movs	r3, #0
 8003804:	e7da      	b.n	80037bc <_malloc_r+0xa0>
 8003806:	230c      	movs	r3, #12
 8003808:	0028      	movs	r0, r5
 800380a:	602b      	str	r3, [r5, #0]
 800380c:	f000 f80e 	bl	800382c <__malloc_unlock>
 8003810:	e7c6      	b.n	80037a0 <_malloc_r+0x84>
 8003812:	6007      	str	r7, [r0, #0]
 8003814:	e7da      	b.n	80037cc <_malloc_r+0xb0>
 8003816:	46c0      	nop			@ (mov r8, r8)
 8003818:	2000043c 	.word	0x2000043c

0800381c <__malloc_lock>:
 800381c:	b510      	push	{r4, lr}
 800381e:	4802      	ldr	r0, [pc, #8]	@ (8003828 <__malloc_lock+0xc>)
 8003820:	f7ff ff05 	bl	800362e <__retarget_lock_acquire_recursive>
 8003824:	bd10      	pop	{r4, pc}
 8003826:	46c0      	nop			@ (mov r8, r8)
 8003828:	20000434 	.word	0x20000434

0800382c <__malloc_unlock>:
 800382c:	b510      	push	{r4, lr}
 800382e:	4802      	ldr	r0, [pc, #8]	@ (8003838 <__malloc_unlock+0xc>)
 8003830:	f7ff fefe 	bl	8003630 <__retarget_lock_release_recursive>
 8003834:	bd10      	pop	{r4, pc}
 8003836:	46c0      	nop			@ (mov r8, r8)
 8003838:	20000434 	.word	0x20000434

0800383c <__sfputc_r>:
 800383c:	6893      	ldr	r3, [r2, #8]
 800383e:	b510      	push	{r4, lr}
 8003840:	3b01      	subs	r3, #1
 8003842:	6093      	str	r3, [r2, #8]
 8003844:	2b00      	cmp	r3, #0
 8003846:	da04      	bge.n	8003852 <__sfputc_r+0x16>
 8003848:	6994      	ldr	r4, [r2, #24]
 800384a:	42a3      	cmp	r3, r4
 800384c:	db07      	blt.n	800385e <__sfputc_r+0x22>
 800384e:	290a      	cmp	r1, #10
 8003850:	d005      	beq.n	800385e <__sfputc_r+0x22>
 8003852:	6813      	ldr	r3, [r2, #0]
 8003854:	1c58      	adds	r0, r3, #1
 8003856:	6010      	str	r0, [r2, #0]
 8003858:	7019      	strb	r1, [r3, #0]
 800385a:	0008      	movs	r0, r1
 800385c:	bd10      	pop	{r4, pc}
 800385e:	f7ff fdc5 	bl	80033ec <__swbuf_r>
 8003862:	0001      	movs	r1, r0
 8003864:	e7f9      	b.n	800385a <__sfputc_r+0x1e>

08003866 <__sfputs_r>:
 8003866:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003868:	0006      	movs	r6, r0
 800386a:	000f      	movs	r7, r1
 800386c:	0014      	movs	r4, r2
 800386e:	18d5      	adds	r5, r2, r3
 8003870:	42ac      	cmp	r4, r5
 8003872:	d101      	bne.n	8003878 <__sfputs_r+0x12>
 8003874:	2000      	movs	r0, #0
 8003876:	e007      	b.n	8003888 <__sfputs_r+0x22>
 8003878:	7821      	ldrb	r1, [r4, #0]
 800387a:	003a      	movs	r2, r7
 800387c:	0030      	movs	r0, r6
 800387e:	f7ff ffdd 	bl	800383c <__sfputc_r>
 8003882:	3401      	adds	r4, #1
 8003884:	1c43      	adds	r3, r0, #1
 8003886:	d1f3      	bne.n	8003870 <__sfputs_r+0xa>
 8003888:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800388c <_vfiprintf_r>:
 800388c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800388e:	b0a1      	sub	sp, #132	@ 0x84
 8003890:	000f      	movs	r7, r1
 8003892:	0015      	movs	r5, r2
 8003894:	001e      	movs	r6, r3
 8003896:	9003      	str	r0, [sp, #12]
 8003898:	2800      	cmp	r0, #0
 800389a:	d004      	beq.n	80038a6 <_vfiprintf_r+0x1a>
 800389c:	6a03      	ldr	r3, [r0, #32]
 800389e:	2b00      	cmp	r3, #0
 80038a0:	d101      	bne.n	80038a6 <_vfiprintf_r+0x1a>
 80038a2:	f7ff fcb3 	bl	800320c <__sinit>
 80038a6:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80038a8:	07db      	lsls	r3, r3, #31
 80038aa:	d405      	bmi.n	80038b8 <_vfiprintf_r+0x2c>
 80038ac:	89bb      	ldrh	r3, [r7, #12]
 80038ae:	059b      	lsls	r3, r3, #22
 80038b0:	d402      	bmi.n	80038b8 <_vfiprintf_r+0x2c>
 80038b2:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 80038b4:	f7ff febb 	bl	800362e <__retarget_lock_acquire_recursive>
 80038b8:	89bb      	ldrh	r3, [r7, #12]
 80038ba:	071b      	lsls	r3, r3, #28
 80038bc:	d502      	bpl.n	80038c4 <_vfiprintf_r+0x38>
 80038be:	693b      	ldr	r3, [r7, #16]
 80038c0:	2b00      	cmp	r3, #0
 80038c2:	d113      	bne.n	80038ec <_vfiprintf_r+0x60>
 80038c4:	0039      	movs	r1, r7
 80038c6:	9803      	ldr	r0, [sp, #12]
 80038c8:	f7ff fdd2 	bl	8003470 <__swsetup_r>
 80038cc:	2800      	cmp	r0, #0
 80038ce:	d00d      	beq.n	80038ec <_vfiprintf_r+0x60>
 80038d0:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80038d2:	07db      	lsls	r3, r3, #31
 80038d4:	d503      	bpl.n	80038de <_vfiprintf_r+0x52>
 80038d6:	2001      	movs	r0, #1
 80038d8:	4240      	negs	r0, r0
 80038da:	b021      	add	sp, #132	@ 0x84
 80038dc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80038de:	89bb      	ldrh	r3, [r7, #12]
 80038e0:	059b      	lsls	r3, r3, #22
 80038e2:	d4f8      	bmi.n	80038d6 <_vfiprintf_r+0x4a>
 80038e4:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 80038e6:	f7ff fea3 	bl	8003630 <__retarget_lock_release_recursive>
 80038ea:	e7f4      	b.n	80038d6 <_vfiprintf_r+0x4a>
 80038ec:	2300      	movs	r3, #0
 80038ee:	ac08      	add	r4, sp, #32
 80038f0:	6163      	str	r3, [r4, #20]
 80038f2:	3320      	adds	r3, #32
 80038f4:	7663      	strb	r3, [r4, #25]
 80038f6:	3310      	adds	r3, #16
 80038f8:	76a3      	strb	r3, [r4, #26]
 80038fa:	9607      	str	r6, [sp, #28]
 80038fc:	002e      	movs	r6, r5
 80038fe:	7833      	ldrb	r3, [r6, #0]
 8003900:	2b00      	cmp	r3, #0
 8003902:	d001      	beq.n	8003908 <_vfiprintf_r+0x7c>
 8003904:	2b25      	cmp	r3, #37	@ 0x25
 8003906:	d148      	bne.n	800399a <_vfiprintf_r+0x10e>
 8003908:	1b73      	subs	r3, r6, r5
 800390a:	9305      	str	r3, [sp, #20]
 800390c:	42ae      	cmp	r6, r5
 800390e:	d00b      	beq.n	8003928 <_vfiprintf_r+0x9c>
 8003910:	002a      	movs	r2, r5
 8003912:	0039      	movs	r1, r7
 8003914:	9803      	ldr	r0, [sp, #12]
 8003916:	f7ff ffa6 	bl	8003866 <__sfputs_r>
 800391a:	3001      	adds	r0, #1
 800391c:	d100      	bne.n	8003920 <_vfiprintf_r+0x94>
 800391e:	e0ae      	b.n	8003a7e <_vfiprintf_r+0x1f2>
 8003920:	6963      	ldr	r3, [r4, #20]
 8003922:	9a05      	ldr	r2, [sp, #20]
 8003924:	189b      	adds	r3, r3, r2
 8003926:	6163      	str	r3, [r4, #20]
 8003928:	7833      	ldrb	r3, [r6, #0]
 800392a:	2b00      	cmp	r3, #0
 800392c:	d100      	bne.n	8003930 <_vfiprintf_r+0xa4>
 800392e:	e0a6      	b.n	8003a7e <_vfiprintf_r+0x1f2>
 8003930:	2201      	movs	r2, #1
 8003932:	2300      	movs	r3, #0
 8003934:	4252      	negs	r2, r2
 8003936:	6062      	str	r2, [r4, #4]
 8003938:	a904      	add	r1, sp, #16
 800393a:	3254      	adds	r2, #84	@ 0x54
 800393c:	1852      	adds	r2, r2, r1
 800393e:	1c75      	adds	r5, r6, #1
 8003940:	6023      	str	r3, [r4, #0]
 8003942:	60e3      	str	r3, [r4, #12]
 8003944:	60a3      	str	r3, [r4, #8]
 8003946:	7013      	strb	r3, [r2, #0]
 8003948:	65a3      	str	r3, [r4, #88]	@ 0x58
 800394a:	4b59      	ldr	r3, [pc, #356]	@ (8003ab0 <_vfiprintf_r+0x224>)
 800394c:	2205      	movs	r2, #5
 800394e:	0018      	movs	r0, r3
 8003950:	7829      	ldrb	r1, [r5, #0]
 8003952:	9305      	str	r3, [sp, #20]
 8003954:	f000 fb86 	bl	8004064 <memchr>
 8003958:	1c6e      	adds	r6, r5, #1
 800395a:	2800      	cmp	r0, #0
 800395c:	d11f      	bne.n	800399e <_vfiprintf_r+0x112>
 800395e:	6822      	ldr	r2, [r4, #0]
 8003960:	06d3      	lsls	r3, r2, #27
 8003962:	d504      	bpl.n	800396e <_vfiprintf_r+0xe2>
 8003964:	2353      	movs	r3, #83	@ 0x53
 8003966:	a904      	add	r1, sp, #16
 8003968:	185b      	adds	r3, r3, r1
 800396a:	2120      	movs	r1, #32
 800396c:	7019      	strb	r1, [r3, #0]
 800396e:	0713      	lsls	r3, r2, #28
 8003970:	d504      	bpl.n	800397c <_vfiprintf_r+0xf0>
 8003972:	2353      	movs	r3, #83	@ 0x53
 8003974:	a904      	add	r1, sp, #16
 8003976:	185b      	adds	r3, r3, r1
 8003978:	212b      	movs	r1, #43	@ 0x2b
 800397a:	7019      	strb	r1, [r3, #0]
 800397c:	782b      	ldrb	r3, [r5, #0]
 800397e:	2b2a      	cmp	r3, #42	@ 0x2a
 8003980:	d016      	beq.n	80039b0 <_vfiprintf_r+0x124>
 8003982:	002e      	movs	r6, r5
 8003984:	2100      	movs	r1, #0
 8003986:	200a      	movs	r0, #10
 8003988:	68e3      	ldr	r3, [r4, #12]
 800398a:	7832      	ldrb	r2, [r6, #0]
 800398c:	1c75      	adds	r5, r6, #1
 800398e:	3a30      	subs	r2, #48	@ 0x30
 8003990:	2a09      	cmp	r2, #9
 8003992:	d950      	bls.n	8003a36 <_vfiprintf_r+0x1aa>
 8003994:	2900      	cmp	r1, #0
 8003996:	d111      	bne.n	80039bc <_vfiprintf_r+0x130>
 8003998:	e017      	b.n	80039ca <_vfiprintf_r+0x13e>
 800399a:	3601      	adds	r6, #1
 800399c:	e7af      	b.n	80038fe <_vfiprintf_r+0x72>
 800399e:	9b05      	ldr	r3, [sp, #20]
 80039a0:	6822      	ldr	r2, [r4, #0]
 80039a2:	1ac0      	subs	r0, r0, r3
 80039a4:	2301      	movs	r3, #1
 80039a6:	4083      	lsls	r3, r0
 80039a8:	4313      	orrs	r3, r2
 80039aa:	0035      	movs	r5, r6
 80039ac:	6023      	str	r3, [r4, #0]
 80039ae:	e7cc      	b.n	800394a <_vfiprintf_r+0xbe>
 80039b0:	9b07      	ldr	r3, [sp, #28]
 80039b2:	1d19      	adds	r1, r3, #4
 80039b4:	681b      	ldr	r3, [r3, #0]
 80039b6:	9107      	str	r1, [sp, #28]
 80039b8:	2b00      	cmp	r3, #0
 80039ba:	db01      	blt.n	80039c0 <_vfiprintf_r+0x134>
 80039bc:	930b      	str	r3, [sp, #44]	@ 0x2c
 80039be:	e004      	b.n	80039ca <_vfiprintf_r+0x13e>
 80039c0:	425b      	negs	r3, r3
 80039c2:	60e3      	str	r3, [r4, #12]
 80039c4:	2302      	movs	r3, #2
 80039c6:	4313      	orrs	r3, r2
 80039c8:	6023      	str	r3, [r4, #0]
 80039ca:	7833      	ldrb	r3, [r6, #0]
 80039cc:	2b2e      	cmp	r3, #46	@ 0x2e
 80039ce:	d10c      	bne.n	80039ea <_vfiprintf_r+0x15e>
 80039d0:	7873      	ldrb	r3, [r6, #1]
 80039d2:	2b2a      	cmp	r3, #42	@ 0x2a
 80039d4:	d134      	bne.n	8003a40 <_vfiprintf_r+0x1b4>
 80039d6:	9b07      	ldr	r3, [sp, #28]
 80039d8:	3602      	adds	r6, #2
 80039da:	1d1a      	adds	r2, r3, #4
 80039dc:	681b      	ldr	r3, [r3, #0]
 80039de:	9207      	str	r2, [sp, #28]
 80039e0:	2b00      	cmp	r3, #0
 80039e2:	da01      	bge.n	80039e8 <_vfiprintf_r+0x15c>
 80039e4:	2301      	movs	r3, #1
 80039e6:	425b      	negs	r3, r3
 80039e8:	9309      	str	r3, [sp, #36]	@ 0x24
 80039ea:	4d32      	ldr	r5, [pc, #200]	@ (8003ab4 <_vfiprintf_r+0x228>)
 80039ec:	2203      	movs	r2, #3
 80039ee:	0028      	movs	r0, r5
 80039f0:	7831      	ldrb	r1, [r6, #0]
 80039f2:	f000 fb37 	bl	8004064 <memchr>
 80039f6:	2800      	cmp	r0, #0
 80039f8:	d006      	beq.n	8003a08 <_vfiprintf_r+0x17c>
 80039fa:	2340      	movs	r3, #64	@ 0x40
 80039fc:	1b40      	subs	r0, r0, r5
 80039fe:	4083      	lsls	r3, r0
 8003a00:	6822      	ldr	r2, [r4, #0]
 8003a02:	3601      	adds	r6, #1
 8003a04:	4313      	orrs	r3, r2
 8003a06:	6023      	str	r3, [r4, #0]
 8003a08:	7831      	ldrb	r1, [r6, #0]
 8003a0a:	2206      	movs	r2, #6
 8003a0c:	482a      	ldr	r0, [pc, #168]	@ (8003ab8 <_vfiprintf_r+0x22c>)
 8003a0e:	1c75      	adds	r5, r6, #1
 8003a10:	7621      	strb	r1, [r4, #24]
 8003a12:	f000 fb27 	bl	8004064 <memchr>
 8003a16:	2800      	cmp	r0, #0
 8003a18:	d040      	beq.n	8003a9c <_vfiprintf_r+0x210>
 8003a1a:	4b28      	ldr	r3, [pc, #160]	@ (8003abc <_vfiprintf_r+0x230>)
 8003a1c:	2b00      	cmp	r3, #0
 8003a1e:	d122      	bne.n	8003a66 <_vfiprintf_r+0x1da>
 8003a20:	2207      	movs	r2, #7
 8003a22:	9b07      	ldr	r3, [sp, #28]
 8003a24:	3307      	adds	r3, #7
 8003a26:	4393      	bics	r3, r2
 8003a28:	3308      	adds	r3, #8
 8003a2a:	9307      	str	r3, [sp, #28]
 8003a2c:	6963      	ldr	r3, [r4, #20]
 8003a2e:	9a04      	ldr	r2, [sp, #16]
 8003a30:	189b      	adds	r3, r3, r2
 8003a32:	6163      	str	r3, [r4, #20]
 8003a34:	e762      	b.n	80038fc <_vfiprintf_r+0x70>
 8003a36:	4343      	muls	r3, r0
 8003a38:	002e      	movs	r6, r5
 8003a3a:	2101      	movs	r1, #1
 8003a3c:	189b      	adds	r3, r3, r2
 8003a3e:	e7a4      	b.n	800398a <_vfiprintf_r+0xfe>
 8003a40:	2300      	movs	r3, #0
 8003a42:	200a      	movs	r0, #10
 8003a44:	0019      	movs	r1, r3
 8003a46:	3601      	adds	r6, #1
 8003a48:	6063      	str	r3, [r4, #4]
 8003a4a:	7832      	ldrb	r2, [r6, #0]
 8003a4c:	1c75      	adds	r5, r6, #1
 8003a4e:	3a30      	subs	r2, #48	@ 0x30
 8003a50:	2a09      	cmp	r2, #9
 8003a52:	d903      	bls.n	8003a5c <_vfiprintf_r+0x1d0>
 8003a54:	2b00      	cmp	r3, #0
 8003a56:	d0c8      	beq.n	80039ea <_vfiprintf_r+0x15e>
 8003a58:	9109      	str	r1, [sp, #36]	@ 0x24
 8003a5a:	e7c6      	b.n	80039ea <_vfiprintf_r+0x15e>
 8003a5c:	4341      	muls	r1, r0
 8003a5e:	002e      	movs	r6, r5
 8003a60:	2301      	movs	r3, #1
 8003a62:	1889      	adds	r1, r1, r2
 8003a64:	e7f1      	b.n	8003a4a <_vfiprintf_r+0x1be>
 8003a66:	aa07      	add	r2, sp, #28
 8003a68:	9200      	str	r2, [sp, #0]
 8003a6a:	0021      	movs	r1, r4
 8003a6c:	003a      	movs	r2, r7
 8003a6e:	4b14      	ldr	r3, [pc, #80]	@ (8003ac0 <_vfiprintf_r+0x234>)
 8003a70:	9803      	ldr	r0, [sp, #12]
 8003a72:	e000      	b.n	8003a76 <_vfiprintf_r+0x1ea>
 8003a74:	bf00      	nop
 8003a76:	9004      	str	r0, [sp, #16]
 8003a78:	9b04      	ldr	r3, [sp, #16]
 8003a7a:	3301      	adds	r3, #1
 8003a7c:	d1d6      	bne.n	8003a2c <_vfiprintf_r+0x1a0>
 8003a7e:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8003a80:	07db      	lsls	r3, r3, #31
 8003a82:	d405      	bmi.n	8003a90 <_vfiprintf_r+0x204>
 8003a84:	89bb      	ldrh	r3, [r7, #12]
 8003a86:	059b      	lsls	r3, r3, #22
 8003a88:	d402      	bmi.n	8003a90 <_vfiprintf_r+0x204>
 8003a8a:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 8003a8c:	f7ff fdd0 	bl	8003630 <__retarget_lock_release_recursive>
 8003a90:	89bb      	ldrh	r3, [r7, #12]
 8003a92:	065b      	lsls	r3, r3, #25
 8003a94:	d500      	bpl.n	8003a98 <_vfiprintf_r+0x20c>
 8003a96:	e71e      	b.n	80038d6 <_vfiprintf_r+0x4a>
 8003a98:	980d      	ldr	r0, [sp, #52]	@ 0x34
 8003a9a:	e71e      	b.n	80038da <_vfiprintf_r+0x4e>
 8003a9c:	aa07      	add	r2, sp, #28
 8003a9e:	9200      	str	r2, [sp, #0]
 8003aa0:	0021      	movs	r1, r4
 8003aa2:	003a      	movs	r2, r7
 8003aa4:	4b06      	ldr	r3, [pc, #24]	@ (8003ac0 <_vfiprintf_r+0x234>)
 8003aa6:	9803      	ldr	r0, [sp, #12]
 8003aa8:	f000 f87c 	bl	8003ba4 <_printf_i>
 8003aac:	e7e3      	b.n	8003a76 <_vfiprintf_r+0x1ea>
 8003aae:	46c0      	nop			@ (mov r8, r8)
 8003ab0:	08004164 	.word	0x08004164
 8003ab4:	0800416a 	.word	0x0800416a
 8003ab8:	0800416e 	.word	0x0800416e
 8003abc:	00000000 	.word	0x00000000
 8003ac0:	08003867 	.word	0x08003867

08003ac4 <_printf_common>:
 8003ac4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8003ac6:	0016      	movs	r6, r2
 8003ac8:	9301      	str	r3, [sp, #4]
 8003aca:	688a      	ldr	r2, [r1, #8]
 8003acc:	690b      	ldr	r3, [r1, #16]
 8003ace:	000c      	movs	r4, r1
 8003ad0:	9000      	str	r0, [sp, #0]
 8003ad2:	4293      	cmp	r3, r2
 8003ad4:	da00      	bge.n	8003ad8 <_printf_common+0x14>
 8003ad6:	0013      	movs	r3, r2
 8003ad8:	0022      	movs	r2, r4
 8003ada:	6033      	str	r3, [r6, #0]
 8003adc:	3243      	adds	r2, #67	@ 0x43
 8003ade:	7812      	ldrb	r2, [r2, #0]
 8003ae0:	2a00      	cmp	r2, #0
 8003ae2:	d001      	beq.n	8003ae8 <_printf_common+0x24>
 8003ae4:	3301      	adds	r3, #1
 8003ae6:	6033      	str	r3, [r6, #0]
 8003ae8:	6823      	ldr	r3, [r4, #0]
 8003aea:	069b      	lsls	r3, r3, #26
 8003aec:	d502      	bpl.n	8003af4 <_printf_common+0x30>
 8003aee:	6833      	ldr	r3, [r6, #0]
 8003af0:	3302      	adds	r3, #2
 8003af2:	6033      	str	r3, [r6, #0]
 8003af4:	6822      	ldr	r2, [r4, #0]
 8003af6:	2306      	movs	r3, #6
 8003af8:	0015      	movs	r5, r2
 8003afa:	401d      	ands	r5, r3
 8003afc:	421a      	tst	r2, r3
 8003afe:	d027      	beq.n	8003b50 <_printf_common+0x8c>
 8003b00:	0023      	movs	r3, r4
 8003b02:	3343      	adds	r3, #67	@ 0x43
 8003b04:	781b      	ldrb	r3, [r3, #0]
 8003b06:	1e5a      	subs	r2, r3, #1
 8003b08:	4193      	sbcs	r3, r2
 8003b0a:	6822      	ldr	r2, [r4, #0]
 8003b0c:	0692      	lsls	r2, r2, #26
 8003b0e:	d430      	bmi.n	8003b72 <_printf_common+0xae>
 8003b10:	0022      	movs	r2, r4
 8003b12:	9901      	ldr	r1, [sp, #4]
 8003b14:	9800      	ldr	r0, [sp, #0]
 8003b16:	9d08      	ldr	r5, [sp, #32]
 8003b18:	3243      	adds	r2, #67	@ 0x43
 8003b1a:	47a8      	blx	r5
 8003b1c:	3001      	adds	r0, #1
 8003b1e:	d025      	beq.n	8003b6c <_printf_common+0xa8>
 8003b20:	2206      	movs	r2, #6
 8003b22:	6823      	ldr	r3, [r4, #0]
 8003b24:	2500      	movs	r5, #0
 8003b26:	4013      	ands	r3, r2
 8003b28:	2b04      	cmp	r3, #4
 8003b2a:	d105      	bne.n	8003b38 <_printf_common+0x74>
 8003b2c:	6833      	ldr	r3, [r6, #0]
 8003b2e:	68e5      	ldr	r5, [r4, #12]
 8003b30:	1aed      	subs	r5, r5, r3
 8003b32:	43eb      	mvns	r3, r5
 8003b34:	17db      	asrs	r3, r3, #31
 8003b36:	401d      	ands	r5, r3
 8003b38:	68a3      	ldr	r3, [r4, #8]
 8003b3a:	6922      	ldr	r2, [r4, #16]
 8003b3c:	4293      	cmp	r3, r2
 8003b3e:	dd01      	ble.n	8003b44 <_printf_common+0x80>
 8003b40:	1a9b      	subs	r3, r3, r2
 8003b42:	18ed      	adds	r5, r5, r3
 8003b44:	2600      	movs	r6, #0
 8003b46:	42b5      	cmp	r5, r6
 8003b48:	d120      	bne.n	8003b8c <_printf_common+0xc8>
 8003b4a:	2000      	movs	r0, #0
 8003b4c:	e010      	b.n	8003b70 <_printf_common+0xac>
 8003b4e:	3501      	adds	r5, #1
 8003b50:	68e3      	ldr	r3, [r4, #12]
 8003b52:	6832      	ldr	r2, [r6, #0]
 8003b54:	1a9b      	subs	r3, r3, r2
 8003b56:	42ab      	cmp	r3, r5
 8003b58:	ddd2      	ble.n	8003b00 <_printf_common+0x3c>
 8003b5a:	0022      	movs	r2, r4
 8003b5c:	2301      	movs	r3, #1
 8003b5e:	9901      	ldr	r1, [sp, #4]
 8003b60:	9800      	ldr	r0, [sp, #0]
 8003b62:	9f08      	ldr	r7, [sp, #32]
 8003b64:	3219      	adds	r2, #25
 8003b66:	47b8      	blx	r7
 8003b68:	3001      	adds	r0, #1
 8003b6a:	d1f0      	bne.n	8003b4e <_printf_common+0x8a>
 8003b6c:	2001      	movs	r0, #1
 8003b6e:	4240      	negs	r0, r0
 8003b70:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8003b72:	2030      	movs	r0, #48	@ 0x30
 8003b74:	18e1      	adds	r1, r4, r3
 8003b76:	3143      	adds	r1, #67	@ 0x43
 8003b78:	7008      	strb	r0, [r1, #0]
 8003b7a:	0021      	movs	r1, r4
 8003b7c:	1c5a      	adds	r2, r3, #1
 8003b7e:	3145      	adds	r1, #69	@ 0x45
 8003b80:	7809      	ldrb	r1, [r1, #0]
 8003b82:	18a2      	adds	r2, r4, r2
 8003b84:	3243      	adds	r2, #67	@ 0x43
 8003b86:	3302      	adds	r3, #2
 8003b88:	7011      	strb	r1, [r2, #0]
 8003b8a:	e7c1      	b.n	8003b10 <_printf_common+0x4c>
 8003b8c:	0022      	movs	r2, r4
 8003b8e:	2301      	movs	r3, #1
 8003b90:	9901      	ldr	r1, [sp, #4]
 8003b92:	9800      	ldr	r0, [sp, #0]
 8003b94:	9f08      	ldr	r7, [sp, #32]
 8003b96:	321a      	adds	r2, #26
 8003b98:	47b8      	blx	r7
 8003b9a:	3001      	adds	r0, #1
 8003b9c:	d0e6      	beq.n	8003b6c <_printf_common+0xa8>
 8003b9e:	3601      	adds	r6, #1
 8003ba0:	e7d1      	b.n	8003b46 <_printf_common+0x82>
	...

08003ba4 <_printf_i>:
 8003ba4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003ba6:	b08b      	sub	sp, #44	@ 0x2c
 8003ba8:	9206      	str	r2, [sp, #24]
 8003baa:	000a      	movs	r2, r1
 8003bac:	3243      	adds	r2, #67	@ 0x43
 8003bae:	9307      	str	r3, [sp, #28]
 8003bb0:	9005      	str	r0, [sp, #20]
 8003bb2:	9203      	str	r2, [sp, #12]
 8003bb4:	7e0a      	ldrb	r2, [r1, #24]
 8003bb6:	000c      	movs	r4, r1
 8003bb8:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8003bba:	2a78      	cmp	r2, #120	@ 0x78
 8003bbc:	d809      	bhi.n	8003bd2 <_printf_i+0x2e>
 8003bbe:	2a62      	cmp	r2, #98	@ 0x62
 8003bc0:	d80b      	bhi.n	8003bda <_printf_i+0x36>
 8003bc2:	2a00      	cmp	r2, #0
 8003bc4:	d100      	bne.n	8003bc8 <_printf_i+0x24>
 8003bc6:	e0ba      	b.n	8003d3e <_printf_i+0x19a>
 8003bc8:	497a      	ldr	r1, [pc, #488]	@ (8003db4 <_printf_i+0x210>)
 8003bca:	9104      	str	r1, [sp, #16]
 8003bcc:	2a58      	cmp	r2, #88	@ 0x58
 8003bce:	d100      	bne.n	8003bd2 <_printf_i+0x2e>
 8003bd0:	e08e      	b.n	8003cf0 <_printf_i+0x14c>
 8003bd2:	0025      	movs	r5, r4
 8003bd4:	3542      	adds	r5, #66	@ 0x42
 8003bd6:	702a      	strb	r2, [r5, #0]
 8003bd8:	e022      	b.n	8003c20 <_printf_i+0x7c>
 8003bda:	0010      	movs	r0, r2
 8003bdc:	3863      	subs	r0, #99	@ 0x63
 8003bde:	2815      	cmp	r0, #21
 8003be0:	d8f7      	bhi.n	8003bd2 <_printf_i+0x2e>
 8003be2:	f7fc fa99 	bl	8000118 <__gnu_thumb1_case_shi>
 8003be6:	0016      	.short	0x0016
 8003be8:	fff6001f 	.word	0xfff6001f
 8003bec:	fff6fff6 	.word	0xfff6fff6
 8003bf0:	001ffff6 	.word	0x001ffff6
 8003bf4:	fff6fff6 	.word	0xfff6fff6
 8003bf8:	fff6fff6 	.word	0xfff6fff6
 8003bfc:	0036009f 	.word	0x0036009f
 8003c00:	fff6007e 	.word	0xfff6007e
 8003c04:	00b0fff6 	.word	0x00b0fff6
 8003c08:	0036fff6 	.word	0x0036fff6
 8003c0c:	fff6fff6 	.word	0xfff6fff6
 8003c10:	0082      	.short	0x0082
 8003c12:	0025      	movs	r5, r4
 8003c14:	681a      	ldr	r2, [r3, #0]
 8003c16:	3542      	adds	r5, #66	@ 0x42
 8003c18:	1d11      	adds	r1, r2, #4
 8003c1a:	6019      	str	r1, [r3, #0]
 8003c1c:	6813      	ldr	r3, [r2, #0]
 8003c1e:	702b      	strb	r3, [r5, #0]
 8003c20:	2301      	movs	r3, #1
 8003c22:	e09e      	b.n	8003d62 <_printf_i+0x1be>
 8003c24:	6818      	ldr	r0, [r3, #0]
 8003c26:	6809      	ldr	r1, [r1, #0]
 8003c28:	1d02      	adds	r2, r0, #4
 8003c2a:	060d      	lsls	r5, r1, #24
 8003c2c:	d50b      	bpl.n	8003c46 <_printf_i+0xa2>
 8003c2e:	6806      	ldr	r6, [r0, #0]
 8003c30:	601a      	str	r2, [r3, #0]
 8003c32:	2e00      	cmp	r6, #0
 8003c34:	da03      	bge.n	8003c3e <_printf_i+0x9a>
 8003c36:	232d      	movs	r3, #45	@ 0x2d
 8003c38:	9a03      	ldr	r2, [sp, #12]
 8003c3a:	4276      	negs	r6, r6
 8003c3c:	7013      	strb	r3, [r2, #0]
 8003c3e:	4b5d      	ldr	r3, [pc, #372]	@ (8003db4 <_printf_i+0x210>)
 8003c40:	270a      	movs	r7, #10
 8003c42:	9304      	str	r3, [sp, #16]
 8003c44:	e018      	b.n	8003c78 <_printf_i+0xd4>
 8003c46:	6806      	ldr	r6, [r0, #0]
 8003c48:	601a      	str	r2, [r3, #0]
 8003c4a:	0649      	lsls	r1, r1, #25
 8003c4c:	d5f1      	bpl.n	8003c32 <_printf_i+0x8e>
 8003c4e:	b236      	sxth	r6, r6
 8003c50:	e7ef      	b.n	8003c32 <_printf_i+0x8e>
 8003c52:	6808      	ldr	r0, [r1, #0]
 8003c54:	6819      	ldr	r1, [r3, #0]
 8003c56:	c940      	ldmia	r1!, {r6}
 8003c58:	0605      	lsls	r5, r0, #24
 8003c5a:	d402      	bmi.n	8003c62 <_printf_i+0xbe>
 8003c5c:	0640      	lsls	r0, r0, #25
 8003c5e:	d500      	bpl.n	8003c62 <_printf_i+0xbe>
 8003c60:	b2b6      	uxth	r6, r6
 8003c62:	6019      	str	r1, [r3, #0]
 8003c64:	4b53      	ldr	r3, [pc, #332]	@ (8003db4 <_printf_i+0x210>)
 8003c66:	270a      	movs	r7, #10
 8003c68:	9304      	str	r3, [sp, #16]
 8003c6a:	2a6f      	cmp	r2, #111	@ 0x6f
 8003c6c:	d100      	bne.n	8003c70 <_printf_i+0xcc>
 8003c6e:	3f02      	subs	r7, #2
 8003c70:	0023      	movs	r3, r4
 8003c72:	2200      	movs	r2, #0
 8003c74:	3343      	adds	r3, #67	@ 0x43
 8003c76:	701a      	strb	r2, [r3, #0]
 8003c78:	6863      	ldr	r3, [r4, #4]
 8003c7a:	60a3      	str	r3, [r4, #8]
 8003c7c:	2b00      	cmp	r3, #0
 8003c7e:	db06      	blt.n	8003c8e <_printf_i+0xea>
 8003c80:	2104      	movs	r1, #4
 8003c82:	6822      	ldr	r2, [r4, #0]
 8003c84:	9d03      	ldr	r5, [sp, #12]
 8003c86:	438a      	bics	r2, r1
 8003c88:	6022      	str	r2, [r4, #0]
 8003c8a:	4333      	orrs	r3, r6
 8003c8c:	d00c      	beq.n	8003ca8 <_printf_i+0x104>
 8003c8e:	9d03      	ldr	r5, [sp, #12]
 8003c90:	0030      	movs	r0, r6
 8003c92:	0039      	movs	r1, r7
 8003c94:	f7fc fad0 	bl	8000238 <__aeabi_uidivmod>
 8003c98:	9b04      	ldr	r3, [sp, #16]
 8003c9a:	3d01      	subs	r5, #1
 8003c9c:	5c5b      	ldrb	r3, [r3, r1]
 8003c9e:	702b      	strb	r3, [r5, #0]
 8003ca0:	0033      	movs	r3, r6
 8003ca2:	0006      	movs	r6, r0
 8003ca4:	429f      	cmp	r7, r3
 8003ca6:	d9f3      	bls.n	8003c90 <_printf_i+0xec>
 8003ca8:	2f08      	cmp	r7, #8
 8003caa:	d109      	bne.n	8003cc0 <_printf_i+0x11c>
 8003cac:	6823      	ldr	r3, [r4, #0]
 8003cae:	07db      	lsls	r3, r3, #31
 8003cb0:	d506      	bpl.n	8003cc0 <_printf_i+0x11c>
 8003cb2:	6862      	ldr	r2, [r4, #4]
 8003cb4:	6923      	ldr	r3, [r4, #16]
 8003cb6:	429a      	cmp	r2, r3
 8003cb8:	dc02      	bgt.n	8003cc0 <_printf_i+0x11c>
 8003cba:	2330      	movs	r3, #48	@ 0x30
 8003cbc:	3d01      	subs	r5, #1
 8003cbe:	702b      	strb	r3, [r5, #0]
 8003cc0:	9b03      	ldr	r3, [sp, #12]
 8003cc2:	1b5b      	subs	r3, r3, r5
 8003cc4:	6123      	str	r3, [r4, #16]
 8003cc6:	9b07      	ldr	r3, [sp, #28]
 8003cc8:	0021      	movs	r1, r4
 8003cca:	9300      	str	r3, [sp, #0]
 8003ccc:	9805      	ldr	r0, [sp, #20]
 8003cce:	9b06      	ldr	r3, [sp, #24]
 8003cd0:	aa09      	add	r2, sp, #36	@ 0x24
 8003cd2:	f7ff fef7 	bl	8003ac4 <_printf_common>
 8003cd6:	3001      	adds	r0, #1
 8003cd8:	d148      	bne.n	8003d6c <_printf_i+0x1c8>
 8003cda:	2001      	movs	r0, #1
 8003cdc:	4240      	negs	r0, r0
 8003cde:	b00b      	add	sp, #44	@ 0x2c
 8003ce0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003ce2:	2220      	movs	r2, #32
 8003ce4:	6809      	ldr	r1, [r1, #0]
 8003ce6:	430a      	orrs	r2, r1
 8003ce8:	6022      	str	r2, [r4, #0]
 8003cea:	2278      	movs	r2, #120	@ 0x78
 8003cec:	4932      	ldr	r1, [pc, #200]	@ (8003db8 <_printf_i+0x214>)
 8003cee:	9104      	str	r1, [sp, #16]
 8003cf0:	0021      	movs	r1, r4
 8003cf2:	3145      	adds	r1, #69	@ 0x45
 8003cf4:	700a      	strb	r2, [r1, #0]
 8003cf6:	6819      	ldr	r1, [r3, #0]
 8003cf8:	6822      	ldr	r2, [r4, #0]
 8003cfa:	c940      	ldmia	r1!, {r6}
 8003cfc:	0610      	lsls	r0, r2, #24
 8003cfe:	d402      	bmi.n	8003d06 <_printf_i+0x162>
 8003d00:	0650      	lsls	r0, r2, #25
 8003d02:	d500      	bpl.n	8003d06 <_printf_i+0x162>
 8003d04:	b2b6      	uxth	r6, r6
 8003d06:	6019      	str	r1, [r3, #0]
 8003d08:	07d3      	lsls	r3, r2, #31
 8003d0a:	d502      	bpl.n	8003d12 <_printf_i+0x16e>
 8003d0c:	2320      	movs	r3, #32
 8003d0e:	4313      	orrs	r3, r2
 8003d10:	6023      	str	r3, [r4, #0]
 8003d12:	2e00      	cmp	r6, #0
 8003d14:	d001      	beq.n	8003d1a <_printf_i+0x176>
 8003d16:	2710      	movs	r7, #16
 8003d18:	e7aa      	b.n	8003c70 <_printf_i+0xcc>
 8003d1a:	2220      	movs	r2, #32
 8003d1c:	6823      	ldr	r3, [r4, #0]
 8003d1e:	4393      	bics	r3, r2
 8003d20:	6023      	str	r3, [r4, #0]
 8003d22:	e7f8      	b.n	8003d16 <_printf_i+0x172>
 8003d24:	681a      	ldr	r2, [r3, #0]
 8003d26:	680d      	ldr	r5, [r1, #0]
 8003d28:	1d10      	adds	r0, r2, #4
 8003d2a:	6949      	ldr	r1, [r1, #20]
 8003d2c:	6018      	str	r0, [r3, #0]
 8003d2e:	6813      	ldr	r3, [r2, #0]
 8003d30:	062e      	lsls	r6, r5, #24
 8003d32:	d501      	bpl.n	8003d38 <_printf_i+0x194>
 8003d34:	6019      	str	r1, [r3, #0]
 8003d36:	e002      	b.n	8003d3e <_printf_i+0x19a>
 8003d38:	066d      	lsls	r5, r5, #25
 8003d3a:	d5fb      	bpl.n	8003d34 <_printf_i+0x190>
 8003d3c:	8019      	strh	r1, [r3, #0]
 8003d3e:	2300      	movs	r3, #0
 8003d40:	9d03      	ldr	r5, [sp, #12]
 8003d42:	6123      	str	r3, [r4, #16]
 8003d44:	e7bf      	b.n	8003cc6 <_printf_i+0x122>
 8003d46:	681a      	ldr	r2, [r3, #0]
 8003d48:	1d11      	adds	r1, r2, #4
 8003d4a:	6019      	str	r1, [r3, #0]
 8003d4c:	6815      	ldr	r5, [r2, #0]
 8003d4e:	2100      	movs	r1, #0
 8003d50:	0028      	movs	r0, r5
 8003d52:	6862      	ldr	r2, [r4, #4]
 8003d54:	f000 f986 	bl	8004064 <memchr>
 8003d58:	2800      	cmp	r0, #0
 8003d5a:	d001      	beq.n	8003d60 <_printf_i+0x1bc>
 8003d5c:	1b40      	subs	r0, r0, r5
 8003d5e:	6060      	str	r0, [r4, #4]
 8003d60:	6863      	ldr	r3, [r4, #4]
 8003d62:	6123      	str	r3, [r4, #16]
 8003d64:	2300      	movs	r3, #0
 8003d66:	9a03      	ldr	r2, [sp, #12]
 8003d68:	7013      	strb	r3, [r2, #0]
 8003d6a:	e7ac      	b.n	8003cc6 <_printf_i+0x122>
 8003d6c:	002a      	movs	r2, r5
 8003d6e:	6923      	ldr	r3, [r4, #16]
 8003d70:	9906      	ldr	r1, [sp, #24]
 8003d72:	9805      	ldr	r0, [sp, #20]
 8003d74:	9d07      	ldr	r5, [sp, #28]
 8003d76:	47a8      	blx	r5
 8003d78:	3001      	adds	r0, #1
 8003d7a:	d0ae      	beq.n	8003cda <_printf_i+0x136>
 8003d7c:	6823      	ldr	r3, [r4, #0]
 8003d7e:	079b      	lsls	r3, r3, #30
 8003d80:	d415      	bmi.n	8003dae <_printf_i+0x20a>
 8003d82:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8003d84:	68e0      	ldr	r0, [r4, #12]
 8003d86:	4298      	cmp	r0, r3
 8003d88:	daa9      	bge.n	8003cde <_printf_i+0x13a>
 8003d8a:	0018      	movs	r0, r3
 8003d8c:	e7a7      	b.n	8003cde <_printf_i+0x13a>
 8003d8e:	0022      	movs	r2, r4
 8003d90:	2301      	movs	r3, #1
 8003d92:	9906      	ldr	r1, [sp, #24]
 8003d94:	9805      	ldr	r0, [sp, #20]
 8003d96:	9e07      	ldr	r6, [sp, #28]
 8003d98:	3219      	adds	r2, #25
 8003d9a:	47b0      	blx	r6
 8003d9c:	3001      	adds	r0, #1
 8003d9e:	d09c      	beq.n	8003cda <_printf_i+0x136>
 8003da0:	3501      	adds	r5, #1
 8003da2:	68e3      	ldr	r3, [r4, #12]
 8003da4:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8003da6:	1a9b      	subs	r3, r3, r2
 8003da8:	42ab      	cmp	r3, r5
 8003daa:	dcf0      	bgt.n	8003d8e <_printf_i+0x1ea>
 8003dac:	e7e9      	b.n	8003d82 <_printf_i+0x1de>
 8003dae:	2500      	movs	r5, #0
 8003db0:	e7f7      	b.n	8003da2 <_printf_i+0x1fe>
 8003db2:	46c0      	nop			@ (mov r8, r8)
 8003db4:	08004175 	.word	0x08004175
 8003db8:	08004186 	.word	0x08004186

08003dbc <__sflush_r>:
 8003dbc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8003dbe:	220c      	movs	r2, #12
 8003dc0:	5e8b      	ldrsh	r3, [r1, r2]
 8003dc2:	0005      	movs	r5, r0
 8003dc4:	000c      	movs	r4, r1
 8003dc6:	071a      	lsls	r2, r3, #28
 8003dc8:	d456      	bmi.n	8003e78 <__sflush_r+0xbc>
 8003dca:	684a      	ldr	r2, [r1, #4]
 8003dcc:	2a00      	cmp	r2, #0
 8003dce:	dc02      	bgt.n	8003dd6 <__sflush_r+0x1a>
 8003dd0:	6c0a      	ldr	r2, [r1, #64]	@ 0x40
 8003dd2:	2a00      	cmp	r2, #0
 8003dd4:	dd4e      	ble.n	8003e74 <__sflush_r+0xb8>
 8003dd6:	6ae7      	ldr	r7, [r4, #44]	@ 0x2c
 8003dd8:	2f00      	cmp	r7, #0
 8003dda:	d04b      	beq.n	8003e74 <__sflush_r+0xb8>
 8003ddc:	2200      	movs	r2, #0
 8003dde:	2080      	movs	r0, #128	@ 0x80
 8003de0:	682e      	ldr	r6, [r5, #0]
 8003de2:	602a      	str	r2, [r5, #0]
 8003de4:	001a      	movs	r2, r3
 8003de6:	0140      	lsls	r0, r0, #5
 8003de8:	6a21      	ldr	r1, [r4, #32]
 8003dea:	4002      	ands	r2, r0
 8003dec:	4203      	tst	r3, r0
 8003dee:	d033      	beq.n	8003e58 <__sflush_r+0x9c>
 8003df0:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8003df2:	89a3      	ldrh	r3, [r4, #12]
 8003df4:	075b      	lsls	r3, r3, #29
 8003df6:	d506      	bpl.n	8003e06 <__sflush_r+0x4a>
 8003df8:	6863      	ldr	r3, [r4, #4]
 8003dfa:	1ad2      	subs	r2, r2, r3
 8003dfc:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8003dfe:	2b00      	cmp	r3, #0
 8003e00:	d001      	beq.n	8003e06 <__sflush_r+0x4a>
 8003e02:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8003e04:	1ad2      	subs	r2, r2, r3
 8003e06:	2300      	movs	r3, #0
 8003e08:	0028      	movs	r0, r5
 8003e0a:	6ae7      	ldr	r7, [r4, #44]	@ 0x2c
 8003e0c:	6a21      	ldr	r1, [r4, #32]
 8003e0e:	47b8      	blx	r7
 8003e10:	89a2      	ldrh	r2, [r4, #12]
 8003e12:	1c43      	adds	r3, r0, #1
 8003e14:	d106      	bne.n	8003e24 <__sflush_r+0x68>
 8003e16:	6829      	ldr	r1, [r5, #0]
 8003e18:	291d      	cmp	r1, #29
 8003e1a:	d846      	bhi.n	8003eaa <__sflush_r+0xee>
 8003e1c:	4b29      	ldr	r3, [pc, #164]	@ (8003ec4 <__sflush_r+0x108>)
 8003e1e:	40cb      	lsrs	r3, r1
 8003e20:	07db      	lsls	r3, r3, #31
 8003e22:	d542      	bpl.n	8003eaa <__sflush_r+0xee>
 8003e24:	2300      	movs	r3, #0
 8003e26:	6063      	str	r3, [r4, #4]
 8003e28:	6923      	ldr	r3, [r4, #16]
 8003e2a:	6023      	str	r3, [r4, #0]
 8003e2c:	04d2      	lsls	r2, r2, #19
 8003e2e:	d505      	bpl.n	8003e3c <__sflush_r+0x80>
 8003e30:	1c43      	adds	r3, r0, #1
 8003e32:	d102      	bne.n	8003e3a <__sflush_r+0x7e>
 8003e34:	682b      	ldr	r3, [r5, #0]
 8003e36:	2b00      	cmp	r3, #0
 8003e38:	d100      	bne.n	8003e3c <__sflush_r+0x80>
 8003e3a:	6560      	str	r0, [r4, #84]	@ 0x54
 8003e3c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8003e3e:	602e      	str	r6, [r5, #0]
 8003e40:	2900      	cmp	r1, #0
 8003e42:	d017      	beq.n	8003e74 <__sflush_r+0xb8>
 8003e44:	0023      	movs	r3, r4
 8003e46:	3344      	adds	r3, #68	@ 0x44
 8003e48:	4299      	cmp	r1, r3
 8003e4a:	d002      	beq.n	8003e52 <__sflush_r+0x96>
 8003e4c:	0028      	movs	r0, r5
 8003e4e:	f7ff fbf9 	bl	8003644 <_free_r>
 8003e52:	2300      	movs	r3, #0
 8003e54:	6363      	str	r3, [r4, #52]	@ 0x34
 8003e56:	e00d      	b.n	8003e74 <__sflush_r+0xb8>
 8003e58:	2301      	movs	r3, #1
 8003e5a:	0028      	movs	r0, r5
 8003e5c:	47b8      	blx	r7
 8003e5e:	0002      	movs	r2, r0
 8003e60:	1c43      	adds	r3, r0, #1
 8003e62:	d1c6      	bne.n	8003df2 <__sflush_r+0x36>
 8003e64:	682b      	ldr	r3, [r5, #0]
 8003e66:	2b00      	cmp	r3, #0
 8003e68:	d0c3      	beq.n	8003df2 <__sflush_r+0x36>
 8003e6a:	2b1d      	cmp	r3, #29
 8003e6c:	d001      	beq.n	8003e72 <__sflush_r+0xb6>
 8003e6e:	2b16      	cmp	r3, #22
 8003e70:	d11a      	bne.n	8003ea8 <__sflush_r+0xec>
 8003e72:	602e      	str	r6, [r5, #0]
 8003e74:	2000      	movs	r0, #0
 8003e76:	e01e      	b.n	8003eb6 <__sflush_r+0xfa>
 8003e78:	690e      	ldr	r6, [r1, #16]
 8003e7a:	2e00      	cmp	r6, #0
 8003e7c:	d0fa      	beq.n	8003e74 <__sflush_r+0xb8>
 8003e7e:	680f      	ldr	r7, [r1, #0]
 8003e80:	600e      	str	r6, [r1, #0]
 8003e82:	1bba      	subs	r2, r7, r6
 8003e84:	9201      	str	r2, [sp, #4]
 8003e86:	2200      	movs	r2, #0
 8003e88:	079b      	lsls	r3, r3, #30
 8003e8a:	d100      	bne.n	8003e8e <__sflush_r+0xd2>
 8003e8c:	694a      	ldr	r2, [r1, #20]
 8003e8e:	60a2      	str	r2, [r4, #8]
 8003e90:	9b01      	ldr	r3, [sp, #4]
 8003e92:	2b00      	cmp	r3, #0
 8003e94:	ddee      	ble.n	8003e74 <__sflush_r+0xb8>
 8003e96:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 8003e98:	0032      	movs	r2, r6
 8003e9a:	001f      	movs	r7, r3
 8003e9c:	0028      	movs	r0, r5
 8003e9e:	9b01      	ldr	r3, [sp, #4]
 8003ea0:	6a21      	ldr	r1, [r4, #32]
 8003ea2:	47b8      	blx	r7
 8003ea4:	2800      	cmp	r0, #0
 8003ea6:	dc07      	bgt.n	8003eb8 <__sflush_r+0xfc>
 8003ea8:	89a2      	ldrh	r2, [r4, #12]
 8003eaa:	2340      	movs	r3, #64	@ 0x40
 8003eac:	2001      	movs	r0, #1
 8003eae:	4313      	orrs	r3, r2
 8003eb0:	b21b      	sxth	r3, r3
 8003eb2:	81a3      	strh	r3, [r4, #12]
 8003eb4:	4240      	negs	r0, r0
 8003eb6:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8003eb8:	9b01      	ldr	r3, [sp, #4]
 8003eba:	1836      	adds	r6, r6, r0
 8003ebc:	1a1b      	subs	r3, r3, r0
 8003ebe:	9301      	str	r3, [sp, #4]
 8003ec0:	e7e6      	b.n	8003e90 <__sflush_r+0xd4>
 8003ec2:	46c0      	nop			@ (mov r8, r8)
 8003ec4:	20400001 	.word	0x20400001

08003ec8 <_fflush_r>:
 8003ec8:	690b      	ldr	r3, [r1, #16]
 8003eca:	b570      	push	{r4, r5, r6, lr}
 8003ecc:	0005      	movs	r5, r0
 8003ece:	000c      	movs	r4, r1
 8003ed0:	2b00      	cmp	r3, #0
 8003ed2:	d102      	bne.n	8003eda <_fflush_r+0x12>
 8003ed4:	2500      	movs	r5, #0
 8003ed6:	0028      	movs	r0, r5
 8003ed8:	bd70      	pop	{r4, r5, r6, pc}
 8003eda:	2800      	cmp	r0, #0
 8003edc:	d004      	beq.n	8003ee8 <_fflush_r+0x20>
 8003ede:	6a03      	ldr	r3, [r0, #32]
 8003ee0:	2b00      	cmp	r3, #0
 8003ee2:	d101      	bne.n	8003ee8 <_fflush_r+0x20>
 8003ee4:	f7ff f992 	bl	800320c <__sinit>
 8003ee8:	220c      	movs	r2, #12
 8003eea:	5ea3      	ldrsh	r3, [r4, r2]
 8003eec:	2b00      	cmp	r3, #0
 8003eee:	d0f1      	beq.n	8003ed4 <_fflush_r+0xc>
 8003ef0:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8003ef2:	07d2      	lsls	r2, r2, #31
 8003ef4:	d404      	bmi.n	8003f00 <_fflush_r+0x38>
 8003ef6:	059b      	lsls	r3, r3, #22
 8003ef8:	d402      	bmi.n	8003f00 <_fflush_r+0x38>
 8003efa:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8003efc:	f7ff fb97 	bl	800362e <__retarget_lock_acquire_recursive>
 8003f00:	0028      	movs	r0, r5
 8003f02:	0021      	movs	r1, r4
 8003f04:	f7ff ff5a 	bl	8003dbc <__sflush_r>
 8003f08:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8003f0a:	0005      	movs	r5, r0
 8003f0c:	07db      	lsls	r3, r3, #31
 8003f0e:	d4e2      	bmi.n	8003ed6 <_fflush_r+0xe>
 8003f10:	89a3      	ldrh	r3, [r4, #12]
 8003f12:	059b      	lsls	r3, r3, #22
 8003f14:	d4df      	bmi.n	8003ed6 <_fflush_r+0xe>
 8003f16:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8003f18:	f7ff fb8a 	bl	8003630 <__retarget_lock_release_recursive>
 8003f1c:	e7db      	b.n	8003ed6 <_fflush_r+0xe>
	...

08003f20 <__swhatbuf_r>:
 8003f20:	b570      	push	{r4, r5, r6, lr}
 8003f22:	000e      	movs	r6, r1
 8003f24:	001d      	movs	r5, r3
 8003f26:	230e      	movs	r3, #14
 8003f28:	5ec9      	ldrsh	r1, [r1, r3]
 8003f2a:	0014      	movs	r4, r2
 8003f2c:	b096      	sub	sp, #88	@ 0x58
 8003f2e:	2900      	cmp	r1, #0
 8003f30:	da0c      	bge.n	8003f4c <__swhatbuf_r+0x2c>
 8003f32:	89b2      	ldrh	r2, [r6, #12]
 8003f34:	2380      	movs	r3, #128	@ 0x80
 8003f36:	0011      	movs	r1, r2
 8003f38:	4019      	ands	r1, r3
 8003f3a:	421a      	tst	r2, r3
 8003f3c:	d114      	bne.n	8003f68 <__swhatbuf_r+0x48>
 8003f3e:	2380      	movs	r3, #128	@ 0x80
 8003f40:	00db      	lsls	r3, r3, #3
 8003f42:	2000      	movs	r0, #0
 8003f44:	6029      	str	r1, [r5, #0]
 8003f46:	6023      	str	r3, [r4, #0]
 8003f48:	b016      	add	sp, #88	@ 0x58
 8003f4a:	bd70      	pop	{r4, r5, r6, pc}
 8003f4c:	466a      	mov	r2, sp
 8003f4e:	f000 f853 	bl	8003ff8 <_fstat_r>
 8003f52:	2800      	cmp	r0, #0
 8003f54:	dbed      	blt.n	8003f32 <__swhatbuf_r+0x12>
 8003f56:	23f0      	movs	r3, #240	@ 0xf0
 8003f58:	9901      	ldr	r1, [sp, #4]
 8003f5a:	021b      	lsls	r3, r3, #8
 8003f5c:	4019      	ands	r1, r3
 8003f5e:	4b04      	ldr	r3, [pc, #16]	@ (8003f70 <__swhatbuf_r+0x50>)
 8003f60:	18c9      	adds	r1, r1, r3
 8003f62:	424b      	negs	r3, r1
 8003f64:	4159      	adcs	r1, r3
 8003f66:	e7ea      	b.n	8003f3e <__swhatbuf_r+0x1e>
 8003f68:	2100      	movs	r1, #0
 8003f6a:	2340      	movs	r3, #64	@ 0x40
 8003f6c:	e7e9      	b.n	8003f42 <__swhatbuf_r+0x22>
 8003f6e:	46c0      	nop			@ (mov r8, r8)
 8003f70:	ffffe000 	.word	0xffffe000

08003f74 <__smakebuf_r>:
 8003f74:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003f76:	2602      	movs	r6, #2
 8003f78:	898b      	ldrh	r3, [r1, #12]
 8003f7a:	0005      	movs	r5, r0
 8003f7c:	000c      	movs	r4, r1
 8003f7e:	b085      	sub	sp, #20
 8003f80:	4233      	tst	r3, r6
 8003f82:	d007      	beq.n	8003f94 <__smakebuf_r+0x20>
 8003f84:	0023      	movs	r3, r4
 8003f86:	3347      	adds	r3, #71	@ 0x47
 8003f88:	6023      	str	r3, [r4, #0]
 8003f8a:	6123      	str	r3, [r4, #16]
 8003f8c:	2301      	movs	r3, #1
 8003f8e:	6163      	str	r3, [r4, #20]
 8003f90:	b005      	add	sp, #20
 8003f92:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003f94:	ab03      	add	r3, sp, #12
 8003f96:	aa02      	add	r2, sp, #8
 8003f98:	f7ff ffc2 	bl	8003f20 <__swhatbuf_r>
 8003f9c:	9f02      	ldr	r7, [sp, #8]
 8003f9e:	9001      	str	r0, [sp, #4]
 8003fa0:	0039      	movs	r1, r7
 8003fa2:	0028      	movs	r0, r5
 8003fa4:	f7ff fbba 	bl	800371c <_malloc_r>
 8003fa8:	2800      	cmp	r0, #0
 8003faa:	d108      	bne.n	8003fbe <__smakebuf_r+0x4a>
 8003fac:	220c      	movs	r2, #12
 8003fae:	5ea3      	ldrsh	r3, [r4, r2]
 8003fb0:	059a      	lsls	r2, r3, #22
 8003fb2:	d4ed      	bmi.n	8003f90 <__smakebuf_r+0x1c>
 8003fb4:	2203      	movs	r2, #3
 8003fb6:	4393      	bics	r3, r2
 8003fb8:	431e      	orrs	r6, r3
 8003fba:	81a6      	strh	r6, [r4, #12]
 8003fbc:	e7e2      	b.n	8003f84 <__smakebuf_r+0x10>
 8003fbe:	2380      	movs	r3, #128	@ 0x80
 8003fc0:	89a2      	ldrh	r2, [r4, #12]
 8003fc2:	6020      	str	r0, [r4, #0]
 8003fc4:	4313      	orrs	r3, r2
 8003fc6:	81a3      	strh	r3, [r4, #12]
 8003fc8:	9b03      	ldr	r3, [sp, #12]
 8003fca:	6120      	str	r0, [r4, #16]
 8003fcc:	6167      	str	r7, [r4, #20]
 8003fce:	2b00      	cmp	r3, #0
 8003fd0:	d00c      	beq.n	8003fec <__smakebuf_r+0x78>
 8003fd2:	0028      	movs	r0, r5
 8003fd4:	230e      	movs	r3, #14
 8003fd6:	5ee1      	ldrsh	r1, [r4, r3]
 8003fd8:	f000 f820 	bl	800401c <_isatty_r>
 8003fdc:	2800      	cmp	r0, #0
 8003fde:	d005      	beq.n	8003fec <__smakebuf_r+0x78>
 8003fe0:	2303      	movs	r3, #3
 8003fe2:	89a2      	ldrh	r2, [r4, #12]
 8003fe4:	439a      	bics	r2, r3
 8003fe6:	3b02      	subs	r3, #2
 8003fe8:	4313      	orrs	r3, r2
 8003fea:	81a3      	strh	r3, [r4, #12]
 8003fec:	89a3      	ldrh	r3, [r4, #12]
 8003fee:	9a01      	ldr	r2, [sp, #4]
 8003ff0:	4313      	orrs	r3, r2
 8003ff2:	81a3      	strh	r3, [r4, #12]
 8003ff4:	e7cc      	b.n	8003f90 <__smakebuf_r+0x1c>
	...

08003ff8 <_fstat_r>:
 8003ff8:	2300      	movs	r3, #0
 8003ffa:	b570      	push	{r4, r5, r6, lr}
 8003ffc:	4d06      	ldr	r5, [pc, #24]	@ (8004018 <_fstat_r+0x20>)
 8003ffe:	0004      	movs	r4, r0
 8004000:	0008      	movs	r0, r1
 8004002:	0011      	movs	r1, r2
 8004004:	602b      	str	r3, [r5, #0]
 8004006:	f7fc feb0 	bl	8000d6a <_fstat>
 800400a:	1c43      	adds	r3, r0, #1
 800400c:	d103      	bne.n	8004016 <_fstat_r+0x1e>
 800400e:	682b      	ldr	r3, [r5, #0]
 8004010:	2b00      	cmp	r3, #0
 8004012:	d000      	beq.n	8004016 <_fstat_r+0x1e>
 8004014:	6023      	str	r3, [r4, #0]
 8004016:	bd70      	pop	{r4, r5, r6, pc}
 8004018:	20000430 	.word	0x20000430

0800401c <_isatty_r>:
 800401c:	2300      	movs	r3, #0
 800401e:	b570      	push	{r4, r5, r6, lr}
 8004020:	4d06      	ldr	r5, [pc, #24]	@ (800403c <_isatty_r+0x20>)
 8004022:	0004      	movs	r4, r0
 8004024:	0008      	movs	r0, r1
 8004026:	602b      	str	r3, [r5, #0]
 8004028:	f7fc fead 	bl	8000d86 <_isatty>
 800402c:	1c43      	adds	r3, r0, #1
 800402e:	d103      	bne.n	8004038 <_isatty_r+0x1c>
 8004030:	682b      	ldr	r3, [r5, #0]
 8004032:	2b00      	cmp	r3, #0
 8004034:	d000      	beq.n	8004038 <_isatty_r+0x1c>
 8004036:	6023      	str	r3, [r4, #0]
 8004038:	bd70      	pop	{r4, r5, r6, pc}
 800403a:	46c0      	nop			@ (mov r8, r8)
 800403c:	20000430 	.word	0x20000430

08004040 <_sbrk_r>:
 8004040:	2300      	movs	r3, #0
 8004042:	b570      	push	{r4, r5, r6, lr}
 8004044:	4d06      	ldr	r5, [pc, #24]	@ (8004060 <_sbrk_r+0x20>)
 8004046:	0004      	movs	r4, r0
 8004048:	0008      	movs	r0, r1
 800404a:	602b      	str	r3, [r5, #0]
 800404c:	f7fc feb0 	bl	8000db0 <_sbrk>
 8004050:	1c43      	adds	r3, r0, #1
 8004052:	d103      	bne.n	800405c <_sbrk_r+0x1c>
 8004054:	682b      	ldr	r3, [r5, #0]
 8004056:	2b00      	cmp	r3, #0
 8004058:	d000      	beq.n	800405c <_sbrk_r+0x1c>
 800405a:	6023      	str	r3, [r4, #0]
 800405c:	bd70      	pop	{r4, r5, r6, pc}
 800405e:	46c0      	nop			@ (mov r8, r8)
 8004060:	20000430 	.word	0x20000430

08004064 <memchr>:
 8004064:	b2c9      	uxtb	r1, r1
 8004066:	1882      	adds	r2, r0, r2
 8004068:	4290      	cmp	r0, r2
 800406a:	d101      	bne.n	8004070 <memchr+0xc>
 800406c:	2000      	movs	r0, #0
 800406e:	4770      	bx	lr
 8004070:	7803      	ldrb	r3, [r0, #0]
 8004072:	428b      	cmp	r3, r1
 8004074:	d0fb      	beq.n	800406e <memchr+0xa>
 8004076:	3001      	adds	r0, #1
 8004078:	e7f6      	b.n	8004068 <memchr+0x4>
	...

0800407c <_init>:
 800407c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800407e:	46c0      	nop			@ (mov r8, r8)
 8004080:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004082:	bc08      	pop	{r3}
 8004084:	469e      	mov	lr, r3
 8004086:	4770      	bx	lr

08004088 <_fini>:
 8004088:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800408a:	46c0      	nop			@ (mov r8, r8)
 800408c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800408e:	bc08      	pop	{r3}
 8004090:	469e      	mov	lr, r3
 8004092:	4770      	bx	lr
